// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: EpicsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=epics_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go EpicsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockEpicsServiceInterface is a mock of EpicsServiceInterface interface.
type MockEpicsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEpicsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockEpicsServiceInterfaceMockRecorder is the mock recorder for MockEpicsServiceInterface.
type MockEpicsServiceInterfaceMockRecorder struct {
	mock *MockEpicsServiceInterface
}

// NewMockEpicsServiceInterface creates a new mock instance.
func NewMockEpicsServiceInterface(ctrl *gomock.Controller) *MockEpicsServiceInterface {
	mock := &MockEpicsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEpicsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpicsServiceInterface) EXPECT() *MockEpicsServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateEpic mocks base method.
func (m *MockEpicsServiceInterface) CreateEpic(gid any, opt *gitlab.CreateEpicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEpic", varargs...)
	ret0, _ := ret[0].(*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEpic indicates an expected call of CreateEpic.
func (mr *MockEpicsServiceInterfaceMockRecorder) CreateEpic(gid, opt any, options ...any) *MockEpicsServiceInterfaceCreateEpicCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEpic", reflect.TypeOf((*MockEpicsServiceInterface)(nil).CreateEpic), varargs...)
	return &MockEpicsServiceInterfaceCreateEpicCall{Call: call}
}

// MockEpicsServiceInterfaceCreateEpicCall wrap *gomock.Call
type MockEpicsServiceInterfaceCreateEpicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpicsServiceInterfaceCreateEpicCall) Return(arg0 *gitlab.Epic, arg1 *gitlab.Response, arg2 error) *MockEpicsServiceInterfaceCreateEpicCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpicsServiceInterfaceCreateEpicCall) Do(f func(any, *gitlab.CreateEpicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceCreateEpicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpicsServiceInterfaceCreateEpicCall) DoAndReturn(f func(any, *gitlab.CreateEpicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceCreateEpicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteEpic mocks base method.
func (m *MockEpicsServiceInterface) DeleteEpic(gid any, epic int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEpic", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEpic indicates an expected call of DeleteEpic.
func (mr *MockEpicsServiceInterfaceMockRecorder) DeleteEpic(gid, epic any, options ...any) *MockEpicsServiceInterfaceDeleteEpicCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEpic", reflect.TypeOf((*MockEpicsServiceInterface)(nil).DeleteEpic), varargs...)
	return &MockEpicsServiceInterfaceDeleteEpicCall{Call: call}
}

// MockEpicsServiceInterfaceDeleteEpicCall wrap *gomock.Call
type MockEpicsServiceInterfaceDeleteEpicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpicsServiceInterfaceDeleteEpicCall) Return(arg0 *gitlab.Response, arg1 error) *MockEpicsServiceInterfaceDeleteEpicCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpicsServiceInterfaceDeleteEpicCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockEpicsServiceInterfaceDeleteEpicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpicsServiceInterfaceDeleteEpicCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockEpicsServiceInterfaceDeleteEpicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEpic mocks base method.
func (m *MockEpicsServiceInterface) GetEpic(gid any, epic int, options ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEpic", varargs...)
	ret0, _ := ret[0].(*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEpic indicates an expected call of GetEpic.
func (mr *MockEpicsServiceInterfaceMockRecorder) GetEpic(gid, epic any, options ...any) *MockEpicsServiceInterfaceGetEpicCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpic", reflect.TypeOf((*MockEpicsServiceInterface)(nil).GetEpic), varargs...)
	return &MockEpicsServiceInterfaceGetEpicCall{Call: call}
}

// MockEpicsServiceInterfaceGetEpicCall wrap *gomock.Call
type MockEpicsServiceInterfaceGetEpicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpicsServiceInterfaceGetEpicCall) Return(arg0 *gitlab.Epic, arg1 *gitlab.Response, arg2 error) *MockEpicsServiceInterfaceGetEpicCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpicsServiceInterfaceGetEpicCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceGetEpicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpicsServiceInterfaceGetEpicCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceGetEpicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEpicLinks mocks base method.
func (m *MockEpicsServiceInterface) GetEpicLinks(gid any, epic int, options ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEpicLinks", varargs...)
	ret0, _ := ret[0].([]*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEpicLinks indicates an expected call of GetEpicLinks.
func (mr *MockEpicsServiceInterfaceMockRecorder) GetEpicLinks(gid, epic any, options ...any) *MockEpicsServiceInterfaceGetEpicLinksCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpicLinks", reflect.TypeOf((*MockEpicsServiceInterface)(nil).GetEpicLinks), varargs...)
	return &MockEpicsServiceInterfaceGetEpicLinksCall{Call: call}
}

// MockEpicsServiceInterfaceGetEpicLinksCall wrap *gomock.Call
type MockEpicsServiceInterfaceGetEpicLinksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpicsServiceInterfaceGetEpicLinksCall) Return(arg0 []*gitlab.Epic, arg1 *gitlab.Response, arg2 error) *MockEpicsServiceInterfaceGetEpicLinksCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpicsServiceInterfaceGetEpicLinksCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceGetEpicLinksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpicsServiceInterfaceGetEpicLinksCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceGetEpicLinksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupEpics mocks base method.
func (m *MockEpicsServiceInterface) ListGroupEpics(gid any, opt *gitlab.ListGroupEpicsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupEpics", varargs...)
	ret0, _ := ret[0].([]*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupEpics indicates an expected call of ListGroupEpics.
func (mr *MockEpicsServiceInterfaceMockRecorder) ListGroupEpics(gid, opt any, options ...any) *MockEpicsServiceInterfaceListGroupEpicsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupEpics", reflect.TypeOf((*MockEpicsServiceInterface)(nil).ListGroupEpics), varargs...)
	return &MockEpicsServiceInterfaceListGroupEpicsCall{Call: call}
}

// MockEpicsServiceInterfaceListGroupEpicsCall wrap *gomock.Call
type MockEpicsServiceInterfaceListGroupEpicsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpicsServiceInterfaceListGroupEpicsCall) Return(arg0 []*gitlab.Epic, arg1 *gitlab.Response, arg2 error) *MockEpicsServiceInterfaceListGroupEpicsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpicsServiceInterfaceListGroupEpicsCall) Do(f func(any, *gitlab.ListGroupEpicsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceListGroupEpicsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpicsServiceInterfaceListGroupEpicsCall) DoAndReturn(f func(any, *gitlab.ListGroupEpicsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceListGroupEpicsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateEpic mocks base method.
func (m *MockEpicsServiceInterface) UpdateEpic(gid any, epic int, opt *gitlab.UpdateEpicOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, epic, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEpic", varargs...)
	ret0, _ := ret[0].(*gitlab.Epic)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateEpic indicates an expected call of UpdateEpic.
func (mr *MockEpicsServiceInterfaceMockRecorder) UpdateEpic(gid, epic, opt any, options ...any) *MockEpicsServiceInterfaceUpdateEpicCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, epic, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEpic", reflect.TypeOf((*MockEpicsServiceInterface)(nil).UpdateEpic), varargs...)
	return &MockEpicsServiceInterfaceUpdateEpicCall{Call: call}
}

// MockEpicsServiceInterfaceUpdateEpicCall wrap *gomock.Call
type MockEpicsServiceInterfaceUpdateEpicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEpicsServiceInterfaceUpdateEpicCall) Return(arg0 *gitlab.Epic, arg1 *gitlab.Response, arg2 error) *MockEpicsServiceInterfaceUpdateEpicCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEpicsServiceInterfaceUpdateEpicCall) Do(f func(any, int, *gitlab.UpdateEpicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceUpdateEpicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEpicsServiceInterfaceUpdateEpicCall) DoAndReturn(f func(any, int, *gitlab.UpdateEpicOptions, ...gitlab.RequestOptionFunc) (*gitlab.Epic, *gitlab.Response, error)) *MockEpicsServiceInterfaceUpdateEpicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
