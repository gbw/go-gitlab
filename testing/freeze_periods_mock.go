// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: FreezePeriodsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=freeze_periods_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go FreezePeriodsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockFreezePeriodsServiceInterface is a mock of FreezePeriodsServiceInterface interface.
type MockFreezePeriodsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFreezePeriodsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockFreezePeriodsServiceInterfaceMockRecorder is the mock recorder for MockFreezePeriodsServiceInterface.
type MockFreezePeriodsServiceInterfaceMockRecorder struct {
	mock *MockFreezePeriodsServiceInterface
}

// NewMockFreezePeriodsServiceInterface creates a new mock instance.
func NewMockFreezePeriodsServiceInterface(ctrl *gomock.Controller) *MockFreezePeriodsServiceInterface {
	mock := &MockFreezePeriodsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockFreezePeriodsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFreezePeriodsServiceInterface) EXPECT() *MockFreezePeriodsServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateFreezePeriodOptions mocks base method.
func (m *MockFreezePeriodsServiceInterface) CreateFreezePeriodOptions(pid any, opt *gitlab.CreateFreezePeriodOptions, options ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFreezePeriodOptions", varargs...)
	ret0, _ := ret[0].(*gitlab.FreezePeriod)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateFreezePeriodOptions indicates an expected call of CreateFreezePeriodOptions.
func (mr *MockFreezePeriodsServiceInterfaceMockRecorder) CreateFreezePeriodOptions(pid, opt any, options ...any) *MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFreezePeriodOptions", reflect.TypeOf((*MockFreezePeriodsServiceInterface)(nil).CreateFreezePeriodOptions), varargs...)
	return &MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall{Call: call}
}

// MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall wrap *gomock.Call
type MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall) Return(arg0 *gitlab.FreezePeriod, arg1 *gitlab.Response, arg2 error) *MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall) Do(f func(any, *gitlab.CreateFreezePeriodOptions, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall) DoAndReturn(f func(any, *gitlab.CreateFreezePeriodOptions, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceCreateFreezePeriodOptionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteFreezePeriod mocks base method.
func (m *MockFreezePeriodsServiceInterface) DeleteFreezePeriod(pid any, freezePeriod int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, freezePeriod}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFreezePeriod", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFreezePeriod indicates an expected call of DeleteFreezePeriod.
func (mr *MockFreezePeriodsServiceInterfaceMockRecorder) DeleteFreezePeriod(pid, freezePeriod any, options ...any) *MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, freezePeriod}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFreezePeriod", reflect.TypeOf((*MockFreezePeriodsServiceInterface)(nil).DeleteFreezePeriod), varargs...)
	return &MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall{Call: call}
}

// MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall wrap *gomock.Call
type MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall) Return(arg0 *gitlab.Response, arg1 error) *MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceDeleteFreezePeriodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetFreezePeriod mocks base method.
func (m *MockFreezePeriodsServiceInterface) GetFreezePeriod(pid any, freezePeriod int, options ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, freezePeriod}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFreezePeriod", varargs...)
	ret0, _ := ret[0].(*gitlab.FreezePeriod)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFreezePeriod indicates an expected call of GetFreezePeriod.
func (mr *MockFreezePeriodsServiceInterfaceMockRecorder) GetFreezePeriod(pid, freezePeriod any, options ...any) *MockFreezePeriodsServiceInterfaceGetFreezePeriodCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, freezePeriod}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFreezePeriod", reflect.TypeOf((*MockFreezePeriodsServiceInterface)(nil).GetFreezePeriod), varargs...)
	return &MockFreezePeriodsServiceInterfaceGetFreezePeriodCall{Call: call}
}

// MockFreezePeriodsServiceInterfaceGetFreezePeriodCall wrap *gomock.Call
type MockFreezePeriodsServiceInterfaceGetFreezePeriodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFreezePeriodsServiceInterfaceGetFreezePeriodCall) Return(arg0 *gitlab.FreezePeriod, arg1 *gitlab.Response, arg2 error) *MockFreezePeriodsServiceInterfaceGetFreezePeriodCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFreezePeriodsServiceInterfaceGetFreezePeriodCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceGetFreezePeriodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFreezePeriodsServiceInterfaceGetFreezePeriodCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceGetFreezePeriodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFreezePeriods mocks base method.
func (m *MockFreezePeriodsServiceInterface) ListFreezePeriods(pid any, opt *gitlab.ListFreezePeriodsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.FreezePeriod, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFreezePeriods", varargs...)
	ret0, _ := ret[0].([]*gitlab.FreezePeriod)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFreezePeriods indicates an expected call of ListFreezePeriods.
func (mr *MockFreezePeriodsServiceInterfaceMockRecorder) ListFreezePeriods(pid, opt any, options ...any) *MockFreezePeriodsServiceInterfaceListFreezePeriodsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFreezePeriods", reflect.TypeOf((*MockFreezePeriodsServiceInterface)(nil).ListFreezePeriods), varargs...)
	return &MockFreezePeriodsServiceInterfaceListFreezePeriodsCall{Call: call}
}

// MockFreezePeriodsServiceInterfaceListFreezePeriodsCall wrap *gomock.Call
type MockFreezePeriodsServiceInterfaceListFreezePeriodsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFreezePeriodsServiceInterfaceListFreezePeriodsCall) Return(arg0 []*gitlab.FreezePeriod, arg1 *gitlab.Response, arg2 error) *MockFreezePeriodsServiceInterfaceListFreezePeriodsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFreezePeriodsServiceInterfaceListFreezePeriodsCall) Do(f func(any, *gitlab.ListFreezePeriodsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.FreezePeriod, *gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceListFreezePeriodsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFreezePeriodsServiceInterfaceListFreezePeriodsCall) DoAndReturn(f func(any, *gitlab.ListFreezePeriodsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.FreezePeriod, *gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceListFreezePeriodsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateFreezePeriodOptions mocks base method.
func (m *MockFreezePeriodsServiceInterface) UpdateFreezePeriodOptions(pid any, freezePeriod int, opt *gitlab.UpdateFreezePeriodOptions, options ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, freezePeriod, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateFreezePeriodOptions", varargs...)
	ret0, _ := ret[0].(*gitlab.FreezePeriod)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateFreezePeriodOptions indicates an expected call of UpdateFreezePeriodOptions.
func (mr *MockFreezePeriodsServiceInterfaceMockRecorder) UpdateFreezePeriodOptions(pid, freezePeriod, opt any, options ...any) *MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, freezePeriod, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFreezePeriodOptions", reflect.TypeOf((*MockFreezePeriodsServiceInterface)(nil).UpdateFreezePeriodOptions), varargs...)
	return &MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall{Call: call}
}

// MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall wrap *gomock.Call
type MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall) Return(arg0 *gitlab.FreezePeriod, arg1 *gitlab.Response, arg2 error) *MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall) Do(f func(any, int, *gitlab.UpdateFreezePeriodOptions, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall) DoAndReturn(f func(any, int, *gitlab.UpdateFreezePeriodOptions, ...gitlab.RequestOptionFunc) (*gitlab.FreezePeriod, *gitlab.Response, error)) *MockFreezePeriodsServiceInterfaceUpdateFreezePeriodOptionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
