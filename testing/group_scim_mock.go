// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupSCIMServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_scim_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupSCIMServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupSCIMServiceInterface is a mock of GroupSCIMServiceInterface interface.
type MockGroupSCIMServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupSCIMServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupSCIMServiceInterfaceMockRecorder is the mock recorder for MockGroupSCIMServiceInterface.
type MockGroupSCIMServiceInterfaceMockRecorder struct {
	mock *MockGroupSCIMServiceInterface
}

// NewMockGroupSCIMServiceInterface creates a new mock instance.
func NewMockGroupSCIMServiceInterface(ctrl *gomock.Controller) *MockGroupSCIMServiceInterface {
	mock := &MockGroupSCIMServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupSCIMServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupSCIMServiceInterface) EXPECT() *MockGroupSCIMServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteSCIMIdentity mocks base method.
func (m *MockGroupSCIMServiceInterface) DeleteSCIMIdentity(gid any, uid string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, uid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSCIMIdentity", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSCIMIdentity indicates an expected call of DeleteSCIMIdentity.
func (mr *MockGroupSCIMServiceInterfaceMockRecorder) DeleteSCIMIdentity(gid, uid any, options ...any) *MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, uid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSCIMIdentity", reflect.TypeOf((*MockGroupSCIMServiceInterface)(nil).DeleteSCIMIdentity), varargs...)
	return &MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall{Call: call}
}

// MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall wrap *gomock.Call
type MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupSCIMServiceInterfaceDeleteSCIMIdentityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSCIMIdentitiesForGroup mocks base method.
func (m *MockGroupSCIMServiceInterface) GetSCIMIdentitiesForGroup(gid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSCIMIdentity, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSCIMIdentitiesForGroup", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupSCIMIdentity)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSCIMIdentitiesForGroup indicates an expected call of GetSCIMIdentitiesForGroup.
func (mr *MockGroupSCIMServiceInterfaceMockRecorder) GetSCIMIdentitiesForGroup(gid any, options ...any) *MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSCIMIdentitiesForGroup", reflect.TypeOf((*MockGroupSCIMServiceInterface)(nil).GetSCIMIdentitiesForGroup), varargs...)
	return &MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall{Call: call}
}

// MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall wrap *gomock.Call
type MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall) Return(arg0 []*gitlab.GroupSCIMIdentity, arg1 *gitlab.Response, arg2 error) *MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall) Do(f func(any, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSCIMIdentity, *gitlab.Response, error)) *MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSCIMIdentity, *gitlab.Response, error)) *MockGroupSCIMServiceInterfaceGetSCIMIdentitiesForGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSCIMIdentity mocks base method.
func (m *MockGroupSCIMServiceInterface) GetSCIMIdentity(gid any, uid string, options ...gitlab.RequestOptionFunc) (*gitlab.GroupSCIMIdentity, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, uid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSCIMIdentity", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupSCIMIdentity)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSCIMIdentity indicates an expected call of GetSCIMIdentity.
func (mr *MockGroupSCIMServiceInterfaceMockRecorder) GetSCIMIdentity(gid, uid any, options ...any) *MockGroupSCIMServiceInterfaceGetSCIMIdentityCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, uid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSCIMIdentity", reflect.TypeOf((*MockGroupSCIMServiceInterface)(nil).GetSCIMIdentity), varargs...)
	return &MockGroupSCIMServiceInterfaceGetSCIMIdentityCall{Call: call}
}

// MockGroupSCIMServiceInterfaceGetSCIMIdentityCall wrap *gomock.Call
type MockGroupSCIMServiceInterfaceGetSCIMIdentityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupSCIMServiceInterfaceGetSCIMIdentityCall) Return(arg0 *gitlab.GroupSCIMIdentity, arg1 *gitlab.Response, arg2 error) *MockGroupSCIMServiceInterfaceGetSCIMIdentityCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupSCIMServiceInterfaceGetSCIMIdentityCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.GroupSCIMIdentity, *gitlab.Response, error)) *MockGroupSCIMServiceInterfaceGetSCIMIdentityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupSCIMServiceInterfaceGetSCIMIdentityCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.GroupSCIMIdentity, *gitlab.Response, error)) *MockGroupSCIMServiceInterfaceGetSCIMIdentityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSCIMIdentity mocks base method.
func (m *MockGroupSCIMServiceInterface) UpdateSCIMIdentity(gid any, uid string, opt *gitlab.UpdateSCIMIdentityOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, uid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSCIMIdentity", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSCIMIdentity indicates an expected call of UpdateSCIMIdentity.
func (mr *MockGroupSCIMServiceInterfaceMockRecorder) UpdateSCIMIdentity(gid, uid, opt any, options ...any) *MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, uid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSCIMIdentity", reflect.TypeOf((*MockGroupSCIMServiceInterface)(nil).UpdateSCIMIdentity), varargs...)
	return &MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall{Call: call}
}

// MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall wrap *gomock.Call
type MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall) Do(f func(any, string, *gitlab.UpdateSCIMIdentityOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall) DoAndReturn(f func(any, string, *gitlab.UpdateSCIMIdentityOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupSCIMServiceInterfaceUpdateSCIMIdentityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
