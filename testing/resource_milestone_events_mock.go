// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ResourceMilestoneEventsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=resource_milestone_events_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ResourceMilestoneEventsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceMilestoneEventsServiceInterface is a mock of ResourceMilestoneEventsServiceInterface interface.
type MockResourceMilestoneEventsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResourceMilestoneEventsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockResourceMilestoneEventsServiceInterfaceMockRecorder is the mock recorder for MockResourceMilestoneEventsServiceInterface.
type MockResourceMilestoneEventsServiceInterfaceMockRecorder struct {
	mock *MockResourceMilestoneEventsServiceInterface
}

// NewMockResourceMilestoneEventsServiceInterface creates a new mock instance.
func NewMockResourceMilestoneEventsServiceInterface(ctrl *gomock.Controller) *MockResourceMilestoneEventsServiceInterface {
	mock := &MockResourceMilestoneEventsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockResourceMilestoneEventsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceMilestoneEventsServiceInterface) EXPECT() *MockResourceMilestoneEventsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetIssueMilestoneEvent mocks base method.
func (m *MockResourceMilestoneEventsServiceInterface) GetIssueMilestoneEvent(pid any, issue, event int, options ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueMilestoneEvent", varargs...)
	ret0, _ := ret[0].(*gitlab.MilestoneEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueMilestoneEvent indicates an expected call of GetIssueMilestoneEvent.
func (mr *MockResourceMilestoneEventsServiceInterfaceMockRecorder) GetIssueMilestoneEvent(pid, issue, event any, options ...any) *MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, event}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueMilestoneEvent", reflect.TypeOf((*MockResourceMilestoneEventsServiceInterface)(nil).GetIssueMilestoneEvent), varargs...)
	return &MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall{Call: call}
}

// MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall wrap *gomock.Call
type MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall) Return(arg0 *gitlab.MilestoneEvent, arg1 *gitlab.Response, arg2 error) *MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error)) *MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error)) *MockResourceMilestoneEventsServiceInterfaceGetIssueMilestoneEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMergeRequestMilestoneEvent mocks base method.
func (m *MockResourceMilestoneEventsServiceInterface) GetMergeRequestMilestoneEvent(pid any, request, event int, options ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, request, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeRequestMilestoneEvent", varargs...)
	ret0, _ := ret[0].(*gitlab.MilestoneEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMergeRequestMilestoneEvent indicates an expected call of GetMergeRequestMilestoneEvent.
func (mr *MockResourceMilestoneEventsServiceInterfaceMockRecorder) GetMergeRequestMilestoneEvent(pid, request, event any, options ...any) *MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, request, event}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestMilestoneEvent", reflect.TypeOf((*MockResourceMilestoneEventsServiceInterface)(nil).GetMergeRequestMilestoneEvent), varargs...)
	return &MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall{Call: call}
}

// MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall wrap *gomock.Call
type MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall) Return(arg0 *gitlab.MilestoneEvent, arg1 *gitlab.Response, arg2 error) *MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error)) *MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.MilestoneEvent, *gitlab.Response, error)) *MockResourceMilestoneEventsServiceInterfaceGetMergeRequestMilestoneEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListIssueMilestoneEvents mocks base method.
func (m *MockResourceMilestoneEventsServiceInterface) ListIssueMilestoneEvents(pid any, issue int, opt *gitlab.ListMilestoneEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssueMilestoneEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.MilestoneEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueMilestoneEvents indicates an expected call of ListIssueMilestoneEvents.
func (mr *MockResourceMilestoneEventsServiceInterfaceMockRecorder) ListIssueMilestoneEvents(pid, issue, opt any, options ...any) *MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueMilestoneEvents", reflect.TypeOf((*MockResourceMilestoneEventsServiceInterface)(nil).ListIssueMilestoneEvents), varargs...)
	return &MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall{Call: call}
}

// MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall wrap *gomock.Call
type MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall) Return(arg0 []*gitlab.MilestoneEvent, arg1 *gitlab.Response, arg2 error) *MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall) Do(f func(any, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error)) *MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall) DoAndReturn(f func(any, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error)) *MockResourceMilestoneEventsServiceInterfaceListIssueMilestoneEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMergeMilestoneEvents mocks base method.
func (m *MockResourceMilestoneEventsServiceInterface) ListMergeMilestoneEvents(pid any, request int, opt *gitlab.ListMilestoneEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, request, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeMilestoneEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.MilestoneEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeMilestoneEvents indicates an expected call of ListMergeMilestoneEvents.
func (mr *MockResourceMilestoneEventsServiceInterfaceMockRecorder) ListMergeMilestoneEvents(pid, request, opt any, options ...any) *MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, request, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeMilestoneEvents", reflect.TypeOf((*MockResourceMilestoneEventsServiceInterface)(nil).ListMergeMilestoneEvents), varargs...)
	return &MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall{Call: call}
}

// MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall wrap *gomock.Call
type MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall) Return(arg0 []*gitlab.MilestoneEvent, arg1 *gitlab.Response, arg2 error) *MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall) Do(f func(any, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error)) *MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall) DoAndReturn(f func(any, int, *gitlab.ListMilestoneEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MilestoneEvent, *gitlab.Response, error)) *MockResourceMilestoneEventsServiceInterfaceListMergeMilestoneEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
