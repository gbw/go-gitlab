// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: PlanLimitsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=plan_limits_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go PlanLimitsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockPlanLimitsServiceInterface is a mock of PlanLimitsServiceInterface interface.
type MockPlanLimitsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPlanLimitsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockPlanLimitsServiceInterfaceMockRecorder is the mock recorder for MockPlanLimitsServiceInterface.
type MockPlanLimitsServiceInterfaceMockRecorder struct {
	mock *MockPlanLimitsServiceInterface
}

// NewMockPlanLimitsServiceInterface creates a new mock instance.
func NewMockPlanLimitsServiceInterface(ctrl *gomock.Controller) *MockPlanLimitsServiceInterface {
	mock := &MockPlanLimitsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPlanLimitsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanLimitsServiceInterface) EXPECT() *MockPlanLimitsServiceInterfaceMockRecorder {
	return m.recorder
}

// ChangePlanLimits mocks base method.
func (m *MockPlanLimitsServiceInterface) ChangePlanLimits(opt *gitlab.ChangePlanLimitOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PlanLimit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangePlanLimits", varargs...)
	ret0, _ := ret[0].(*gitlab.PlanLimit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangePlanLimits indicates an expected call of ChangePlanLimits.
func (mr *MockPlanLimitsServiceInterfaceMockRecorder) ChangePlanLimits(opt any, options ...any) *MockPlanLimitsServiceInterfaceChangePlanLimitsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePlanLimits", reflect.TypeOf((*MockPlanLimitsServiceInterface)(nil).ChangePlanLimits), varargs...)
	return &MockPlanLimitsServiceInterfaceChangePlanLimitsCall{Call: call}
}

// MockPlanLimitsServiceInterfaceChangePlanLimitsCall wrap *gomock.Call
type MockPlanLimitsServiceInterfaceChangePlanLimitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlanLimitsServiceInterfaceChangePlanLimitsCall) Return(arg0 *gitlab.PlanLimit, arg1 *gitlab.Response, arg2 error) *MockPlanLimitsServiceInterfaceChangePlanLimitsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlanLimitsServiceInterfaceChangePlanLimitsCall) Do(f func(*gitlab.ChangePlanLimitOptions, ...gitlab.RequestOptionFunc) (*gitlab.PlanLimit, *gitlab.Response, error)) *MockPlanLimitsServiceInterfaceChangePlanLimitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlanLimitsServiceInterfaceChangePlanLimitsCall) DoAndReturn(f func(*gitlab.ChangePlanLimitOptions, ...gitlab.RequestOptionFunc) (*gitlab.PlanLimit, *gitlab.Response, error)) *MockPlanLimitsServiceInterfaceChangePlanLimitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCurrentPlanLimits mocks base method.
func (m *MockPlanLimitsServiceInterface) GetCurrentPlanLimits(opt *gitlab.GetCurrentPlanLimitsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PlanLimit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentPlanLimits", varargs...)
	ret0, _ := ret[0].(*gitlab.PlanLimit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCurrentPlanLimits indicates an expected call of GetCurrentPlanLimits.
func (mr *MockPlanLimitsServiceInterfaceMockRecorder) GetCurrentPlanLimits(opt any, options ...any) *MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentPlanLimits", reflect.TypeOf((*MockPlanLimitsServiceInterface)(nil).GetCurrentPlanLimits), varargs...)
	return &MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall{Call: call}
}

// MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall wrap *gomock.Call
type MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall) Return(arg0 *gitlab.PlanLimit, arg1 *gitlab.Response, arg2 error) *MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall) Do(f func(*gitlab.GetCurrentPlanLimitsOptions, ...gitlab.RequestOptionFunc) (*gitlab.PlanLimit, *gitlab.Response, error)) *MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall) DoAndReturn(f func(*gitlab.GetCurrentPlanLimitsOptions, ...gitlab.RequestOptionFunc) (*gitlab.PlanLimit, *gitlab.Response, error)) *MockPlanLimitsServiceInterfaceGetCurrentPlanLimitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
