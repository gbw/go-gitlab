// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupVariablesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_variables_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupVariablesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupVariablesServiceInterface is a mock of GroupVariablesServiceInterface interface.
type MockGroupVariablesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupVariablesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupVariablesServiceInterfaceMockRecorder is the mock recorder for MockGroupVariablesServiceInterface.
type MockGroupVariablesServiceInterfaceMockRecorder struct {
	mock *MockGroupVariablesServiceInterface
}

// NewMockGroupVariablesServiceInterface creates a new mock instance.
func NewMockGroupVariablesServiceInterface(ctrl *gomock.Controller) *MockGroupVariablesServiceInterface {
	mock := &MockGroupVariablesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupVariablesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupVariablesServiceInterface) EXPECT() *MockGroupVariablesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateVariable mocks base method.
func (m *MockGroupVariablesServiceInterface) CreateVariable(gid any, opt *gitlab.CreateGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVariable indicates an expected call of CreateVariable.
func (mr *MockGroupVariablesServiceInterfaceMockRecorder) CreateVariable(gid, opt any, options ...any) *MockGroupVariablesServiceInterfaceCreateVariableCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariable", reflect.TypeOf((*MockGroupVariablesServiceInterface)(nil).CreateVariable), varargs...)
	return &MockGroupVariablesServiceInterfaceCreateVariableCall{Call: call}
}

// MockGroupVariablesServiceInterfaceCreateVariableCall wrap *gomock.Call
type MockGroupVariablesServiceInterfaceCreateVariableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupVariablesServiceInterfaceCreateVariableCall) Return(arg0 *gitlab.GroupVariable, arg1 *gitlab.Response, arg2 error) *MockGroupVariablesServiceInterfaceCreateVariableCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupVariablesServiceInterfaceCreateVariableCall) Do(f func(any, *gitlab.CreateGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)) *MockGroupVariablesServiceInterfaceCreateVariableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupVariablesServiceInterfaceCreateVariableCall) DoAndReturn(f func(any, *gitlab.CreateGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)) *MockGroupVariablesServiceInterfaceCreateVariableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVariable mocks base method.
func (m *MockGroupVariablesServiceInterface) GetVariable(gid any, key string, opt *gitlab.GetGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVariable indicates an expected call of GetVariable.
func (mr *MockGroupVariablesServiceInterfaceMockRecorder) GetVariable(gid, key, opt any, options ...any) *MockGroupVariablesServiceInterfaceGetVariableCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, key, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariable", reflect.TypeOf((*MockGroupVariablesServiceInterface)(nil).GetVariable), varargs...)
	return &MockGroupVariablesServiceInterfaceGetVariableCall{Call: call}
}

// MockGroupVariablesServiceInterfaceGetVariableCall wrap *gomock.Call
type MockGroupVariablesServiceInterfaceGetVariableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupVariablesServiceInterfaceGetVariableCall) Return(arg0 *gitlab.GroupVariable, arg1 *gitlab.Response, arg2 error) *MockGroupVariablesServiceInterfaceGetVariableCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupVariablesServiceInterfaceGetVariableCall) Do(f func(any, string, *gitlab.GetGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)) *MockGroupVariablesServiceInterfaceGetVariableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupVariablesServiceInterfaceGetVariableCall) DoAndReturn(f func(any, string, *gitlab.GetGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)) *MockGroupVariablesServiceInterfaceGetVariableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVariables mocks base method.
func (m *MockGroupVariablesServiceInterface) ListVariables(gid any, opt *gitlab.ListGroupVariablesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVariables", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVariables indicates an expected call of ListVariables.
func (mr *MockGroupVariablesServiceInterfaceMockRecorder) ListVariables(gid, opt any, options ...any) *MockGroupVariablesServiceInterfaceListVariablesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariables", reflect.TypeOf((*MockGroupVariablesServiceInterface)(nil).ListVariables), varargs...)
	return &MockGroupVariablesServiceInterfaceListVariablesCall{Call: call}
}

// MockGroupVariablesServiceInterfaceListVariablesCall wrap *gomock.Call
type MockGroupVariablesServiceInterfaceListVariablesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupVariablesServiceInterfaceListVariablesCall) Return(arg0 []*gitlab.GroupVariable, arg1 *gitlab.Response, arg2 error) *MockGroupVariablesServiceInterfaceListVariablesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupVariablesServiceInterfaceListVariablesCall) Do(f func(any, *gitlab.ListGroupVariablesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupVariable, *gitlab.Response, error)) *MockGroupVariablesServiceInterfaceListVariablesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupVariablesServiceInterfaceListVariablesCall) DoAndReturn(f func(any, *gitlab.ListGroupVariablesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupVariable, *gitlab.Response, error)) *MockGroupVariablesServiceInterfaceListVariablesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveVariable mocks base method.
func (m *MockGroupVariablesServiceInterface) RemoveVariable(gid any, key string, opt *gitlab.RemoveGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVariable indicates an expected call of RemoveVariable.
func (mr *MockGroupVariablesServiceInterfaceMockRecorder) RemoveVariable(gid, key, opt any, options ...any) *MockGroupVariablesServiceInterfaceRemoveVariableCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, key, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVariable", reflect.TypeOf((*MockGroupVariablesServiceInterface)(nil).RemoveVariable), varargs...)
	return &MockGroupVariablesServiceInterfaceRemoveVariableCall{Call: call}
}

// MockGroupVariablesServiceInterfaceRemoveVariableCall wrap *gomock.Call
type MockGroupVariablesServiceInterfaceRemoveVariableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupVariablesServiceInterfaceRemoveVariableCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupVariablesServiceInterfaceRemoveVariableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupVariablesServiceInterfaceRemoveVariableCall) Do(f func(any, string, *gitlab.RemoveGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupVariablesServiceInterfaceRemoveVariableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupVariablesServiceInterfaceRemoveVariableCall) DoAndReturn(f func(any, string, *gitlab.RemoveGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupVariablesServiceInterfaceRemoveVariableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVariable mocks base method.
func (m *MockGroupVariablesServiceInterface) UpdateVariable(gid any, key string, opt *gitlab.UpdateGroupVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateVariable indicates an expected call of UpdateVariable.
func (mr *MockGroupVariablesServiceInterfaceMockRecorder) UpdateVariable(gid, key, opt any, options ...any) *MockGroupVariablesServiceInterfaceUpdateVariableCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, key, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariable", reflect.TypeOf((*MockGroupVariablesServiceInterface)(nil).UpdateVariable), varargs...)
	return &MockGroupVariablesServiceInterfaceUpdateVariableCall{Call: call}
}

// MockGroupVariablesServiceInterfaceUpdateVariableCall wrap *gomock.Call
type MockGroupVariablesServiceInterfaceUpdateVariableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupVariablesServiceInterfaceUpdateVariableCall) Return(arg0 *gitlab.GroupVariable, arg1 *gitlab.Response, arg2 error) *MockGroupVariablesServiceInterfaceUpdateVariableCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupVariablesServiceInterfaceUpdateVariableCall) Do(f func(any, string, *gitlab.UpdateGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)) *MockGroupVariablesServiceInterfaceUpdateVariableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupVariablesServiceInterfaceUpdateVariableCall) DoAndReturn(f func(any, string, *gitlab.UpdateGroupVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupVariable, *gitlab.Response, error)) *MockGroupVariablesServiceInterfaceUpdateVariableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
