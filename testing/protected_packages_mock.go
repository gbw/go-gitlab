// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProtectedPackagesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=protected_packages_mock.go -package=testing gitlab.com/gitlab-org/api/client-go ProtectedPackagesServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProtectedPackagesServiceInterface is a mock of ProtectedPackagesServiceInterface interface.
type MockProtectedPackagesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProtectedPackagesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProtectedPackagesServiceInterfaceMockRecorder is the mock recorder for MockProtectedPackagesServiceInterface.
type MockProtectedPackagesServiceInterfaceMockRecorder struct {
	mock *MockProtectedPackagesServiceInterface
}

// NewMockProtectedPackagesServiceInterface creates a new mock instance.
func NewMockProtectedPackagesServiceInterface(ctrl *gomock.Controller) *MockProtectedPackagesServiceInterface {
	mock := &MockProtectedPackagesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProtectedPackagesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtectedPackagesServiceInterface) EXPECT() *MockProtectedPackagesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreatePackageProtectionRules mocks base method.
func (m *MockProtectedPackagesServiceInterface) CreatePackageProtectionRules(pid any, opt *gitlab.CreatePackageProtectionRulesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PackageProtectionRule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePackageProtectionRules", varargs...)
	ret0, _ := ret[0].(*gitlab.PackageProtectionRule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePackageProtectionRules indicates an expected call of CreatePackageProtectionRules.
func (mr *MockProtectedPackagesServiceInterfaceMockRecorder) CreatePackageProtectionRules(pid, opt any, options ...any) *MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePackageProtectionRules", reflect.TypeOf((*MockProtectedPackagesServiceInterface)(nil).CreatePackageProtectionRules), varargs...)
	return &MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall{Call: call}
}

// MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall wrap *gomock.Call
type MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall) Return(arg0 *gitlab.PackageProtectionRule, arg1 *gitlab.Response, arg2 error) *MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall) Do(f func(any, *gitlab.CreatePackageProtectionRulesOptions, ...gitlab.RequestOptionFunc) (*gitlab.PackageProtectionRule, *gitlab.Response, error)) *MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall) DoAndReturn(f func(any, *gitlab.CreatePackageProtectionRulesOptions, ...gitlab.RequestOptionFunc) (*gitlab.PackageProtectionRule, *gitlab.Response, error)) *MockProtectedPackagesServiceInterfaceCreatePackageProtectionRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePackageProtectionRules mocks base method.
func (m *MockProtectedPackagesServiceInterface) DeletePackageProtectionRules(pid any, packageProtectionRule int64, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, packageProtectionRule}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePackageProtectionRules", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePackageProtectionRules indicates an expected call of DeletePackageProtectionRules.
func (mr *MockProtectedPackagesServiceInterfaceMockRecorder) DeletePackageProtectionRules(pid, packageProtectionRule any, options ...any) *MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, packageProtectionRule}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePackageProtectionRules", reflect.TypeOf((*MockProtectedPackagesServiceInterface)(nil).DeletePackageProtectionRules), varargs...)
	return &MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall{Call: call}
}

// MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall wrap *gomock.Call
type MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall) Return(arg0 *gitlab.Response, arg1 error) *MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall) Do(f func(any, int64, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall) DoAndReturn(f func(any, int64, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProtectedPackagesServiceInterfaceDeletePackageProtectionRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPackageProtectionRules mocks base method.
func (m *MockProtectedPackagesServiceInterface) ListPackageProtectionRules(pid any, opt *gitlab.ListPackageProtectionRulesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PackageProtectionRule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPackageProtectionRules", varargs...)
	ret0, _ := ret[0].([]*gitlab.PackageProtectionRule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPackageProtectionRules indicates an expected call of ListPackageProtectionRules.
func (mr *MockProtectedPackagesServiceInterfaceMockRecorder) ListPackageProtectionRules(pid, opt any, options ...any) *MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPackageProtectionRules", reflect.TypeOf((*MockProtectedPackagesServiceInterface)(nil).ListPackageProtectionRules), varargs...)
	return &MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall{Call: call}
}

// MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall wrap *gomock.Call
type MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall) Return(arg0 []*gitlab.PackageProtectionRule, arg1 *gitlab.Response, arg2 error) *MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall) Do(f func(any, *gitlab.ListPackageProtectionRulesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PackageProtectionRule, *gitlab.Response, error)) *MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall) DoAndReturn(f func(any, *gitlab.ListPackageProtectionRulesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PackageProtectionRule, *gitlab.Response, error)) *MockProtectedPackagesServiceInterfaceListPackageProtectionRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePackageProtectionRules mocks base method.
func (m *MockProtectedPackagesServiceInterface) UpdatePackageProtectionRules(pid any, packageProtectionRule int64, opt *gitlab.UpdatePackageProtectionRulesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PackageProtectionRule, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, packageProtectionRule, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePackageProtectionRules", varargs...)
	ret0, _ := ret[0].(*gitlab.PackageProtectionRule)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePackageProtectionRules indicates an expected call of UpdatePackageProtectionRules.
func (mr *MockProtectedPackagesServiceInterfaceMockRecorder) UpdatePackageProtectionRules(pid, packageProtectionRule, opt any, options ...any) *MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, packageProtectionRule, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePackageProtectionRules", reflect.TypeOf((*MockProtectedPackagesServiceInterface)(nil).UpdatePackageProtectionRules), varargs...)
	return &MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall{Call: call}
}

// MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall wrap *gomock.Call
type MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall) Return(arg0 *gitlab.PackageProtectionRule, arg1 *gitlab.Response, arg2 error) *MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall) Do(f func(any, int64, *gitlab.UpdatePackageProtectionRulesOptions, ...gitlab.RequestOptionFunc) (*gitlab.PackageProtectionRule, *gitlab.Response, error)) *MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall) DoAndReturn(f func(any, int64, *gitlab.UpdatePackageProtectionRulesOptions, ...gitlab.RequestOptionFunc) (*gitlab.PackageProtectionRule, *gitlab.Response, error)) *MockProtectedPackagesServiceInterfaceUpdatePackageProtectionRulesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
