// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ApplicationStatisticsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=application_statistics_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ApplicationStatisticsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationStatisticsServiceInterface is a mock of ApplicationStatisticsServiceInterface interface.
type MockApplicationStatisticsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationStatisticsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockApplicationStatisticsServiceInterfaceMockRecorder is the mock recorder for MockApplicationStatisticsServiceInterface.
type MockApplicationStatisticsServiceInterfaceMockRecorder struct {
	mock *MockApplicationStatisticsServiceInterface
}

// NewMockApplicationStatisticsServiceInterface creates a new mock instance.
func NewMockApplicationStatisticsServiceInterface(ctrl *gomock.Controller) *MockApplicationStatisticsServiceInterface {
	mock := &MockApplicationStatisticsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockApplicationStatisticsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationStatisticsServiceInterface) EXPECT() *MockApplicationStatisticsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetApplicationStatistics mocks base method.
func (m *MockApplicationStatisticsServiceInterface) GetApplicationStatistics(options ...gitlab.RequestOptionFunc) (*gitlab.ApplicationStatistics, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationStatistics", varargs...)
	ret0, _ := ret[0].(*gitlab.ApplicationStatistics)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationStatistics indicates an expected call of GetApplicationStatistics.
func (mr *MockApplicationStatisticsServiceInterfaceMockRecorder) GetApplicationStatistics(options ...any) *MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationStatistics", reflect.TypeOf((*MockApplicationStatisticsServiceInterface)(nil).GetApplicationStatistics), options...)
	return &MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall{Call: call}
}

// MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall wrap *gomock.Call
type MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall) Return(arg0 *gitlab.ApplicationStatistics, arg1 *gitlab.Response, arg2 error) *MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.ApplicationStatistics, *gitlab.Response, error)) *MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.ApplicationStatistics, *gitlab.Response, error)) *MockApplicationStatisticsServiceInterfaceGetApplicationStatisticsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
