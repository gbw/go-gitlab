// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProjectMirrorServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=project_mirror_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ProjectMirrorServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectMirrorServiceInterface is a mock of ProjectMirrorServiceInterface interface.
type MockProjectMirrorServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectMirrorServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectMirrorServiceInterfaceMockRecorder is the mock recorder for MockProjectMirrorServiceInterface.
type MockProjectMirrorServiceInterfaceMockRecorder struct {
	mock *MockProjectMirrorServiceInterface
}

// NewMockProjectMirrorServiceInterface creates a new mock instance.
func NewMockProjectMirrorServiceInterface(ctrl *gomock.Controller) *MockProjectMirrorServiceInterface {
	mock := &MockProjectMirrorServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectMirrorServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectMirrorServiceInterface) EXPECT() *MockProjectMirrorServiceInterfaceMockRecorder {
	return m.recorder
}

// AddProjectMirror mocks base method.
func (m *MockProjectMirrorServiceInterface) AddProjectMirror(pid any, opt *gitlab.AddProjectMirrorOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProjectMirror", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectMirror)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddProjectMirror indicates an expected call of AddProjectMirror.
func (mr *MockProjectMirrorServiceInterfaceMockRecorder) AddProjectMirror(pid, opt any, options ...any) *MockProjectMirrorServiceInterfaceAddProjectMirrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProjectMirror", reflect.TypeOf((*MockProjectMirrorServiceInterface)(nil).AddProjectMirror), varargs...)
	return &MockProjectMirrorServiceInterfaceAddProjectMirrorCall{Call: call}
}

// MockProjectMirrorServiceInterfaceAddProjectMirrorCall wrap *gomock.Call
type MockProjectMirrorServiceInterfaceAddProjectMirrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectMirrorServiceInterfaceAddProjectMirrorCall) Return(arg0 *gitlab.ProjectMirror, arg1 *gitlab.Response, arg2 error) *MockProjectMirrorServiceInterfaceAddProjectMirrorCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectMirrorServiceInterfaceAddProjectMirrorCall) Do(f func(any, *gitlab.AddProjectMirrorOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceAddProjectMirrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectMirrorServiceInterfaceAddProjectMirrorCall) DoAndReturn(f func(any, *gitlab.AddProjectMirrorOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceAddProjectMirrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProjectMirror mocks base method.
func (m *MockProjectMirrorServiceInterface) DeleteProjectMirror(pid any, mirror int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mirror}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectMirror", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectMirror indicates an expected call of DeleteProjectMirror.
func (mr *MockProjectMirrorServiceInterfaceMockRecorder) DeleteProjectMirror(pid, mirror any, options ...any) *MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mirror}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectMirror", reflect.TypeOf((*MockProjectMirrorServiceInterface)(nil).DeleteProjectMirror), varargs...)
	return &MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall{Call: call}
}

// MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall wrap *gomock.Call
type MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall) Return(arg0 *gitlab.Response, arg1 error) *MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProjectMirrorServiceInterfaceDeleteProjectMirrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditProjectMirror mocks base method.
func (m *MockProjectMirrorServiceInterface) EditProjectMirror(pid any, mirror int, opt *gitlab.EditProjectMirrorOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mirror, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditProjectMirror", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectMirror)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditProjectMirror indicates an expected call of EditProjectMirror.
func (mr *MockProjectMirrorServiceInterfaceMockRecorder) EditProjectMirror(pid, mirror, opt any, options ...any) *MockProjectMirrorServiceInterfaceEditProjectMirrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mirror, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProjectMirror", reflect.TypeOf((*MockProjectMirrorServiceInterface)(nil).EditProjectMirror), varargs...)
	return &MockProjectMirrorServiceInterfaceEditProjectMirrorCall{Call: call}
}

// MockProjectMirrorServiceInterfaceEditProjectMirrorCall wrap *gomock.Call
type MockProjectMirrorServiceInterfaceEditProjectMirrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectMirrorServiceInterfaceEditProjectMirrorCall) Return(arg0 *gitlab.ProjectMirror, arg1 *gitlab.Response, arg2 error) *MockProjectMirrorServiceInterfaceEditProjectMirrorCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectMirrorServiceInterfaceEditProjectMirrorCall) Do(f func(any, int, *gitlab.EditProjectMirrorOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceEditProjectMirrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectMirrorServiceInterfaceEditProjectMirrorCall) DoAndReturn(f func(any, int, *gitlab.EditProjectMirrorOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceEditProjectMirrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectMirror mocks base method.
func (m *MockProjectMirrorServiceInterface) GetProjectMirror(pid any, mirror int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mirror}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectMirror", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectMirror)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectMirror indicates an expected call of GetProjectMirror.
func (mr *MockProjectMirrorServiceInterfaceMockRecorder) GetProjectMirror(pid, mirror any, options ...any) *MockProjectMirrorServiceInterfaceGetProjectMirrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mirror}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMirror", reflect.TypeOf((*MockProjectMirrorServiceInterface)(nil).GetProjectMirror), varargs...)
	return &MockProjectMirrorServiceInterfaceGetProjectMirrorCall{Call: call}
}

// MockProjectMirrorServiceInterfaceGetProjectMirrorCall wrap *gomock.Call
type MockProjectMirrorServiceInterfaceGetProjectMirrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectMirrorServiceInterfaceGetProjectMirrorCall) Return(arg0 *gitlab.ProjectMirror, arg1 *gitlab.Response, arg2 error) *MockProjectMirrorServiceInterfaceGetProjectMirrorCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectMirrorServiceInterfaceGetProjectMirrorCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceGetProjectMirrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectMirrorServiceInterfaceGetProjectMirrorCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirror, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceGetProjectMirrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectMirrorPublicKey mocks base method.
func (m *MockProjectMirrorServiceInterface) GetProjectMirrorPublicKey(pid any, mirror int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirrorPublicKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mirror}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectMirrorPublicKey", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectMirrorPublicKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectMirrorPublicKey indicates an expected call of GetProjectMirrorPublicKey.
func (mr *MockProjectMirrorServiceInterfaceMockRecorder) GetProjectMirrorPublicKey(pid, mirror any, options ...any) *MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mirror}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMirrorPublicKey", reflect.TypeOf((*MockProjectMirrorServiceInterface)(nil).GetProjectMirrorPublicKey), varargs...)
	return &MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall{Call: call}
}

// MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall wrap *gomock.Call
type MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall) Return(arg0 *gitlab.ProjectMirrorPublicKey, arg1 *gitlab.Response, arg2 error) *MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirrorPublicKey, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectMirrorPublicKey, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceGetProjectMirrorPublicKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListProjectMirror mocks base method.
func (m *MockProjectMirrorServiceInterface) ListProjectMirror(pid any, opt *gitlab.ListProjectMirrorOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMirror, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectMirror", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectMirror)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectMirror indicates an expected call of ListProjectMirror.
func (mr *MockProjectMirrorServiceInterfaceMockRecorder) ListProjectMirror(pid, opt any, options ...any) *MockProjectMirrorServiceInterfaceListProjectMirrorCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectMirror", reflect.TypeOf((*MockProjectMirrorServiceInterface)(nil).ListProjectMirror), varargs...)
	return &MockProjectMirrorServiceInterfaceListProjectMirrorCall{Call: call}
}

// MockProjectMirrorServiceInterfaceListProjectMirrorCall wrap *gomock.Call
type MockProjectMirrorServiceInterfaceListProjectMirrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectMirrorServiceInterfaceListProjectMirrorCall) Return(arg0 []*gitlab.ProjectMirror, arg1 *gitlab.Response, arg2 error) *MockProjectMirrorServiceInterfaceListProjectMirrorCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectMirrorServiceInterfaceListProjectMirrorCall) Do(f func(any, *gitlab.ListProjectMirrorOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMirror, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceListProjectMirrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectMirrorServiceInterfaceListProjectMirrorCall) DoAndReturn(f func(any, *gitlab.ListProjectMirrorOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectMirror, *gitlab.Response, error)) *MockProjectMirrorServiceInterfaceListProjectMirrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
