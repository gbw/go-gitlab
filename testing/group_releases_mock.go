// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupReleasesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_releases_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupReleasesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupReleasesServiceInterface is a mock of GroupReleasesServiceInterface interface.
type MockGroupReleasesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupReleasesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupReleasesServiceInterfaceMockRecorder is the mock recorder for MockGroupReleasesServiceInterface.
type MockGroupReleasesServiceInterfaceMockRecorder struct {
	mock *MockGroupReleasesServiceInterface
}

// NewMockGroupReleasesServiceInterface creates a new mock instance.
func NewMockGroupReleasesServiceInterface(ctrl *gomock.Controller) *MockGroupReleasesServiceInterface {
	mock := &MockGroupReleasesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupReleasesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupReleasesServiceInterface) EXPECT() *MockGroupReleasesServiceInterfaceMockRecorder {
	return m.recorder
}

// ListGroupReleases mocks base method.
func (m *MockGroupReleasesServiceInterface) ListGroupReleases(gid any, opts *gitlab.ListGroupReleasesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupReleases", varargs...)
	ret0, _ := ret[0].([]*gitlab.Release)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupReleases indicates an expected call of ListGroupReleases.
func (mr *MockGroupReleasesServiceInterfaceMockRecorder) ListGroupReleases(gid, opts any, options ...any) *MockGroupReleasesServiceInterfaceListGroupReleasesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupReleases", reflect.TypeOf((*MockGroupReleasesServiceInterface)(nil).ListGroupReleases), varargs...)
	return &MockGroupReleasesServiceInterfaceListGroupReleasesCall{Call: call}
}

// MockGroupReleasesServiceInterfaceListGroupReleasesCall wrap *gomock.Call
type MockGroupReleasesServiceInterfaceListGroupReleasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupReleasesServiceInterfaceListGroupReleasesCall) Return(arg0 []*gitlab.Release, arg1 *gitlab.Response, arg2 error) *MockGroupReleasesServiceInterfaceListGroupReleasesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupReleasesServiceInterfaceListGroupReleasesCall) Do(f func(any, *gitlab.ListGroupReleasesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error)) *MockGroupReleasesServiceInterfaceListGroupReleasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupReleasesServiceInterfaceListGroupReleasesCall) DoAndReturn(f func(any, *gitlab.ListGroupReleasesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error)) *MockGroupReleasesServiceInterfaceListGroupReleasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
