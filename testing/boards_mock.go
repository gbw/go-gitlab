// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: IssueBoardsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=boards_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go IssueBoardsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockIssueBoardsServiceInterface is a mock of IssueBoardsServiceInterface interface.
type MockIssueBoardsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIssueBoardsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockIssueBoardsServiceInterfaceMockRecorder is the mock recorder for MockIssueBoardsServiceInterface.
type MockIssueBoardsServiceInterfaceMockRecorder struct {
	mock *MockIssueBoardsServiceInterface
}

// NewMockIssueBoardsServiceInterface creates a new mock instance.
func NewMockIssueBoardsServiceInterface(ctrl *gomock.Controller) *MockIssueBoardsServiceInterface {
	mock := &MockIssueBoardsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockIssueBoardsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueBoardsServiceInterface) EXPECT() *MockIssueBoardsServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateIssueBoard mocks base method.
func (m *MockIssueBoardsServiceInterface) CreateIssueBoard(pid any, opt *gitlab.CreateIssueBoardOptions, options ...gitlab.RequestOptionFunc) (*gitlab.IssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.IssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueBoard indicates an expected call of CreateIssueBoard.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) CreateIssueBoard(pid, opt any, options ...any) *MockIssueBoardsServiceInterfaceCreateIssueBoardCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueBoard", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).CreateIssueBoard), varargs...)
	return &MockIssueBoardsServiceInterfaceCreateIssueBoardCall{Call: call}
}

// MockIssueBoardsServiceInterfaceCreateIssueBoardCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceCreateIssueBoardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceCreateIssueBoardCall) Return(arg0 *gitlab.IssueBoard, arg1 *gitlab.Response, arg2 error) *MockIssueBoardsServiceInterfaceCreateIssueBoardCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceCreateIssueBoardCall) Do(f func(any, *gitlab.CreateIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssueBoard, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceCreateIssueBoardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceCreateIssueBoardCall) DoAndReturn(f func(any, *gitlab.CreateIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssueBoard, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceCreateIssueBoardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateIssueBoardList mocks base method.
func (m *MockIssueBoardsServiceInterface) CreateIssueBoardList(pid any, board int, opt *gitlab.CreateIssueBoardListOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, board, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueBoardList indicates an expected call of CreateIssueBoardList.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) CreateIssueBoardList(pid, board, opt any, options ...any) *MockIssueBoardsServiceInterfaceCreateIssueBoardListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, board, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueBoardList", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).CreateIssueBoardList), varargs...)
	return &MockIssueBoardsServiceInterfaceCreateIssueBoardListCall{Call: call}
}

// MockIssueBoardsServiceInterfaceCreateIssueBoardListCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceCreateIssueBoardListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceCreateIssueBoardListCall) Return(arg0 *gitlab.BoardList, arg1 *gitlab.Response, arg2 error) *MockIssueBoardsServiceInterfaceCreateIssueBoardListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceCreateIssueBoardListCall) Do(f func(any, int, *gitlab.CreateIssueBoardListOptions, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceCreateIssueBoardListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceCreateIssueBoardListCall) DoAndReturn(f func(any, int, *gitlab.CreateIssueBoardListOptions, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceCreateIssueBoardListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteIssueBoard mocks base method.
func (m *MockIssueBoardsServiceInterface) DeleteIssueBoard(pid any, board int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, board}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueBoard indicates an expected call of DeleteIssueBoard.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) DeleteIssueBoard(pid, board any, options ...any) *MockIssueBoardsServiceInterfaceDeleteIssueBoardCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, board}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueBoard", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).DeleteIssueBoard), varargs...)
	return &MockIssueBoardsServiceInterfaceDeleteIssueBoardCall{Call: call}
}

// MockIssueBoardsServiceInterfaceDeleteIssueBoardCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceDeleteIssueBoardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceDeleteIssueBoardCall) Return(arg0 *gitlab.Response, arg1 error) *MockIssueBoardsServiceInterfaceDeleteIssueBoardCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceDeleteIssueBoardCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockIssueBoardsServiceInterfaceDeleteIssueBoardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceDeleteIssueBoardCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockIssueBoardsServiceInterfaceDeleteIssueBoardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteIssueBoardList mocks base method.
func (m *MockIssueBoardsServiceInterface) DeleteIssueBoardList(pid any, board, list int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, board, list}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueBoardList indicates an expected call of DeleteIssueBoardList.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) DeleteIssueBoardList(pid, board, list any, options ...any) *MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, board, list}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueBoardList", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).DeleteIssueBoardList), varargs...)
	return &MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall{Call: call}
}

// MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall) Return(arg0 *gitlab.Response, arg1 error) *MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockIssueBoardsServiceInterfaceDeleteIssueBoardListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIssueBoard mocks base method.
func (m *MockIssueBoardsServiceInterface) GetIssueBoard(pid any, board int, options ...gitlab.RequestOptionFunc) (*gitlab.IssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, board}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.IssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueBoard indicates an expected call of GetIssueBoard.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) GetIssueBoard(pid, board any, options ...any) *MockIssueBoardsServiceInterfaceGetIssueBoardCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, board}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueBoard", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).GetIssueBoard), varargs...)
	return &MockIssueBoardsServiceInterfaceGetIssueBoardCall{Call: call}
}

// MockIssueBoardsServiceInterfaceGetIssueBoardCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceGetIssueBoardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceGetIssueBoardCall) Return(arg0 *gitlab.IssueBoard, arg1 *gitlab.Response, arg2 error) *MockIssueBoardsServiceInterfaceGetIssueBoardCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceGetIssueBoardCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueBoard, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceGetIssueBoardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceGetIssueBoardCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueBoard, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceGetIssueBoardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIssueBoardList mocks base method.
func (m *MockIssueBoardsServiceInterface) GetIssueBoardList(pid any, board, list int, options ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, board, list}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueBoardList indicates an expected call of GetIssueBoardList.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) GetIssueBoardList(pid, board, list any, options ...any) *MockIssueBoardsServiceInterfaceGetIssueBoardListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, board, list}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueBoardList", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).GetIssueBoardList), varargs...)
	return &MockIssueBoardsServiceInterfaceGetIssueBoardListCall{Call: call}
}

// MockIssueBoardsServiceInterfaceGetIssueBoardListCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceGetIssueBoardListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceGetIssueBoardListCall) Return(arg0 *gitlab.BoardList, arg1 *gitlab.Response, arg2 error) *MockIssueBoardsServiceInterfaceGetIssueBoardListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceGetIssueBoardListCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceGetIssueBoardListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceGetIssueBoardListCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceGetIssueBoardListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIssueBoardLists mocks base method.
func (m *MockIssueBoardsServiceInterface) GetIssueBoardLists(pid any, board int, opt *gitlab.GetIssueBoardListsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, board, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueBoardLists", varargs...)
	ret0, _ := ret[0].([]*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueBoardLists indicates an expected call of GetIssueBoardLists.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) GetIssueBoardLists(pid, board, opt any, options ...any) *MockIssueBoardsServiceInterfaceGetIssueBoardListsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, board, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueBoardLists", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).GetIssueBoardLists), varargs...)
	return &MockIssueBoardsServiceInterfaceGetIssueBoardListsCall{Call: call}
}

// MockIssueBoardsServiceInterfaceGetIssueBoardListsCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceGetIssueBoardListsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceGetIssueBoardListsCall) Return(arg0 []*gitlab.BoardList, arg1 *gitlab.Response, arg2 error) *MockIssueBoardsServiceInterfaceGetIssueBoardListsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceGetIssueBoardListsCall) Do(f func(any, int, *gitlab.GetIssueBoardListsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceGetIssueBoardListsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceGetIssueBoardListsCall) DoAndReturn(f func(any, int, *gitlab.GetIssueBoardListsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceGetIssueBoardListsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListIssueBoards mocks base method.
func (m *MockIssueBoardsServiceInterface) ListIssueBoards(pid any, opt *gitlab.ListIssueBoardsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.IssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssueBoards", varargs...)
	ret0, _ := ret[0].([]*gitlab.IssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueBoards indicates an expected call of ListIssueBoards.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) ListIssueBoards(pid, opt any, options ...any) *MockIssueBoardsServiceInterfaceListIssueBoardsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueBoards", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).ListIssueBoards), varargs...)
	return &MockIssueBoardsServiceInterfaceListIssueBoardsCall{Call: call}
}

// MockIssueBoardsServiceInterfaceListIssueBoardsCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceListIssueBoardsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceListIssueBoardsCall) Return(arg0 []*gitlab.IssueBoard, arg1 *gitlab.Response, arg2 error) *MockIssueBoardsServiceInterfaceListIssueBoardsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceListIssueBoardsCall) Do(f func(any, *gitlab.ListIssueBoardsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.IssueBoard, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceListIssueBoardsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceListIssueBoardsCall) DoAndReturn(f func(any, *gitlab.ListIssueBoardsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.IssueBoard, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceListIssueBoardsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateIssueBoard mocks base method.
func (m *MockIssueBoardsServiceInterface) UpdateIssueBoard(pid any, board int, opt *gitlab.UpdateIssueBoardOptions, options ...gitlab.RequestOptionFunc) (*gitlab.IssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, board, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.IssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIssueBoard indicates an expected call of UpdateIssueBoard.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) UpdateIssueBoard(pid, board, opt any, options ...any) *MockIssueBoardsServiceInterfaceUpdateIssueBoardCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, board, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueBoard", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).UpdateIssueBoard), varargs...)
	return &MockIssueBoardsServiceInterfaceUpdateIssueBoardCall{Call: call}
}

// MockIssueBoardsServiceInterfaceUpdateIssueBoardCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceUpdateIssueBoardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceUpdateIssueBoardCall) Return(arg0 *gitlab.IssueBoard, arg1 *gitlab.Response, arg2 error) *MockIssueBoardsServiceInterfaceUpdateIssueBoardCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceUpdateIssueBoardCall) Do(f func(any, int, *gitlab.UpdateIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssueBoard, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceUpdateIssueBoardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceUpdateIssueBoardCall) DoAndReturn(f func(any, int, *gitlab.UpdateIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssueBoard, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceUpdateIssueBoardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateIssueBoardList mocks base method.
func (m *MockIssueBoardsServiceInterface) UpdateIssueBoardList(pid any, board, list int, opt *gitlab.UpdateIssueBoardListOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, board, list, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIssueBoardList indicates an expected call of UpdateIssueBoardList.
func (mr *MockIssueBoardsServiceInterfaceMockRecorder) UpdateIssueBoardList(pid, board, list, opt any, options ...any) *MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, board, list, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueBoardList", reflect.TypeOf((*MockIssueBoardsServiceInterface)(nil).UpdateIssueBoardList), varargs...)
	return &MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall{Call: call}
}

// MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall wrap *gomock.Call
type MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall) Return(arg0 *gitlab.BoardList, arg1 *gitlab.Response, arg2 error) *MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall) Do(f func(any, int, int, *gitlab.UpdateIssueBoardListOptions, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall) DoAndReturn(f func(any, int, int, *gitlab.UpdateIssueBoardListOptions, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockIssueBoardsServiceInterfaceUpdateIssueBoardListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
