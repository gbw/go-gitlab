// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GenericPackagesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=generic_packages_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GenericPackagesServiceInterface
//

package testing

import (
	io "io"
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGenericPackagesServiceInterface is a mock of GenericPackagesServiceInterface interface.
type MockGenericPackagesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGenericPackagesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGenericPackagesServiceInterfaceMockRecorder is the mock recorder for MockGenericPackagesServiceInterface.
type MockGenericPackagesServiceInterfaceMockRecorder struct {
	mock *MockGenericPackagesServiceInterface
}

// NewMockGenericPackagesServiceInterface creates a new mock instance.
func NewMockGenericPackagesServiceInterface(ctrl *gomock.Controller) *MockGenericPackagesServiceInterface {
	mock := &MockGenericPackagesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGenericPackagesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGenericPackagesServiceInterface) EXPECT() *MockGenericPackagesServiceInterfaceMockRecorder {
	return m.recorder
}

// DownloadPackageFile mocks base method.
func (m *MockGenericPackagesServiceInterface) DownloadPackageFile(pid any, packageName, packageVersion, fileName string, options ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, packageName, packageVersion, fileName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadPackageFile", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadPackageFile indicates an expected call of DownloadPackageFile.
func (mr *MockGenericPackagesServiceInterfaceMockRecorder) DownloadPackageFile(pid, packageName, packageVersion, fileName any, options ...any) *MockGenericPackagesServiceInterfaceDownloadPackageFileCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, packageName, packageVersion, fileName}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPackageFile", reflect.TypeOf((*MockGenericPackagesServiceInterface)(nil).DownloadPackageFile), varargs...)
	return &MockGenericPackagesServiceInterfaceDownloadPackageFileCall{Call: call}
}

// MockGenericPackagesServiceInterfaceDownloadPackageFileCall wrap *gomock.Call
type MockGenericPackagesServiceInterfaceDownloadPackageFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGenericPackagesServiceInterfaceDownloadPackageFileCall) Return(arg0 []byte, arg1 *gitlab.Response, arg2 error) *MockGenericPackagesServiceInterfaceDownloadPackageFileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGenericPackagesServiceInterfaceDownloadPackageFileCall) Do(f func(any, string, string, string, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)) *MockGenericPackagesServiceInterfaceDownloadPackageFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGenericPackagesServiceInterfaceDownloadPackageFileCall) DoAndReturn(f func(any, string, string, string, ...gitlab.RequestOptionFunc) ([]byte, *gitlab.Response, error)) *MockGenericPackagesServiceInterfaceDownloadPackageFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FormatPackageURL mocks base method.
func (m *MockGenericPackagesServiceInterface) FormatPackageURL(pid any, packageName, packageVersion, fileName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPackageURL", pid, packageName, packageVersion, fileName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPackageURL indicates an expected call of FormatPackageURL.
func (mr *MockGenericPackagesServiceInterfaceMockRecorder) FormatPackageURL(pid, packageName, packageVersion, fileName any) *MockGenericPackagesServiceInterfaceFormatPackageURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPackageURL", reflect.TypeOf((*MockGenericPackagesServiceInterface)(nil).FormatPackageURL), pid, packageName, packageVersion, fileName)
	return &MockGenericPackagesServiceInterfaceFormatPackageURLCall{Call: call}
}

// MockGenericPackagesServiceInterfaceFormatPackageURLCall wrap *gomock.Call
type MockGenericPackagesServiceInterfaceFormatPackageURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGenericPackagesServiceInterfaceFormatPackageURLCall) Return(arg0 string, arg1 error) *MockGenericPackagesServiceInterfaceFormatPackageURLCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGenericPackagesServiceInterfaceFormatPackageURLCall) Do(f func(any, string, string, string) (string, error)) *MockGenericPackagesServiceInterfaceFormatPackageURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGenericPackagesServiceInterfaceFormatPackageURLCall) DoAndReturn(f func(any, string, string, string) (string, error)) *MockGenericPackagesServiceInterfaceFormatPackageURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublishPackageFile mocks base method.
func (m *MockGenericPackagesServiceInterface) PublishPackageFile(pid any, packageName, packageVersion, fileName string, content io.Reader, opt *gitlab.PublishPackageFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GenericPackagesFile, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, packageName, packageVersion, fileName, content, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishPackageFile", varargs...)
	ret0, _ := ret[0].(*gitlab.GenericPackagesFile)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PublishPackageFile indicates an expected call of PublishPackageFile.
func (mr *MockGenericPackagesServiceInterfaceMockRecorder) PublishPackageFile(pid, packageName, packageVersion, fileName, content, opt any, options ...any) *MockGenericPackagesServiceInterfacePublishPackageFileCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, packageName, packageVersion, fileName, content, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPackageFile", reflect.TypeOf((*MockGenericPackagesServiceInterface)(nil).PublishPackageFile), varargs...)
	return &MockGenericPackagesServiceInterfacePublishPackageFileCall{Call: call}
}

// MockGenericPackagesServiceInterfacePublishPackageFileCall wrap *gomock.Call
type MockGenericPackagesServiceInterfacePublishPackageFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGenericPackagesServiceInterfacePublishPackageFileCall) Return(arg0 *gitlab.GenericPackagesFile, arg1 *gitlab.Response, arg2 error) *MockGenericPackagesServiceInterfacePublishPackageFileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGenericPackagesServiceInterfacePublishPackageFileCall) Do(f func(any, string, string, string, io.Reader, *gitlab.PublishPackageFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.GenericPackagesFile, *gitlab.Response, error)) *MockGenericPackagesServiceInterfacePublishPackageFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGenericPackagesServiceInterfacePublishPackageFileCall) DoAndReturn(f func(any, string, string, string, io.Reader, *gitlab.PublishPackageFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.GenericPackagesFile, *gitlab.Response, error)) *MockGenericPackagesServiceInterfacePublishPackageFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
