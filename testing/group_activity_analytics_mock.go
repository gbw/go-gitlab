// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupActivityAnalyticsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_activity_analytics_mock.go -package=testing gitlab.com/gitlab-org/api/client-go GroupActivityAnalyticsServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupActivityAnalyticsServiceInterface is a mock of GroupActivityAnalyticsServiceInterface interface.
type MockGroupActivityAnalyticsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupActivityAnalyticsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupActivityAnalyticsServiceInterfaceMockRecorder is the mock recorder for MockGroupActivityAnalyticsServiceInterface.
type MockGroupActivityAnalyticsServiceInterfaceMockRecorder struct {
	mock *MockGroupActivityAnalyticsServiceInterface
}

// NewMockGroupActivityAnalyticsServiceInterface creates a new mock instance.
func NewMockGroupActivityAnalyticsServiceInterface(ctrl *gomock.Controller) *MockGroupActivityAnalyticsServiceInterface {
	mock := &MockGroupActivityAnalyticsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupActivityAnalyticsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupActivityAnalyticsServiceInterface) EXPECT() *MockGroupActivityAnalyticsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetRecentlyAddedMembersCount mocks base method.
func (m *MockGroupActivityAnalyticsServiceInterface) GetRecentlyAddedMembersCount(opt *gitlab.GetRecentlyAddedMembersCountOptions, options ...gitlab.RequestOptionFunc) (*gitlab.NewMembersCount, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecentlyAddedMembersCount", varargs...)
	ret0, _ := ret[0].(*gitlab.NewMembersCount)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecentlyAddedMembersCount indicates an expected call of GetRecentlyAddedMembersCount.
func (mr *MockGroupActivityAnalyticsServiceInterfaceMockRecorder) GetRecentlyAddedMembersCount(opt any, options ...any) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentlyAddedMembersCount", reflect.TypeOf((*MockGroupActivityAnalyticsServiceInterface)(nil).GetRecentlyAddedMembersCount), varargs...)
	return &MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall{Call: call}
}

// MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall wrap *gomock.Call
type MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall) Return(arg0 *gitlab.NewMembersCount, arg1 *gitlab.Response, arg2 error) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall) Do(f func(*gitlab.GetRecentlyAddedMembersCountOptions, ...gitlab.RequestOptionFunc) (*gitlab.NewMembersCount, *gitlab.Response, error)) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall) DoAndReturn(f func(*gitlab.GetRecentlyAddedMembersCountOptions, ...gitlab.RequestOptionFunc) (*gitlab.NewMembersCount, *gitlab.Response, error)) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyAddedMembersCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRecentlyCreatedIssuesCount mocks base method.
func (m *MockGroupActivityAnalyticsServiceInterface) GetRecentlyCreatedIssuesCount(opt *gitlab.GetRecentlyCreatedIssuesCountOptions, options ...gitlab.RequestOptionFunc) (*gitlab.IssuesCount, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecentlyCreatedIssuesCount", varargs...)
	ret0, _ := ret[0].(*gitlab.IssuesCount)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecentlyCreatedIssuesCount indicates an expected call of GetRecentlyCreatedIssuesCount.
func (mr *MockGroupActivityAnalyticsServiceInterfaceMockRecorder) GetRecentlyCreatedIssuesCount(opt any, options ...any) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentlyCreatedIssuesCount", reflect.TypeOf((*MockGroupActivityAnalyticsServiceInterface)(nil).GetRecentlyCreatedIssuesCount), varargs...)
	return &MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall{Call: call}
}

// MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall wrap *gomock.Call
type MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall) Return(arg0 *gitlab.IssuesCount, arg1 *gitlab.Response, arg2 error) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall) Do(f func(*gitlab.GetRecentlyCreatedIssuesCountOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssuesCount, *gitlab.Response, error)) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall) DoAndReturn(f func(*gitlab.GetRecentlyCreatedIssuesCountOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssuesCount, *gitlab.Response, error)) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedIssuesCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRecentlyCreatedMergeRequestsCount mocks base method.
func (m *MockGroupActivityAnalyticsServiceInterface) GetRecentlyCreatedMergeRequestsCount(opt *gitlab.GetRecentlyCreatedMergeRequestsCountOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestsCount, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecentlyCreatedMergeRequestsCount", varargs...)
	ret0, _ := ret[0].(*gitlab.MergeRequestsCount)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRecentlyCreatedMergeRequestsCount indicates an expected call of GetRecentlyCreatedMergeRequestsCount.
func (mr *MockGroupActivityAnalyticsServiceInterfaceMockRecorder) GetRecentlyCreatedMergeRequestsCount(opt any, options ...any) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecentlyCreatedMergeRequestsCount", reflect.TypeOf((*MockGroupActivityAnalyticsServiceInterface)(nil).GetRecentlyCreatedMergeRequestsCount), varargs...)
	return &MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall{Call: call}
}

// MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall wrap *gomock.Call
type MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall) Return(arg0 *gitlab.MergeRequestsCount, arg1 *gitlab.Response, arg2 error) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall) Do(f func(*gitlab.GetRecentlyCreatedMergeRequestsCountOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestsCount, *gitlab.Response, error)) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall) DoAndReturn(f func(*gitlab.GetRecentlyCreatedMergeRequestsCountOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestsCount, *gitlab.Response, error)) *MockGroupActivityAnalyticsServiceInterfaceGetRecentlyCreatedMergeRequestsCountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
