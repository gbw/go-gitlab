// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ApplicationsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=applications_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ApplicationsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationsServiceInterface is a mock of ApplicationsServiceInterface interface.
type MockApplicationsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockApplicationsServiceInterfaceMockRecorder is the mock recorder for MockApplicationsServiceInterface.
type MockApplicationsServiceInterfaceMockRecorder struct {
	mock *MockApplicationsServiceInterface
}

// NewMockApplicationsServiceInterface creates a new mock instance.
func NewMockApplicationsServiceInterface(ctrl *gomock.Controller) *MockApplicationsServiceInterface {
	mock := &MockApplicationsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockApplicationsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationsServiceInterface) EXPECT() *MockApplicationsServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockApplicationsServiceInterface) CreateApplication(opt *gitlab.CreateApplicationOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Application, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplication", varargs...)
	ret0, _ := ret[0].(*gitlab.Application)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockApplicationsServiceInterfaceMockRecorder) CreateApplication(opt any, options ...any) *MockApplicationsServiceInterfaceCreateApplicationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockApplicationsServiceInterface)(nil).CreateApplication), varargs...)
	return &MockApplicationsServiceInterfaceCreateApplicationCall{Call: call}
}

// MockApplicationsServiceInterfaceCreateApplicationCall wrap *gomock.Call
type MockApplicationsServiceInterfaceCreateApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsServiceInterfaceCreateApplicationCall) Return(arg0 *gitlab.Application, arg1 *gitlab.Response, arg2 error) *MockApplicationsServiceInterfaceCreateApplicationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsServiceInterfaceCreateApplicationCall) Do(f func(*gitlab.CreateApplicationOptions, ...gitlab.RequestOptionFunc) (*gitlab.Application, *gitlab.Response, error)) *MockApplicationsServiceInterfaceCreateApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsServiceInterfaceCreateApplicationCall) DoAndReturn(f func(*gitlab.CreateApplicationOptions, ...gitlab.RequestOptionFunc) (*gitlab.Application, *gitlab.Response, error)) *MockApplicationsServiceInterfaceCreateApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteApplication mocks base method.
func (m *MockApplicationsServiceInterface) DeleteApplication(application int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{application}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplication", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockApplicationsServiceInterfaceMockRecorder) DeleteApplication(application any, options ...any) *MockApplicationsServiceInterfaceDeleteApplicationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{application}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockApplicationsServiceInterface)(nil).DeleteApplication), varargs...)
	return &MockApplicationsServiceInterfaceDeleteApplicationCall{Call: call}
}

// MockApplicationsServiceInterfaceDeleteApplicationCall wrap *gomock.Call
type MockApplicationsServiceInterfaceDeleteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsServiceInterfaceDeleteApplicationCall) Return(arg0 *gitlab.Response, arg1 error) *MockApplicationsServiceInterfaceDeleteApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsServiceInterfaceDeleteApplicationCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockApplicationsServiceInterfaceDeleteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsServiceInterfaceDeleteApplicationCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockApplicationsServiceInterfaceDeleteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListApplications mocks base method.
func (m *MockApplicationsServiceInterface) ListApplications(opt *gitlab.ListApplicationsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Application, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListApplications", varargs...)
	ret0, _ := ret[0].([]*gitlab.Application)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApplications indicates an expected call of ListApplications.
func (mr *MockApplicationsServiceInterfaceMockRecorder) ListApplications(opt any, options ...any) *MockApplicationsServiceInterfaceListApplicationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApplications", reflect.TypeOf((*MockApplicationsServiceInterface)(nil).ListApplications), varargs...)
	return &MockApplicationsServiceInterfaceListApplicationsCall{Call: call}
}

// MockApplicationsServiceInterfaceListApplicationsCall wrap *gomock.Call
type MockApplicationsServiceInterfaceListApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationsServiceInterfaceListApplicationsCall) Return(arg0 []*gitlab.Application, arg1 *gitlab.Response, arg2 error) *MockApplicationsServiceInterfaceListApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationsServiceInterfaceListApplicationsCall) Do(f func(*gitlab.ListApplicationsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Application, *gitlab.Response, error)) *MockApplicationsServiceInterfaceListApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationsServiceInterfaceListApplicationsCall) DoAndReturn(f func(*gitlab.ListApplicationsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Application, *gitlab.Response, error)) *MockApplicationsServiceInterfaceListApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
