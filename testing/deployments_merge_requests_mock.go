// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: DeploymentMergeRequestsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=deployments_merge_requests_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go DeploymentMergeRequestsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDeploymentMergeRequestsServiceInterface is a mock of DeploymentMergeRequestsServiceInterface interface.
type MockDeploymentMergeRequestsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeploymentMergeRequestsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockDeploymentMergeRequestsServiceInterfaceMockRecorder is the mock recorder for MockDeploymentMergeRequestsServiceInterface.
type MockDeploymentMergeRequestsServiceInterfaceMockRecorder struct {
	mock *MockDeploymentMergeRequestsServiceInterface
}

// NewMockDeploymentMergeRequestsServiceInterface creates a new mock instance.
func NewMockDeploymentMergeRequestsServiceInterface(ctrl *gomock.Controller) *MockDeploymentMergeRequestsServiceInterface {
	mock := &MockDeploymentMergeRequestsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDeploymentMergeRequestsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeploymentMergeRequestsServiceInterface) EXPECT() *MockDeploymentMergeRequestsServiceInterfaceMockRecorder {
	return m.recorder
}

// ListDeploymentMergeRequests mocks base method.
func (m *MockDeploymentMergeRequestsServiceInterface) ListDeploymentMergeRequests(pid any, deployment int, opts *gitlab.ListMergeRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, deployment, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDeploymentMergeRequests", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDeploymentMergeRequests indicates an expected call of ListDeploymentMergeRequests.
func (mr *MockDeploymentMergeRequestsServiceInterfaceMockRecorder) ListDeploymentMergeRequests(pid, deployment, opts any, options ...any) *MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, deployment, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentMergeRequests", reflect.TypeOf((*MockDeploymentMergeRequestsServiceInterface)(nil).ListDeploymentMergeRequests), varargs...)
	return &MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall{Call: call}
}

// MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall wrap *gomock.Call
type MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall) Return(arg0 []*gitlab.MergeRequest, arg1 *gitlab.Response, arg2 error) *MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall) Do(f func(any, int, *gitlab.ListMergeRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequest, *gitlab.Response, error)) *MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall) DoAndReturn(f func(any, int, *gitlab.ListMergeRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeRequest, *gitlab.Response, error)) *MockDeploymentMergeRequestsServiceInterfaceListDeploymentMergeRequestsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
