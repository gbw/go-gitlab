// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: SettingsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=settings_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go SettingsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockSettingsServiceInterface is a mock of SettingsServiceInterface interface.
type MockSettingsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockSettingsServiceInterfaceMockRecorder is the mock recorder for MockSettingsServiceInterface.
type MockSettingsServiceInterfaceMockRecorder struct {
	mock *MockSettingsServiceInterface
}

// NewMockSettingsServiceInterface creates a new mock instance.
func NewMockSettingsServiceInterface(ctrl *gomock.Controller) *MockSettingsServiceInterface {
	mock := &MockSettingsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSettingsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsServiceInterface) EXPECT() *MockSettingsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetSettings mocks base method.
func (m *MockSettingsServiceInterface) GetSettings(options ...gitlab.RequestOptionFunc) (*gitlab.Settings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.Settings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSettings indicates an expected call of GetSettings.
func (mr *MockSettingsServiceInterfaceMockRecorder) GetSettings(options ...any) *MockSettingsServiceInterfaceGetSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettings", reflect.TypeOf((*MockSettingsServiceInterface)(nil).GetSettings), options...)
	return &MockSettingsServiceInterfaceGetSettingsCall{Call: call}
}

// MockSettingsServiceInterfaceGetSettingsCall wrap *gomock.Call
type MockSettingsServiceInterfaceGetSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSettingsServiceInterfaceGetSettingsCall) Return(arg0 *gitlab.Settings, arg1 *gitlab.Response, arg2 error) *MockSettingsServiceInterfaceGetSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSettingsServiceInterfaceGetSettingsCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.Settings, *gitlab.Response, error)) *MockSettingsServiceInterfaceGetSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSettingsServiceInterfaceGetSettingsCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.Settings, *gitlab.Response, error)) *MockSettingsServiceInterfaceGetSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSettings mocks base method.
func (m *MockSettingsServiceInterface) UpdateSettings(opt *gitlab.UpdateSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Settings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.Settings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSettings indicates an expected call of UpdateSettings.
func (mr *MockSettingsServiceInterfaceMockRecorder) UpdateSettings(opt any, options ...any) *MockSettingsServiceInterfaceUpdateSettingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettings", reflect.TypeOf((*MockSettingsServiceInterface)(nil).UpdateSettings), varargs...)
	return &MockSettingsServiceInterfaceUpdateSettingsCall{Call: call}
}

// MockSettingsServiceInterfaceUpdateSettingsCall wrap *gomock.Call
type MockSettingsServiceInterfaceUpdateSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSettingsServiceInterfaceUpdateSettingsCall) Return(arg0 *gitlab.Settings, arg1 *gitlab.Response, arg2 error) *MockSettingsServiceInterfaceUpdateSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSettingsServiceInterfaceUpdateSettingsCall) Do(f func(*gitlab.UpdateSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Settings, *gitlab.Response, error)) *MockSettingsServiceInterfaceUpdateSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSettingsServiceInterfaceUpdateSettingsCall) DoAndReturn(f func(*gitlab.UpdateSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Settings, *gitlab.Response, error)) *MockSettingsServiceInterfaceUpdateSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
