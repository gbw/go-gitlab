// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: MergeTrainsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=merge_trains_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go MergeTrainsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockMergeTrainsServiceInterface is a mock of MergeTrainsServiceInterface interface.
type MockMergeTrainsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMergeTrainsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockMergeTrainsServiceInterfaceMockRecorder is the mock recorder for MockMergeTrainsServiceInterface.
type MockMergeTrainsServiceInterfaceMockRecorder struct {
	mock *MockMergeTrainsServiceInterface
}

// NewMockMergeTrainsServiceInterface creates a new mock instance.
func NewMockMergeTrainsServiceInterface(ctrl *gomock.Controller) *MockMergeTrainsServiceInterface {
	mock := &MockMergeTrainsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMergeTrainsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMergeTrainsServiceInterface) EXPECT() *MockMergeTrainsServiceInterfaceMockRecorder {
	return m.recorder
}

// AddMergeRequestToMergeTrain mocks base method.
func (m *MockMergeTrainsServiceInterface) AddMergeRequestToMergeTrain(pid any, mergeRequest int, opts *gitlab.AddMergeRequestToMergeTrainOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddMergeRequestToMergeTrain", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeTrain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddMergeRequestToMergeTrain indicates an expected call of AddMergeRequestToMergeTrain.
func (mr *MockMergeTrainsServiceInterfaceMockRecorder) AddMergeRequestToMergeTrain(pid, mergeRequest, opts any, options ...any) *MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMergeRequestToMergeTrain", reflect.TypeOf((*MockMergeTrainsServiceInterface)(nil).AddMergeRequestToMergeTrain), varargs...)
	return &MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall{Call: call}
}

// MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall wrap *gomock.Call
type MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall) Return(arg0 []*gitlab.MergeTrain, arg1 *gitlab.Response, arg2 error) *MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall) Do(f func(any, int, *gitlab.AddMergeRequestToMergeTrainOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)) *MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall) DoAndReturn(f func(any, int, *gitlab.AddMergeRequestToMergeTrainOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)) *MockMergeTrainsServiceInterfaceAddMergeRequestToMergeTrainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMergeRequestOnAMergeTrain mocks base method.
func (m *MockMergeTrainsServiceInterface) GetMergeRequestOnAMergeTrain(pid any, mergeRequest int, options ...gitlab.RequestOptionFunc) (*gitlab.MergeTrain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMergeRequestOnAMergeTrain", varargs...)
	ret0, _ := ret[0].(*gitlab.MergeTrain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMergeRequestOnAMergeTrain indicates an expected call of GetMergeRequestOnAMergeTrain.
func (mr *MockMergeTrainsServiceInterfaceMockRecorder) GetMergeRequestOnAMergeTrain(pid, mergeRequest any, options ...any) *MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMergeRequestOnAMergeTrain", reflect.TypeOf((*MockMergeTrainsServiceInterface)(nil).GetMergeRequestOnAMergeTrain), varargs...)
	return &MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall{Call: call}
}

// MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall wrap *gomock.Call
type MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall) Return(arg0 *gitlab.MergeTrain, arg1 *gitlab.Response, arg2 error) *MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.MergeTrain, *gitlab.Response, error)) *MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.MergeTrain, *gitlab.Response, error)) *MockMergeTrainsServiceInterfaceGetMergeRequestOnAMergeTrainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMergeRequestInMergeTrain mocks base method.
func (m *MockMergeTrainsServiceInterface) ListMergeRequestInMergeTrain(pid any, targetBranch string, opts *gitlab.ListMergeTrainsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, targetBranch, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestInMergeTrain", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeTrain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeRequestInMergeTrain indicates an expected call of ListMergeRequestInMergeTrain.
func (mr *MockMergeTrainsServiceInterfaceMockRecorder) ListMergeRequestInMergeTrain(pid, targetBranch, opts any, options ...any) *MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, targetBranch, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestInMergeTrain", reflect.TypeOf((*MockMergeTrainsServiceInterface)(nil).ListMergeRequestInMergeTrain), varargs...)
	return &MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall{Call: call}
}

// MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall wrap *gomock.Call
type MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall) Return(arg0 []*gitlab.MergeTrain, arg1 *gitlab.Response, arg2 error) *MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall) Do(f func(any, string, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)) *MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall) DoAndReturn(f func(any, string, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)) *MockMergeTrainsServiceInterfaceListMergeRequestInMergeTrainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListProjectMergeTrains mocks base method.
func (m *MockMergeTrainsServiceInterface) ListProjectMergeTrains(pid any, opt *gitlab.ListMergeTrainsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectMergeTrains", varargs...)
	ret0, _ := ret[0].([]*gitlab.MergeTrain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectMergeTrains indicates an expected call of ListProjectMergeTrains.
func (mr *MockMergeTrainsServiceInterfaceMockRecorder) ListProjectMergeTrains(pid, opt any, options ...any) *MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectMergeTrains", reflect.TypeOf((*MockMergeTrainsServiceInterface)(nil).ListProjectMergeTrains), varargs...)
	return &MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall{Call: call}
}

// MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall wrap *gomock.Call
type MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall) Return(arg0 []*gitlab.MergeTrain, arg1 *gitlab.Response, arg2 error) *MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall) Do(f func(any, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)) *MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall) DoAndReturn(f func(any, *gitlab.ListMergeTrainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.MergeTrain, *gitlab.Response, error)) *MockMergeTrainsServiceInterfaceListProjectMergeTrainsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
