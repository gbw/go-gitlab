// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: PagesDomainsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=pages_domains_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go PagesDomainsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockPagesDomainsServiceInterface is a mock of PagesDomainsServiceInterface interface.
type MockPagesDomainsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPagesDomainsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockPagesDomainsServiceInterfaceMockRecorder is the mock recorder for MockPagesDomainsServiceInterface.
type MockPagesDomainsServiceInterfaceMockRecorder struct {
	mock *MockPagesDomainsServiceInterface
}

// NewMockPagesDomainsServiceInterface creates a new mock instance.
func NewMockPagesDomainsServiceInterface(ctrl *gomock.Controller) *MockPagesDomainsServiceInterface {
	mock := &MockPagesDomainsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPagesDomainsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagesDomainsServiceInterface) EXPECT() *MockPagesDomainsServiceInterfaceMockRecorder {
	return m.recorder
}

// CreatePagesDomain mocks base method.
func (m *MockPagesDomainsServiceInterface) CreatePagesDomain(pid any, opt *gitlab.CreatePagesDomainOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreatePagesDomain", varargs...)
	ret0, _ := ret[0].(*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePagesDomain indicates an expected call of CreatePagesDomain.
func (mr *MockPagesDomainsServiceInterfaceMockRecorder) CreatePagesDomain(pid, opt any, options ...any) *MockPagesDomainsServiceInterfaceCreatePagesDomainCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePagesDomain", reflect.TypeOf((*MockPagesDomainsServiceInterface)(nil).CreatePagesDomain), varargs...)
	return &MockPagesDomainsServiceInterfaceCreatePagesDomainCall{Call: call}
}

// MockPagesDomainsServiceInterfaceCreatePagesDomainCall wrap *gomock.Call
type MockPagesDomainsServiceInterfaceCreatePagesDomainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPagesDomainsServiceInterfaceCreatePagesDomainCall) Return(arg0 *gitlab.PagesDomain, arg1 *gitlab.Response, arg2 error) *MockPagesDomainsServiceInterfaceCreatePagesDomainCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPagesDomainsServiceInterfaceCreatePagesDomainCall) Do(f func(any, *gitlab.CreatePagesDomainOptions, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceCreatePagesDomainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPagesDomainsServiceInterfaceCreatePagesDomainCall) DoAndReturn(f func(any, *gitlab.CreatePagesDomainOptions, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceCreatePagesDomainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePagesDomain mocks base method.
func (m *MockPagesDomainsServiceInterface) DeletePagesDomain(pid any, domain string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, domain}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeletePagesDomain", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePagesDomain indicates an expected call of DeletePagesDomain.
func (mr *MockPagesDomainsServiceInterfaceMockRecorder) DeletePagesDomain(pid, domain any, options ...any) *MockPagesDomainsServiceInterfaceDeletePagesDomainCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, domain}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePagesDomain", reflect.TypeOf((*MockPagesDomainsServiceInterface)(nil).DeletePagesDomain), varargs...)
	return &MockPagesDomainsServiceInterfaceDeletePagesDomainCall{Call: call}
}

// MockPagesDomainsServiceInterfaceDeletePagesDomainCall wrap *gomock.Call
type MockPagesDomainsServiceInterfaceDeletePagesDomainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPagesDomainsServiceInterfaceDeletePagesDomainCall) Return(arg0 *gitlab.Response, arg1 error) *MockPagesDomainsServiceInterfaceDeletePagesDomainCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPagesDomainsServiceInterfaceDeletePagesDomainCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockPagesDomainsServiceInterfaceDeletePagesDomainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPagesDomainsServiceInterfaceDeletePagesDomainCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockPagesDomainsServiceInterfaceDeletePagesDomainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPagesDomain mocks base method.
func (m *MockPagesDomainsServiceInterface) GetPagesDomain(pid any, domain string, options ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, domain}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPagesDomain", varargs...)
	ret0, _ := ret[0].(*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPagesDomain indicates an expected call of GetPagesDomain.
func (mr *MockPagesDomainsServiceInterfaceMockRecorder) GetPagesDomain(pid, domain any, options ...any) *MockPagesDomainsServiceInterfaceGetPagesDomainCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, domain}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPagesDomain", reflect.TypeOf((*MockPagesDomainsServiceInterface)(nil).GetPagesDomain), varargs...)
	return &MockPagesDomainsServiceInterfaceGetPagesDomainCall{Call: call}
}

// MockPagesDomainsServiceInterfaceGetPagesDomainCall wrap *gomock.Call
type MockPagesDomainsServiceInterfaceGetPagesDomainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPagesDomainsServiceInterfaceGetPagesDomainCall) Return(arg0 *gitlab.PagesDomain, arg1 *gitlab.Response, arg2 error) *MockPagesDomainsServiceInterfaceGetPagesDomainCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPagesDomainsServiceInterfaceGetPagesDomainCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceGetPagesDomainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPagesDomainsServiceInterfaceGetPagesDomainCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceGetPagesDomainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllPagesDomains mocks base method.
func (m *MockPagesDomainsServiceInterface) ListAllPagesDomains(options ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllPagesDomains", varargs...)
	ret0, _ := ret[0].([]*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllPagesDomains indicates an expected call of ListAllPagesDomains.
func (mr *MockPagesDomainsServiceInterfaceMockRecorder) ListAllPagesDomains(options ...any) *MockPagesDomainsServiceInterfaceListAllPagesDomainsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllPagesDomains", reflect.TypeOf((*MockPagesDomainsServiceInterface)(nil).ListAllPagesDomains), options...)
	return &MockPagesDomainsServiceInterfaceListAllPagesDomainsCall{Call: call}
}

// MockPagesDomainsServiceInterfaceListAllPagesDomainsCall wrap *gomock.Call
type MockPagesDomainsServiceInterfaceListAllPagesDomainsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPagesDomainsServiceInterfaceListAllPagesDomainsCall) Return(arg0 []*gitlab.PagesDomain, arg1 *gitlab.Response, arg2 error) *MockPagesDomainsServiceInterfaceListAllPagesDomainsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPagesDomainsServiceInterfaceListAllPagesDomainsCall) Do(f func(...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceListAllPagesDomainsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPagesDomainsServiceInterfaceListAllPagesDomainsCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceListAllPagesDomainsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPagesDomains mocks base method.
func (m *MockPagesDomainsServiceInterface) ListPagesDomains(pid any, opt *gitlab.ListPagesDomainsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPagesDomains", varargs...)
	ret0, _ := ret[0].([]*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPagesDomains indicates an expected call of ListPagesDomains.
func (mr *MockPagesDomainsServiceInterfaceMockRecorder) ListPagesDomains(pid, opt any, options ...any) *MockPagesDomainsServiceInterfaceListPagesDomainsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPagesDomains", reflect.TypeOf((*MockPagesDomainsServiceInterface)(nil).ListPagesDomains), varargs...)
	return &MockPagesDomainsServiceInterfaceListPagesDomainsCall{Call: call}
}

// MockPagesDomainsServiceInterfaceListPagesDomainsCall wrap *gomock.Call
type MockPagesDomainsServiceInterfaceListPagesDomainsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPagesDomainsServiceInterfaceListPagesDomainsCall) Return(arg0 []*gitlab.PagesDomain, arg1 *gitlab.Response, arg2 error) *MockPagesDomainsServiceInterfaceListPagesDomainsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPagesDomainsServiceInterfaceListPagesDomainsCall) Do(f func(any, *gitlab.ListPagesDomainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceListPagesDomainsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPagesDomainsServiceInterfaceListPagesDomainsCall) DoAndReturn(f func(any, *gitlab.ListPagesDomainsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceListPagesDomainsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePagesDomain mocks base method.
func (m *MockPagesDomainsServiceInterface) UpdatePagesDomain(pid any, domain string, opt *gitlab.UpdatePagesDomainOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, domain, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePagesDomain", varargs...)
	ret0, _ := ret[0].(*gitlab.PagesDomain)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePagesDomain indicates an expected call of UpdatePagesDomain.
func (mr *MockPagesDomainsServiceInterfaceMockRecorder) UpdatePagesDomain(pid, domain, opt any, options ...any) *MockPagesDomainsServiceInterfaceUpdatePagesDomainCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, domain, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePagesDomain", reflect.TypeOf((*MockPagesDomainsServiceInterface)(nil).UpdatePagesDomain), varargs...)
	return &MockPagesDomainsServiceInterfaceUpdatePagesDomainCall{Call: call}
}

// MockPagesDomainsServiceInterfaceUpdatePagesDomainCall wrap *gomock.Call
type MockPagesDomainsServiceInterfaceUpdatePagesDomainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPagesDomainsServiceInterfaceUpdatePagesDomainCall) Return(arg0 *gitlab.PagesDomain, arg1 *gitlab.Response, arg2 error) *MockPagesDomainsServiceInterfaceUpdatePagesDomainCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPagesDomainsServiceInterfaceUpdatePagesDomainCall) Do(f func(any, string, *gitlab.UpdatePagesDomainOptions, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceUpdatePagesDomainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPagesDomainsServiceInterfaceUpdatePagesDomainCall) DoAndReturn(f func(any, string, *gitlab.UpdatePagesDomainOptions, ...gitlab.RequestOptionFunc) (*gitlab.PagesDomain, *gitlab.Response, error)) *MockPagesDomainsServiceInterfaceUpdatePagesDomainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
