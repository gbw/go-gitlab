// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: TagsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=tags_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go TagsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockTagsServiceInterface is a mock of TagsServiceInterface interface.
type MockTagsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTagsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockTagsServiceInterfaceMockRecorder is the mock recorder for MockTagsServiceInterface.
type MockTagsServiceInterfaceMockRecorder struct {
	mock *MockTagsServiceInterface
}

// NewMockTagsServiceInterface creates a new mock instance.
func NewMockTagsServiceInterface(ctrl *gomock.Controller) *MockTagsServiceInterface {
	mock := &MockTagsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTagsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagsServiceInterface) EXPECT() *MockTagsServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockTagsServiceInterface) CreateTag(pid any, opt *gitlab.CreateTagOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Tag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTag", varargs...)
	ret0, _ := ret[0].(*gitlab.Tag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockTagsServiceInterfaceMockRecorder) CreateTag(pid, opt any, options ...any) *MockTagsServiceInterfaceCreateTagCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagsServiceInterface)(nil).CreateTag), varargs...)
	return &MockTagsServiceInterfaceCreateTagCall{Call: call}
}

// MockTagsServiceInterfaceCreateTagCall wrap *gomock.Call
type MockTagsServiceInterfaceCreateTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTagsServiceInterfaceCreateTagCall) Return(arg0 *gitlab.Tag, arg1 *gitlab.Response, arg2 error) *MockTagsServiceInterfaceCreateTagCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTagsServiceInterfaceCreateTagCall) Do(f func(any, *gitlab.CreateTagOptions, ...gitlab.RequestOptionFunc) (*gitlab.Tag, *gitlab.Response, error)) *MockTagsServiceInterfaceCreateTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTagsServiceInterfaceCreateTagCall) DoAndReturn(f func(any, *gitlab.CreateTagOptions, ...gitlab.RequestOptionFunc) (*gitlab.Tag, *gitlab.Response, error)) *MockTagsServiceInterfaceCreateTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteTag mocks base method.
func (m *MockTagsServiceInterface) DeleteTag(pid any, tag string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tag}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTag", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagsServiceInterfaceMockRecorder) DeleteTag(pid, tag any, options ...any) *MockTagsServiceInterfaceDeleteTagCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tag}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagsServiceInterface)(nil).DeleteTag), varargs...)
	return &MockTagsServiceInterfaceDeleteTagCall{Call: call}
}

// MockTagsServiceInterfaceDeleteTagCall wrap *gomock.Call
type MockTagsServiceInterfaceDeleteTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTagsServiceInterfaceDeleteTagCall) Return(arg0 *gitlab.Response, arg1 error) *MockTagsServiceInterfaceDeleteTagCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTagsServiceInterfaceDeleteTagCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockTagsServiceInterfaceDeleteTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTagsServiceInterfaceDeleteTagCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockTagsServiceInterfaceDeleteTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTag mocks base method.
func (m *MockTagsServiceInterface) GetTag(pid any, tag string, options ...gitlab.RequestOptionFunc) (*gitlab.Tag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tag}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTag", varargs...)
	ret0, _ := ret[0].(*gitlab.Tag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTag indicates an expected call of GetTag.
func (mr *MockTagsServiceInterfaceMockRecorder) GetTag(pid, tag any, options ...any) *MockTagsServiceInterfaceGetTagCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tag}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagsServiceInterface)(nil).GetTag), varargs...)
	return &MockTagsServiceInterfaceGetTagCall{Call: call}
}

// MockTagsServiceInterfaceGetTagCall wrap *gomock.Call
type MockTagsServiceInterfaceGetTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTagsServiceInterfaceGetTagCall) Return(arg0 *gitlab.Tag, arg1 *gitlab.Response, arg2 error) *MockTagsServiceInterfaceGetTagCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTagsServiceInterfaceGetTagCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Tag, *gitlab.Response, error)) *MockTagsServiceInterfaceGetTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTagsServiceInterfaceGetTagCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Tag, *gitlab.Response, error)) *MockTagsServiceInterfaceGetTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetTagSignature mocks base method.
func (m *MockTagsServiceInterface) GetTagSignature(pid any, tag string, options ...gitlab.RequestOptionFunc) (*gitlab.X509Signature, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tag}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagSignature", varargs...)
	ret0, _ := ret[0].(*gitlab.X509Signature)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTagSignature indicates an expected call of GetTagSignature.
func (mr *MockTagsServiceInterfaceMockRecorder) GetTagSignature(pid, tag any, options ...any) *MockTagsServiceInterfaceGetTagSignatureCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tag}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagSignature", reflect.TypeOf((*MockTagsServiceInterface)(nil).GetTagSignature), varargs...)
	return &MockTagsServiceInterfaceGetTagSignatureCall{Call: call}
}

// MockTagsServiceInterfaceGetTagSignatureCall wrap *gomock.Call
type MockTagsServiceInterfaceGetTagSignatureCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTagsServiceInterfaceGetTagSignatureCall) Return(arg0 *gitlab.X509Signature, arg1 *gitlab.Response, arg2 error) *MockTagsServiceInterfaceGetTagSignatureCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTagsServiceInterfaceGetTagSignatureCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.X509Signature, *gitlab.Response, error)) *MockTagsServiceInterfaceGetTagSignatureCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTagsServiceInterfaceGetTagSignatureCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.X509Signature, *gitlab.Response, error)) *MockTagsServiceInterfaceGetTagSignatureCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListTags mocks base method.
func (m *MockTagsServiceInterface) ListTags(pid any, opt *gitlab.ListTagsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Tag, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTags", varargs...)
	ret0, _ := ret[0].([]*gitlab.Tag)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTags indicates an expected call of ListTags.
func (mr *MockTagsServiceInterfaceMockRecorder) ListTags(pid, opt any, options ...any) *MockTagsServiceInterfaceListTagsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockTagsServiceInterface)(nil).ListTags), varargs...)
	return &MockTagsServiceInterfaceListTagsCall{Call: call}
}

// MockTagsServiceInterfaceListTagsCall wrap *gomock.Call
type MockTagsServiceInterfaceListTagsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTagsServiceInterfaceListTagsCall) Return(arg0 []*gitlab.Tag, arg1 *gitlab.Response, arg2 error) *MockTagsServiceInterfaceListTagsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTagsServiceInterfaceListTagsCall) Do(f func(any, *gitlab.ListTagsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Tag, *gitlab.Response, error)) *MockTagsServiceInterfaceListTagsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTagsServiceInterfaceListTagsCall) DoAndReturn(f func(any, *gitlab.ListTagsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Tag, *gitlab.Response, error)) *MockTagsServiceInterfaceListTagsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
