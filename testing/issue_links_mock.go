// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: IssueLinksServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=issue_links_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go IssueLinksServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockIssueLinksServiceInterface is a mock of IssueLinksServiceInterface interface.
type MockIssueLinksServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockIssueLinksServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockIssueLinksServiceInterfaceMockRecorder is the mock recorder for MockIssueLinksServiceInterface.
type MockIssueLinksServiceInterfaceMockRecorder struct {
	mock *MockIssueLinksServiceInterface
}

// NewMockIssueLinksServiceInterface creates a new mock instance.
func NewMockIssueLinksServiceInterface(ctrl *gomock.Controller) *MockIssueLinksServiceInterface {
	mock := &MockIssueLinksServiceInterface{ctrl: ctrl}
	mock.recorder = &MockIssueLinksServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueLinksServiceInterface) EXPECT() *MockIssueLinksServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateIssueLink mocks base method.
func (m *MockIssueLinksServiceInterface) CreateIssueLink(pid any, issue int, opt *gitlab.CreateIssueLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateIssueLink", varargs...)
	ret0, _ := ret[0].(*gitlab.IssueLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateIssueLink indicates an expected call of CreateIssueLink.
func (mr *MockIssueLinksServiceInterfaceMockRecorder) CreateIssueLink(pid, issue, opt any, options ...any) *MockIssueLinksServiceInterfaceCreateIssueLinkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssueLink", reflect.TypeOf((*MockIssueLinksServiceInterface)(nil).CreateIssueLink), varargs...)
	return &MockIssueLinksServiceInterfaceCreateIssueLinkCall{Call: call}
}

// MockIssueLinksServiceInterfaceCreateIssueLinkCall wrap *gomock.Call
type MockIssueLinksServiceInterfaceCreateIssueLinkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueLinksServiceInterfaceCreateIssueLinkCall) Return(arg0 *gitlab.IssueLink, arg1 *gitlab.Response, arg2 error) *MockIssueLinksServiceInterfaceCreateIssueLinkCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueLinksServiceInterfaceCreateIssueLinkCall) Do(f func(any, int, *gitlab.CreateIssueLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)) *MockIssueLinksServiceInterfaceCreateIssueLinkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueLinksServiceInterfaceCreateIssueLinkCall) DoAndReturn(f func(any, int, *gitlab.CreateIssueLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)) *MockIssueLinksServiceInterfaceCreateIssueLinkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteIssueLink mocks base method.
func (m *MockIssueLinksServiceInterface) DeleteIssueLink(pid any, issue, issueLink int, options ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, issueLink}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssueLink", varargs...)
	ret0, _ := ret[0].(*gitlab.IssueLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteIssueLink indicates an expected call of DeleteIssueLink.
func (mr *MockIssueLinksServiceInterfaceMockRecorder) DeleteIssueLink(pid, issue, issueLink any, options ...any) *MockIssueLinksServiceInterfaceDeleteIssueLinkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, issueLink}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueLink", reflect.TypeOf((*MockIssueLinksServiceInterface)(nil).DeleteIssueLink), varargs...)
	return &MockIssueLinksServiceInterfaceDeleteIssueLinkCall{Call: call}
}

// MockIssueLinksServiceInterfaceDeleteIssueLinkCall wrap *gomock.Call
type MockIssueLinksServiceInterfaceDeleteIssueLinkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueLinksServiceInterfaceDeleteIssueLinkCall) Return(arg0 *gitlab.IssueLink, arg1 *gitlab.Response, arg2 error) *MockIssueLinksServiceInterfaceDeleteIssueLinkCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueLinksServiceInterfaceDeleteIssueLinkCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)) *MockIssueLinksServiceInterfaceDeleteIssueLinkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueLinksServiceInterfaceDeleteIssueLinkCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)) *MockIssueLinksServiceInterfaceDeleteIssueLinkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIssueLink mocks base method.
func (m *MockIssueLinksServiceInterface) GetIssueLink(pid any, issue, issueLink int, options ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, issueLink}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueLink", varargs...)
	ret0, _ := ret[0].(*gitlab.IssueLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueLink indicates an expected call of GetIssueLink.
func (mr *MockIssueLinksServiceInterfaceMockRecorder) GetIssueLink(pid, issue, issueLink any, options ...any) *MockIssueLinksServiceInterfaceGetIssueLinkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, issueLink}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueLink", reflect.TypeOf((*MockIssueLinksServiceInterface)(nil).GetIssueLink), varargs...)
	return &MockIssueLinksServiceInterfaceGetIssueLinkCall{Call: call}
}

// MockIssueLinksServiceInterfaceGetIssueLinkCall wrap *gomock.Call
type MockIssueLinksServiceInterfaceGetIssueLinkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueLinksServiceInterfaceGetIssueLinkCall) Return(arg0 *gitlab.IssueLink, arg1 *gitlab.Response, arg2 error) *MockIssueLinksServiceInterfaceGetIssueLinkCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueLinksServiceInterfaceGetIssueLinkCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)) *MockIssueLinksServiceInterfaceGetIssueLinkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueLinksServiceInterfaceGetIssueLinkCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IssueLink, *gitlab.Response, error)) *MockIssueLinksServiceInterfaceGetIssueLinkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListIssueRelations mocks base method.
func (m *MockIssueLinksServiceInterface) ListIssueRelations(pid any, issue int, options ...gitlab.RequestOptionFunc) ([]*gitlab.IssueRelation, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssueRelations", varargs...)
	ret0, _ := ret[0].([]*gitlab.IssueRelation)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueRelations indicates an expected call of ListIssueRelations.
func (mr *MockIssueLinksServiceInterfaceMockRecorder) ListIssueRelations(pid, issue any, options ...any) *MockIssueLinksServiceInterfaceListIssueRelationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueRelations", reflect.TypeOf((*MockIssueLinksServiceInterface)(nil).ListIssueRelations), varargs...)
	return &MockIssueLinksServiceInterfaceListIssueRelationsCall{Call: call}
}

// MockIssueLinksServiceInterfaceListIssueRelationsCall wrap *gomock.Call
type MockIssueLinksServiceInterfaceListIssueRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockIssueLinksServiceInterfaceListIssueRelationsCall) Return(arg0 []*gitlab.IssueRelation, arg1 *gitlab.Response, arg2 error) *MockIssueLinksServiceInterfaceListIssueRelationsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockIssueLinksServiceInterfaceListIssueRelationsCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) ([]*gitlab.IssueRelation, *gitlab.Response, error)) *MockIssueLinksServiceInterfaceListIssueRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockIssueLinksServiceInterfaceListIssueRelationsCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) ([]*gitlab.IssueRelation, *gitlab.Response, error)) *MockIssueLinksServiceInterfaceListIssueRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
