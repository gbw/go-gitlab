// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProjectSecuritySettingsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=project_security_settings_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ProjectSecuritySettingsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectSecuritySettingsServiceInterface is a mock of ProjectSecuritySettingsServiceInterface interface.
type MockProjectSecuritySettingsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectSecuritySettingsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectSecuritySettingsServiceInterfaceMockRecorder is the mock recorder for MockProjectSecuritySettingsServiceInterface.
type MockProjectSecuritySettingsServiceInterfaceMockRecorder struct {
	mock *MockProjectSecuritySettingsServiceInterface
}

// NewMockProjectSecuritySettingsServiceInterface creates a new mock instance.
func NewMockProjectSecuritySettingsServiceInterface(ctrl *gomock.Controller) *MockProjectSecuritySettingsServiceInterface {
	mock := &MockProjectSecuritySettingsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectSecuritySettingsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectSecuritySettingsServiceInterface) EXPECT() *MockProjectSecuritySettingsServiceInterfaceMockRecorder {
	return m.recorder
}

// ListProjectSecuritySettings mocks base method.
func (m *MockProjectSecuritySettingsServiceInterface) ListProjectSecuritySettings(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectSecuritySettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectSecuritySettings", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectSecuritySettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectSecuritySettings indicates an expected call of ListProjectSecuritySettings.
func (mr *MockProjectSecuritySettingsServiceInterfaceMockRecorder) ListProjectSecuritySettings(pid any, options ...any) *MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectSecuritySettings", reflect.TypeOf((*MockProjectSecuritySettingsServiceInterface)(nil).ListProjectSecuritySettings), varargs...)
	return &MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall{Call: call}
}

// MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall wrap *gomock.Call
type MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall) Return(arg0 *gitlab.ProjectSecuritySettings, arg1 *gitlab.Response, arg2 error) *MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.ProjectSecuritySettings, *gitlab.Response, error)) *MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.ProjectSecuritySettings, *gitlab.Response, error)) *MockProjectSecuritySettingsServiceInterfaceListProjectSecuritySettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecretPushProtectionEnabledSetting mocks base method.
func (m *MockProjectSecuritySettingsServiceInterface) UpdateSecretPushProtectionEnabledSetting(pid any, opt gitlab.UpdateProjectSecuritySettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectSecuritySettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecretPushProtectionEnabledSetting", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectSecuritySettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSecretPushProtectionEnabledSetting indicates an expected call of UpdateSecretPushProtectionEnabledSetting.
func (mr *MockProjectSecuritySettingsServiceInterfaceMockRecorder) UpdateSecretPushProtectionEnabledSetting(pid, opt any, options ...any) *MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretPushProtectionEnabledSetting", reflect.TypeOf((*MockProjectSecuritySettingsServiceInterface)(nil).UpdateSecretPushProtectionEnabledSetting), varargs...)
	return &MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall{Call: call}
}

// MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall wrap *gomock.Call
type MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall) Return(arg0 *gitlab.ProjectSecuritySettings, arg1 *gitlab.Response, arg2 error) *MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall) Do(f func(any, gitlab.UpdateProjectSecuritySettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectSecuritySettings, *gitlab.Response, error)) *MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall) DoAndReturn(f func(any, gitlab.UpdateProjectSecuritySettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectSecuritySettings, *gitlab.Response, error)) *MockProjectSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
