// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupBadgesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_badges_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupBadgesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupBadgesServiceInterface is a mock of GroupBadgesServiceInterface interface.
type MockGroupBadgesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupBadgesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupBadgesServiceInterfaceMockRecorder is the mock recorder for MockGroupBadgesServiceInterface.
type MockGroupBadgesServiceInterfaceMockRecorder struct {
	mock *MockGroupBadgesServiceInterface
}

// NewMockGroupBadgesServiceInterface creates a new mock instance.
func NewMockGroupBadgesServiceInterface(ctrl *gomock.Controller) *MockGroupBadgesServiceInterface {
	mock := &MockGroupBadgesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupBadgesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupBadgesServiceInterface) EXPECT() *MockGroupBadgesServiceInterfaceMockRecorder {
	return m.recorder
}

// AddGroupBadge mocks base method.
func (m *MockGroupBadgesServiceInterface) AddGroupBadge(gid any, opt *gitlab.AddGroupBadgeOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddGroupBadge indicates an expected call of AddGroupBadge.
func (mr *MockGroupBadgesServiceInterfaceMockRecorder) AddGroupBadge(gid, opt any, options ...any) *MockGroupBadgesServiceInterfaceAddGroupBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupBadge", reflect.TypeOf((*MockGroupBadgesServiceInterface)(nil).AddGroupBadge), varargs...)
	return &MockGroupBadgesServiceInterfaceAddGroupBadgeCall{Call: call}
}

// MockGroupBadgesServiceInterfaceAddGroupBadgeCall wrap *gomock.Call
type MockGroupBadgesServiceInterfaceAddGroupBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupBadgesServiceInterfaceAddGroupBadgeCall) Return(arg0 *gitlab.GroupBadge, arg1 *gitlab.Response, arg2 error) *MockGroupBadgesServiceInterfaceAddGroupBadgeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupBadgesServiceInterfaceAddGroupBadgeCall) Do(f func(any, *gitlab.AddGroupBadgeOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfaceAddGroupBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupBadgesServiceInterfaceAddGroupBadgeCall) DoAndReturn(f func(any, *gitlab.AddGroupBadgeOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfaceAddGroupBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGroupBadge mocks base method.
func (m *MockGroupBadgesServiceInterface) DeleteGroupBadge(gid any, badge int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, badge}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupBadge indicates an expected call of DeleteGroupBadge.
func (mr *MockGroupBadgesServiceInterfaceMockRecorder) DeleteGroupBadge(gid, badge any, options ...any) *MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, badge}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupBadge", reflect.TypeOf((*MockGroupBadgesServiceInterface)(nil).DeleteGroupBadge), varargs...)
	return &MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall{Call: call}
}

// MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall wrap *gomock.Call
type MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupBadgesServiceInterfaceDeleteGroupBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditGroupBadge mocks base method.
func (m *MockGroupBadgesServiceInterface) EditGroupBadge(gid any, badge int, opt *gitlab.EditGroupBadgeOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, badge, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditGroupBadge indicates an expected call of EditGroupBadge.
func (mr *MockGroupBadgesServiceInterfaceMockRecorder) EditGroupBadge(gid, badge, opt any, options ...any) *MockGroupBadgesServiceInterfaceEditGroupBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, badge, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditGroupBadge", reflect.TypeOf((*MockGroupBadgesServiceInterface)(nil).EditGroupBadge), varargs...)
	return &MockGroupBadgesServiceInterfaceEditGroupBadgeCall{Call: call}
}

// MockGroupBadgesServiceInterfaceEditGroupBadgeCall wrap *gomock.Call
type MockGroupBadgesServiceInterfaceEditGroupBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupBadgesServiceInterfaceEditGroupBadgeCall) Return(arg0 *gitlab.GroupBadge, arg1 *gitlab.Response, arg2 error) *MockGroupBadgesServiceInterfaceEditGroupBadgeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupBadgesServiceInterfaceEditGroupBadgeCall) Do(f func(any, int, *gitlab.EditGroupBadgeOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfaceEditGroupBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupBadgesServiceInterfaceEditGroupBadgeCall) DoAndReturn(f func(any, int, *gitlab.EditGroupBadgeOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfaceEditGroupBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupBadge mocks base method.
func (m *MockGroupBadgesServiceInterface) GetGroupBadge(gid any, badge int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, badge}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupBadge indicates an expected call of GetGroupBadge.
func (mr *MockGroupBadgesServiceInterfaceMockRecorder) GetGroupBadge(gid, badge any, options ...any) *MockGroupBadgesServiceInterfaceGetGroupBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, badge}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupBadge", reflect.TypeOf((*MockGroupBadgesServiceInterface)(nil).GetGroupBadge), varargs...)
	return &MockGroupBadgesServiceInterfaceGetGroupBadgeCall{Call: call}
}

// MockGroupBadgesServiceInterfaceGetGroupBadgeCall wrap *gomock.Call
type MockGroupBadgesServiceInterfaceGetGroupBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupBadgesServiceInterfaceGetGroupBadgeCall) Return(arg0 *gitlab.GroupBadge, arg1 *gitlab.Response, arg2 error) *MockGroupBadgesServiceInterfaceGetGroupBadgeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupBadgesServiceInterfaceGetGroupBadgeCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfaceGetGroupBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupBadgesServiceInterfaceGetGroupBadgeCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfaceGetGroupBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupBadges mocks base method.
func (m *MockGroupBadgesServiceInterface) ListGroupBadges(gid any, opt *gitlab.ListGroupBadgesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupBadges", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupBadges indicates an expected call of ListGroupBadges.
func (mr *MockGroupBadgesServiceInterfaceMockRecorder) ListGroupBadges(gid, opt any, options ...any) *MockGroupBadgesServiceInterfaceListGroupBadgesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupBadges", reflect.TypeOf((*MockGroupBadgesServiceInterface)(nil).ListGroupBadges), varargs...)
	return &MockGroupBadgesServiceInterfaceListGroupBadgesCall{Call: call}
}

// MockGroupBadgesServiceInterfaceListGroupBadgesCall wrap *gomock.Call
type MockGroupBadgesServiceInterfaceListGroupBadgesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupBadgesServiceInterfaceListGroupBadgesCall) Return(arg0 []*gitlab.GroupBadge, arg1 *gitlab.Response, arg2 error) *MockGroupBadgesServiceInterfaceListGroupBadgesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupBadgesServiceInterfaceListGroupBadgesCall) Do(f func(any, *gitlab.ListGroupBadgesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfaceListGroupBadgesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupBadgesServiceInterfaceListGroupBadgesCall) DoAndReturn(f func(any, *gitlab.ListGroupBadgesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfaceListGroupBadgesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PreviewGroupBadge mocks base method.
func (m *MockGroupBadgesServiceInterface) PreviewGroupBadge(gid any, opt *gitlab.GroupBadgePreviewOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreviewGroupBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PreviewGroupBadge indicates an expected call of PreviewGroupBadge.
func (mr *MockGroupBadgesServiceInterfaceMockRecorder) PreviewGroupBadge(gid, opt any, options ...any) *MockGroupBadgesServiceInterfacePreviewGroupBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewGroupBadge", reflect.TypeOf((*MockGroupBadgesServiceInterface)(nil).PreviewGroupBadge), varargs...)
	return &MockGroupBadgesServiceInterfacePreviewGroupBadgeCall{Call: call}
}

// MockGroupBadgesServiceInterfacePreviewGroupBadgeCall wrap *gomock.Call
type MockGroupBadgesServiceInterfacePreviewGroupBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupBadgesServiceInterfacePreviewGroupBadgeCall) Return(arg0 *gitlab.GroupBadge, arg1 *gitlab.Response, arg2 error) *MockGroupBadgesServiceInterfacePreviewGroupBadgeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupBadgesServiceInterfacePreviewGroupBadgeCall) Do(f func(any, *gitlab.GroupBadgePreviewOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfacePreviewGroupBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupBadgesServiceInterfacePreviewGroupBadgeCall) DoAndReturn(f func(any, *gitlab.GroupBadgePreviewOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupBadge, *gitlab.Response, error)) *MockGroupBadgesServiceInterfacePreviewGroupBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
