// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: DraftNotesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=draft_notes_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go DraftNotesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDraftNotesServiceInterface is a mock of DraftNotesServiceInterface interface.
type MockDraftNotesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDraftNotesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockDraftNotesServiceInterfaceMockRecorder is the mock recorder for MockDraftNotesServiceInterface.
type MockDraftNotesServiceInterfaceMockRecorder struct {
	mock *MockDraftNotesServiceInterface
}

// NewMockDraftNotesServiceInterface creates a new mock instance.
func NewMockDraftNotesServiceInterface(ctrl *gomock.Controller) *MockDraftNotesServiceInterface {
	mock := &MockDraftNotesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDraftNotesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDraftNotesServiceInterface) EXPECT() *MockDraftNotesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateDraftNote mocks base method.
func (m *MockDraftNotesServiceInterface) CreateDraftNote(pid any, mergeRequest int, opt *gitlab.CreateDraftNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DraftNote, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDraftNote", varargs...)
	ret0, _ := ret[0].(*gitlab.DraftNote)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateDraftNote indicates an expected call of CreateDraftNote.
func (mr *MockDraftNotesServiceInterfaceMockRecorder) CreateDraftNote(pid, mergeRequest, opt any, options ...any) *MockDraftNotesServiceInterfaceCreateDraftNoteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDraftNote", reflect.TypeOf((*MockDraftNotesServiceInterface)(nil).CreateDraftNote), varargs...)
	return &MockDraftNotesServiceInterfaceCreateDraftNoteCall{Call: call}
}

// MockDraftNotesServiceInterfaceCreateDraftNoteCall wrap *gomock.Call
type MockDraftNotesServiceInterfaceCreateDraftNoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDraftNotesServiceInterfaceCreateDraftNoteCall) Return(arg0 *gitlab.DraftNote, arg1 *gitlab.Response, arg2 error) *MockDraftNotesServiceInterfaceCreateDraftNoteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDraftNotesServiceInterfaceCreateDraftNoteCall) Do(f func(any, int, *gitlab.CreateDraftNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.DraftNote, *gitlab.Response, error)) *MockDraftNotesServiceInterfaceCreateDraftNoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDraftNotesServiceInterfaceCreateDraftNoteCall) DoAndReturn(f func(any, int, *gitlab.CreateDraftNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.DraftNote, *gitlab.Response, error)) *MockDraftNotesServiceInterfaceCreateDraftNoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteDraftNote mocks base method.
func (m *MockDraftNotesServiceInterface) DeleteDraftNote(pid any, mergeRequest, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDraftNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDraftNote indicates an expected call of DeleteDraftNote.
func (mr *MockDraftNotesServiceInterfaceMockRecorder) DeleteDraftNote(pid, mergeRequest, note any, options ...any) *MockDraftNotesServiceInterfaceDeleteDraftNoteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, note}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDraftNote", reflect.TypeOf((*MockDraftNotesServiceInterface)(nil).DeleteDraftNote), varargs...)
	return &MockDraftNotesServiceInterfaceDeleteDraftNoteCall{Call: call}
}

// MockDraftNotesServiceInterfaceDeleteDraftNoteCall wrap *gomock.Call
type MockDraftNotesServiceInterfaceDeleteDraftNoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDraftNotesServiceInterfaceDeleteDraftNoteCall) Return(arg0 *gitlab.Response, arg1 error) *MockDraftNotesServiceInterfaceDeleteDraftNoteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDraftNotesServiceInterfaceDeleteDraftNoteCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDraftNotesServiceInterfaceDeleteDraftNoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDraftNotesServiceInterfaceDeleteDraftNoteCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDraftNotesServiceInterfaceDeleteDraftNoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDraftNote mocks base method.
func (m *MockDraftNotesServiceInterface) GetDraftNote(pid any, mergeRequest, note int, options ...gitlab.RequestOptionFunc) (*gitlab.DraftNote, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDraftNote", varargs...)
	ret0, _ := ret[0].(*gitlab.DraftNote)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDraftNote indicates an expected call of GetDraftNote.
func (mr *MockDraftNotesServiceInterfaceMockRecorder) GetDraftNote(pid, mergeRequest, note any, options ...any) *MockDraftNotesServiceInterfaceGetDraftNoteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, note}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDraftNote", reflect.TypeOf((*MockDraftNotesServiceInterface)(nil).GetDraftNote), varargs...)
	return &MockDraftNotesServiceInterfaceGetDraftNoteCall{Call: call}
}

// MockDraftNotesServiceInterfaceGetDraftNoteCall wrap *gomock.Call
type MockDraftNotesServiceInterfaceGetDraftNoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDraftNotesServiceInterfaceGetDraftNoteCall) Return(arg0 *gitlab.DraftNote, arg1 *gitlab.Response, arg2 error) *MockDraftNotesServiceInterfaceGetDraftNoteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDraftNotesServiceInterfaceGetDraftNoteCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.DraftNote, *gitlab.Response, error)) *MockDraftNotesServiceInterfaceGetDraftNoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDraftNotesServiceInterfaceGetDraftNoteCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.DraftNote, *gitlab.Response, error)) *MockDraftNotesServiceInterfaceGetDraftNoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListDraftNotes mocks base method.
func (m *MockDraftNotesServiceInterface) ListDraftNotes(pid any, mergeRequest int, opt *gitlab.ListDraftNotesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.DraftNote, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDraftNotes", varargs...)
	ret0, _ := ret[0].([]*gitlab.DraftNote)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDraftNotes indicates an expected call of ListDraftNotes.
func (mr *MockDraftNotesServiceInterfaceMockRecorder) ListDraftNotes(pid, mergeRequest, opt any, options ...any) *MockDraftNotesServiceInterfaceListDraftNotesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDraftNotes", reflect.TypeOf((*MockDraftNotesServiceInterface)(nil).ListDraftNotes), varargs...)
	return &MockDraftNotesServiceInterfaceListDraftNotesCall{Call: call}
}

// MockDraftNotesServiceInterfaceListDraftNotesCall wrap *gomock.Call
type MockDraftNotesServiceInterfaceListDraftNotesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDraftNotesServiceInterfaceListDraftNotesCall) Return(arg0 []*gitlab.DraftNote, arg1 *gitlab.Response, arg2 error) *MockDraftNotesServiceInterfaceListDraftNotesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDraftNotesServiceInterfaceListDraftNotesCall) Do(f func(any, int, *gitlab.ListDraftNotesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DraftNote, *gitlab.Response, error)) *MockDraftNotesServiceInterfaceListDraftNotesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDraftNotesServiceInterfaceListDraftNotesCall) DoAndReturn(f func(any, int, *gitlab.ListDraftNotesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DraftNote, *gitlab.Response, error)) *MockDraftNotesServiceInterfaceListDraftNotesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublishAllDraftNotes mocks base method.
func (m *MockDraftNotesServiceInterface) PublishAllDraftNotes(pid any, mergeRequest int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishAllDraftNotes", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishAllDraftNotes indicates an expected call of PublishAllDraftNotes.
func (mr *MockDraftNotesServiceInterfaceMockRecorder) PublishAllDraftNotes(pid, mergeRequest any, options ...any) *MockDraftNotesServiceInterfacePublishAllDraftNotesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishAllDraftNotes", reflect.TypeOf((*MockDraftNotesServiceInterface)(nil).PublishAllDraftNotes), varargs...)
	return &MockDraftNotesServiceInterfacePublishAllDraftNotesCall{Call: call}
}

// MockDraftNotesServiceInterfacePublishAllDraftNotesCall wrap *gomock.Call
type MockDraftNotesServiceInterfacePublishAllDraftNotesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDraftNotesServiceInterfacePublishAllDraftNotesCall) Return(arg0 *gitlab.Response, arg1 error) *MockDraftNotesServiceInterfacePublishAllDraftNotesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDraftNotesServiceInterfacePublishAllDraftNotesCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDraftNotesServiceInterfacePublishAllDraftNotesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDraftNotesServiceInterfacePublishAllDraftNotesCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDraftNotesServiceInterfacePublishAllDraftNotesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublishDraftNote mocks base method.
func (m *MockDraftNotesServiceInterface) PublishDraftNote(pid any, mergeRequest, note int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, note}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishDraftNote", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishDraftNote indicates an expected call of PublishDraftNote.
func (mr *MockDraftNotesServiceInterfaceMockRecorder) PublishDraftNote(pid, mergeRequest, note any, options ...any) *MockDraftNotesServiceInterfacePublishDraftNoteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, note}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDraftNote", reflect.TypeOf((*MockDraftNotesServiceInterface)(nil).PublishDraftNote), varargs...)
	return &MockDraftNotesServiceInterfacePublishDraftNoteCall{Call: call}
}

// MockDraftNotesServiceInterfacePublishDraftNoteCall wrap *gomock.Call
type MockDraftNotesServiceInterfacePublishDraftNoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDraftNotesServiceInterfacePublishDraftNoteCall) Return(arg0 *gitlab.Response, arg1 error) *MockDraftNotesServiceInterfacePublishDraftNoteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDraftNotesServiceInterfacePublishDraftNoteCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDraftNotesServiceInterfacePublishDraftNoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDraftNotesServiceInterfacePublishDraftNoteCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDraftNotesServiceInterfacePublishDraftNoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateDraftNote mocks base method.
func (m *MockDraftNotesServiceInterface) UpdateDraftNote(pid any, mergeRequest, note int, opt *gitlab.UpdateDraftNoteOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DraftNote, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, note, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDraftNote", varargs...)
	ret0, _ := ret[0].(*gitlab.DraftNote)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateDraftNote indicates an expected call of UpdateDraftNote.
func (mr *MockDraftNotesServiceInterfaceMockRecorder) UpdateDraftNote(pid, mergeRequest, note, opt any, options ...any) *MockDraftNotesServiceInterfaceUpdateDraftNoteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, note, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraftNote", reflect.TypeOf((*MockDraftNotesServiceInterface)(nil).UpdateDraftNote), varargs...)
	return &MockDraftNotesServiceInterfaceUpdateDraftNoteCall{Call: call}
}

// MockDraftNotesServiceInterfaceUpdateDraftNoteCall wrap *gomock.Call
type MockDraftNotesServiceInterfaceUpdateDraftNoteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDraftNotesServiceInterfaceUpdateDraftNoteCall) Return(arg0 *gitlab.DraftNote, arg1 *gitlab.Response, arg2 error) *MockDraftNotesServiceInterfaceUpdateDraftNoteCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDraftNotesServiceInterfaceUpdateDraftNoteCall) Do(f func(any, int, int, *gitlab.UpdateDraftNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.DraftNote, *gitlab.Response, error)) *MockDraftNotesServiceInterfaceUpdateDraftNoteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDraftNotesServiceInterfaceUpdateDraftNoteCall) DoAndReturn(f func(any, int, int, *gitlab.UpdateDraftNoteOptions, ...gitlab.RequestOptionFunc) (*gitlab.DraftNote, *gitlab.Response, error)) *MockDraftNotesServiceInterfaceUpdateDraftNoteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
