// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: AppearanceServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=appearance_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go AppearanceServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockAppearanceServiceInterface is a mock of AppearanceServiceInterface interface.
type MockAppearanceServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAppearanceServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockAppearanceServiceInterfaceMockRecorder is the mock recorder for MockAppearanceServiceInterface.
type MockAppearanceServiceInterfaceMockRecorder struct {
	mock *MockAppearanceServiceInterface
}

// NewMockAppearanceServiceInterface creates a new mock instance.
func NewMockAppearanceServiceInterface(ctrl *gomock.Controller) *MockAppearanceServiceInterface {
	mock := &MockAppearanceServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAppearanceServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppearanceServiceInterface) EXPECT() *MockAppearanceServiceInterfaceMockRecorder {
	return m.recorder
}

// ChangeAppearance mocks base method.
func (m *MockAppearanceServiceInterface) ChangeAppearance(opt *gitlab.ChangeAppearanceOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Appearance, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeAppearance", varargs...)
	ret0, _ := ret[0].(*gitlab.Appearance)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeAppearance indicates an expected call of ChangeAppearance.
func (mr *MockAppearanceServiceInterfaceMockRecorder) ChangeAppearance(opt any, options ...any) *MockAppearanceServiceInterfaceChangeAppearanceCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeAppearance", reflect.TypeOf((*MockAppearanceServiceInterface)(nil).ChangeAppearance), varargs...)
	return &MockAppearanceServiceInterfaceChangeAppearanceCall{Call: call}
}

// MockAppearanceServiceInterfaceChangeAppearanceCall wrap *gomock.Call
type MockAppearanceServiceInterfaceChangeAppearanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAppearanceServiceInterfaceChangeAppearanceCall) Return(arg0 *gitlab.Appearance, arg1 *gitlab.Response, arg2 error) *MockAppearanceServiceInterfaceChangeAppearanceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAppearanceServiceInterfaceChangeAppearanceCall) Do(f func(*gitlab.ChangeAppearanceOptions, ...gitlab.RequestOptionFunc) (*gitlab.Appearance, *gitlab.Response, error)) *MockAppearanceServiceInterfaceChangeAppearanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAppearanceServiceInterfaceChangeAppearanceCall) DoAndReturn(f func(*gitlab.ChangeAppearanceOptions, ...gitlab.RequestOptionFunc) (*gitlab.Appearance, *gitlab.Response, error)) *MockAppearanceServiceInterfaceChangeAppearanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAppearance mocks base method.
func (m *MockAppearanceServiceInterface) GetAppearance(options ...gitlab.RequestOptionFunc) (*gitlab.Appearance, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppearance", varargs...)
	ret0, _ := ret[0].(*gitlab.Appearance)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAppearance indicates an expected call of GetAppearance.
func (mr *MockAppearanceServiceInterfaceMockRecorder) GetAppearance(options ...any) *MockAppearanceServiceInterfaceGetAppearanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppearance", reflect.TypeOf((*MockAppearanceServiceInterface)(nil).GetAppearance), options...)
	return &MockAppearanceServiceInterfaceGetAppearanceCall{Call: call}
}

// MockAppearanceServiceInterfaceGetAppearanceCall wrap *gomock.Call
type MockAppearanceServiceInterfaceGetAppearanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAppearanceServiceInterfaceGetAppearanceCall) Return(arg0 *gitlab.Appearance, arg1 *gitlab.Response, arg2 error) *MockAppearanceServiceInterfaceGetAppearanceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAppearanceServiceInterfaceGetAppearanceCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.Appearance, *gitlab.Response, error)) *MockAppearanceServiceInterfaceGetAppearanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAppearanceServiceInterfaceGetAppearanceCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.Appearance, *gitlab.Response, error)) *MockAppearanceServiceInterfaceGetAppearanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
