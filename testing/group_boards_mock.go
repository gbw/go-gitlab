// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupIssueBoardsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_boards_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupIssueBoardsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupIssueBoardsServiceInterface is a mock of GroupIssueBoardsServiceInterface interface.
type MockGroupIssueBoardsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupIssueBoardsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupIssueBoardsServiceInterfaceMockRecorder is the mock recorder for MockGroupIssueBoardsServiceInterface.
type MockGroupIssueBoardsServiceInterfaceMockRecorder struct {
	mock *MockGroupIssueBoardsServiceInterface
}

// NewMockGroupIssueBoardsServiceInterface creates a new mock instance.
func NewMockGroupIssueBoardsServiceInterface(ctrl *gomock.Controller) *MockGroupIssueBoardsServiceInterface {
	mock := &MockGroupIssueBoardsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupIssueBoardsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupIssueBoardsServiceInterface) EXPECT() *MockGroupIssueBoardsServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateGroupIssueBoard mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) CreateGroupIssueBoard(gid any, opt *gitlab.CreateGroupIssueBoardOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupIssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupIssueBoard indicates an expected call of CreateGroupIssueBoard.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) CreateGroupIssueBoard(gid, opt any, options ...any) *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupIssueBoard", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).CreateGroupIssueBoard), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall) Return(arg0 *gitlab.GroupIssueBoard, arg1 *gitlab.Response, arg2 error) *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall) Do(f func(any, *gitlab.CreateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall) DoAndReturn(f func(any, *gitlab.CreateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateGroupIssueBoardList mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) CreateGroupIssueBoardList(gid any, board int, opt *gitlab.CreateGroupIssueBoardListOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupIssueBoardList indicates an expected call of CreateGroupIssueBoardList.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) CreateGroupIssueBoardList(gid, board, opt any, options ...any) *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupIssueBoardList", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).CreateGroupIssueBoardList), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall) Return(arg0 *gitlab.BoardList, arg1 *gitlab.Response, arg2 error) *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall) Do(f func(any, int, *gitlab.CreateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall) DoAndReturn(f func(any, int, *gitlab.CreateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceCreateGroupIssueBoardListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGroupIssueBoardList mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) DeleteGroupIssueBoardList(gid any, board, list int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, list}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupIssueBoardList indicates an expected call of DeleteGroupIssueBoardList.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) DeleteGroupIssueBoardList(gid, board, list any, options ...any) *MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, list}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupIssueBoardList", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).DeleteGroupIssueBoardList), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceDeleteGroupIssueBoardListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteIssueBoard mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) DeleteIssueBoard(gid any, board int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIssueBoard indicates an expected call of DeleteIssueBoard.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) DeleteIssueBoard(gid, board any, options ...any) *MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssueBoard", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).DeleteIssueBoard), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceDeleteIssueBoardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupIssueBoard mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) GetGroupIssueBoard(gid any, board int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupIssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupIssueBoard indicates an expected call of GetGroupIssueBoard.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) GetGroupIssueBoard(gid, board any, options ...any) *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupIssueBoard", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).GetGroupIssueBoard), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall) Return(arg0 *gitlab.GroupIssueBoard, arg1 *gitlab.Response, arg2 error) *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupIssueBoardList mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) GetGroupIssueBoardList(gid any, board, list int, options ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, list}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupIssueBoardList", varargs...)
	ret0, _ := ret[0].(*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupIssueBoardList indicates an expected call of GetGroupIssueBoardList.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) GetGroupIssueBoardList(gid, board, list any, options ...any) *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, list}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupIssueBoardList", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).GetGroupIssueBoardList), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall) Return(arg0 *gitlab.BoardList, arg1 *gitlab.Response, arg2 error) *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.BoardList, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceGetGroupIssueBoardListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupIssueBoardLists mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) ListGroupIssueBoardLists(gid any, board int, opt *gitlab.ListGroupIssueBoardListsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupIssueBoardLists", varargs...)
	ret0, _ := ret[0].([]*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupIssueBoardLists indicates an expected call of ListGroupIssueBoardLists.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) ListGroupIssueBoardLists(gid, board, opt any, options ...any) *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupIssueBoardLists", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).ListGroupIssueBoardLists), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall) Return(arg0 []*gitlab.BoardList, arg1 *gitlab.Response, arg2 error) *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall) Do(f func(any, int, *gitlab.ListGroupIssueBoardListsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall) DoAndReturn(f func(any, int, *gitlab.ListGroupIssueBoardListsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardListsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupIssueBoards mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) ListGroupIssueBoards(gid any, opt *gitlab.ListGroupIssueBoardsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupIssueBoards", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupIssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupIssueBoards indicates an expected call of ListGroupIssueBoards.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) ListGroupIssueBoards(gid, opt any, options ...any) *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupIssueBoards", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).ListGroupIssueBoards), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall) Return(arg0 []*gitlab.GroupIssueBoard, arg1 *gitlab.Response, arg2 error) *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall) Do(f func(any, *gitlab.ListGroupIssueBoardsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIssueBoard, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall) DoAndReturn(f func(any, *gitlab.ListGroupIssueBoardsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIssueBoard, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceListGroupIssueBoardsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateIssueBoard mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) UpdateIssueBoard(gid any, board int, opt *gitlab.UpdateGroupIssueBoardOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssueBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupIssueBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIssueBoard indicates an expected call of UpdateIssueBoard.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) UpdateIssueBoard(gid, board, opt any, options ...any) *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueBoard", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).UpdateIssueBoard), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall) Return(arg0 *gitlab.GroupIssueBoard, arg1 *gitlab.Response, arg2 error) *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall) Do(f func(any, int, *gitlab.UpdateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall) DoAndReturn(f func(any, int, *gitlab.UpdateGroupIssueBoardOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupIssueBoard, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateIssueBoardList mocks base method.
func (m *MockGroupIssueBoardsServiceInterface) UpdateIssueBoardList(gid any, board, list int, opt *gitlab.UpdateGroupIssueBoardListOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board, list, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateIssueBoardList", varargs...)
	ret0, _ := ret[0].([]*gitlab.BoardList)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateIssueBoardList indicates an expected call of UpdateIssueBoardList.
func (mr *MockGroupIssueBoardsServiceInterfaceMockRecorder) UpdateIssueBoardList(gid, board, list, opt any, options ...any) *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board, list, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssueBoardList", reflect.TypeOf((*MockGroupIssueBoardsServiceInterface)(nil).UpdateIssueBoardList), varargs...)
	return &MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall{Call: call}
}

// MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall wrap *gomock.Call
type MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall) Return(arg0 []*gitlab.BoardList, arg1 *gitlab.Response, arg2 error) *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall) Do(f func(any, int, int, *gitlab.UpdateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall) DoAndReturn(f func(any, int, int, *gitlab.UpdateGroupIssueBoardListOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BoardList, *gitlab.Response, error)) *MockGroupIssueBoardsServiceInterfaceUpdateIssueBoardListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
