// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: BroadcastMessagesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=broadcast_messages_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go BroadcastMessagesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockBroadcastMessagesServiceInterface is a mock of BroadcastMessagesServiceInterface interface.
type MockBroadcastMessagesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcastMessagesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockBroadcastMessagesServiceInterfaceMockRecorder is the mock recorder for MockBroadcastMessagesServiceInterface.
type MockBroadcastMessagesServiceInterfaceMockRecorder struct {
	mock *MockBroadcastMessagesServiceInterface
}

// NewMockBroadcastMessagesServiceInterface creates a new mock instance.
func NewMockBroadcastMessagesServiceInterface(ctrl *gomock.Controller) *MockBroadcastMessagesServiceInterface {
	mock := &MockBroadcastMessagesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBroadcastMessagesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcastMessagesServiceInterface) EXPECT() *MockBroadcastMessagesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateBroadcastMessage mocks base method.
func (m *MockBroadcastMessagesServiceInterface) CreateBroadcastMessage(opt *gitlab.CreateBroadcastMessageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBroadcastMessage", varargs...)
	ret0, _ := ret[0].(*gitlab.BroadcastMessage)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBroadcastMessage indicates an expected call of CreateBroadcastMessage.
func (mr *MockBroadcastMessagesServiceInterfaceMockRecorder) CreateBroadcastMessage(opt any, options ...any) *MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBroadcastMessage", reflect.TypeOf((*MockBroadcastMessagesServiceInterface)(nil).CreateBroadcastMessage), varargs...)
	return &MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall{Call: call}
}

// MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall wrap *gomock.Call
type MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall) Return(arg0 *gitlab.BroadcastMessage, arg1 *gitlab.Response, arg2 error) *MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall) Do(f func(*gitlab.CreateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall) DoAndReturn(f func(*gitlab.CreateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceCreateBroadcastMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteBroadcastMessage mocks base method.
func (m *MockBroadcastMessagesServiceInterface) DeleteBroadcastMessage(broadcast int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{broadcast}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBroadcastMessage", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBroadcastMessage indicates an expected call of DeleteBroadcastMessage.
func (mr *MockBroadcastMessagesServiceInterfaceMockRecorder) DeleteBroadcastMessage(broadcast any, options ...any) *MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{broadcast}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBroadcastMessage", reflect.TypeOf((*MockBroadcastMessagesServiceInterface)(nil).DeleteBroadcastMessage), varargs...)
	return &MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall{Call: call}
}

// MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall wrap *gomock.Call
type MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall) Return(arg0 *gitlab.Response, arg1 error) *MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceDeleteBroadcastMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBroadcastMessage mocks base method.
func (m *MockBroadcastMessagesServiceInterface) GetBroadcastMessage(broadcast int, options ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{broadcast}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBroadcastMessage", varargs...)
	ret0, _ := ret[0].(*gitlab.BroadcastMessage)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBroadcastMessage indicates an expected call of GetBroadcastMessage.
func (mr *MockBroadcastMessagesServiceInterfaceMockRecorder) GetBroadcastMessage(broadcast any, options ...any) *MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{broadcast}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastMessage", reflect.TypeOf((*MockBroadcastMessagesServiceInterface)(nil).GetBroadcastMessage), varargs...)
	return &MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall{Call: call}
}

// MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall wrap *gomock.Call
type MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall) Return(arg0 *gitlab.BroadcastMessage, arg1 *gitlab.Response, arg2 error) *MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceGetBroadcastMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListBroadcastMessages mocks base method.
func (m *MockBroadcastMessagesServiceInterface) ListBroadcastMessages(opt *gitlab.ListBroadcastMessagesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BroadcastMessage, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBroadcastMessages", varargs...)
	ret0, _ := ret[0].([]*gitlab.BroadcastMessage)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBroadcastMessages indicates an expected call of ListBroadcastMessages.
func (mr *MockBroadcastMessagesServiceInterfaceMockRecorder) ListBroadcastMessages(opt any, options ...any) *MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBroadcastMessages", reflect.TypeOf((*MockBroadcastMessagesServiceInterface)(nil).ListBroadcastMessages), varargs...)
	return &MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall{Call: call}
}

// MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall wrap *gomock.Call
type MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall) Return(arg0 []*gitlab.BroadcastMessage, arg1 *gitlab.Response, arg2 error) *MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall) Do(f func(*gitlab.ListBroadcastMessagesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BroadcastMessage, *gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall) DoAndReturn(f func(*gitlab.ListBroadcastMessagesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BroadcastMessage, *gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceListBroadcastMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateBroadcastMessage mocks base method.
func (m *MockBroadcastMessagesServiceInterface) UpdateBroadcastMessage(broadcast int, opt *gitlab.UpdateBroadcastMessageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{broadcast, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBroadcastMessage", varargs...)
	ret0, _ := ret[0].(*gitlab.BroadcastMessage)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateBroadcastMessage indicates an expected call of UpdateBroadcastMessage.
func (mr *MockBroadcastMessagesServiceInterfaceMockRecorder) UpdateBroadcastMessage(broadcast, opt any, options ...any) *MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{broadcast, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBroadcastMessage", reflect.TypeOf((*MockBroadcastMessagesServiceInterface)(nil).UpdateBroadcastMessage), varargs...)
	return &MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall{Call: call}
}

// MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall wrap *gomock.Call
type MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall) Return(arg0 *gitlab.BroadcastMessage, arg1 *gitlab.Response, arg2 error) *MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall) Do(f func(int, *gitlab.UpdateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall) DoAndReturn(f func(int, *gitlab.UpdateBroadcastMessageOptions, ...gitlab.RequestOptionFunc) (*gitlab.BroadcastMessage, *gitlab.Response, error)) *MockBroadcastMessagesServiceInterfaceUpdateBroadcastMessageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
