// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GitIgnoreTemplatesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=gitignore_templates_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GitIgnoreTemplatesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGitIgnoreTemplatesServiceInterface is a mock of GitIgnoreTemplatesServiceInterface interface.
type MockGitIgnoreTemplatesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitIgnoreTemplatesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGitIgnoreTemplatesServiceInterfaceMockRecorder is the mock recorder for MockGitIgnoreTemplatesServiceInterface.
type MockGitIgnoreTemplatesServiceInterfaceMockRecorder struct {
	mock *MockGitIgnoreTemplatesServiceInterface
}

// NewMockGitIgnoreTemplatesServiceInterface creates a new mock instance.
func NewMockGitIgnoreTemplatesServiceInterface(ctrl *gomock.Controller) *MockGitIgnoreTemplatesServiceInterface {
	mock := &MockGitIgnoreTemplatesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGitIgnoreTemplatesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitIgnoreTemplatesServiceInterface) EXPECT() *MockGitIgnoreTemplatesServiceInterfaceMockRecorder {
	return m.recorder
}

// GetTemplate mocks base method.
func (m *MockGitIgnoreTemplatesServiceInterface) GetTemplate(arg0 string, arg1 ...gitlab.RequestOptionFunc) (*gitlab.GitIgnoreTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplate", varargs...)
	ret0, _ := ret[0].(*gitlab.GitIgnoreTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockGitIgnoreTemplatesServiceInterfaceMockRecorder) GetTemplate(arg0 any, arg1 ...any) *MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockGitIgnoreTemplatesServiceInterface)(nil).GetTemplate), varargs...)
	return &MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall{Call: call}
}

// MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall wrap *gomock.Call
type MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall) Return(arg0 *gitlab.GitIgnoreTemplate, arg1 *gitlab.Response, arg2 error) *MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall) Do(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.GitIgnoreTemplate, *gitlab.Response, error)) *MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall) DoAndReturn(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.GitIgnoreTemplate, *gitlab.Response, error)) *MockGitIgnoreTemplatesServiceInterfaceGetTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListTemplates mocks base method.
func (m *MockGitIgnoreTemplatesServiceInterface) ListTemplates(arg0 *gitlab.ListTemplatesOptions, arg1 ...gitlab.RequestOptionFunc) ([]*gitlab.GitIgnoreTemplateListItem, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplates", varargs...)
	ret0, _ := ret[0].([]*gitlab.GitIgnoreTemplateListItem)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTemplates indicates an expected call of ListTemplates.
func (mr *MockGitIgnoreTemplatesServiceInterfaceMockRecorder) ListTemplates(arg0 any, arg1 ...any) *MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockGitIgnoreTemplatesServiceInterface)(nil).ListTemplates), varargs...)
	return &MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall{Call: call}
}

// MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall wrap *gomock.Call
type MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall) Return(arg0 []*gitlab.GitIgnoreTemplateListItem, arg1 *gitlab.Response, arg2 error) *MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall) Do(f func(*gitlab.ListTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GitIgnoreTemplateListItem, *gitlab.Response, error)) *MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall) DoAndReturn(f func(*gitlab.ListTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GitIgnoreTemplateListItem, *gitlab.Response, error)) *MockGitIgnoreTemplatesServiceInterfaceListTemplatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
