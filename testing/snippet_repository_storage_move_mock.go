// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: SnippetRepositoryStorageMoveServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=snippet_repository_storage_move_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go SnippetRepositoryStorageMoveServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockSnippetRepositoryStorageMoveServiceInterface is a mock of SnippetRepositoryStorageMoveServiceInterface interface.
type MockSnippetRepositoryStorageMoveServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder is the mock recorder for MockSnippetRepositoryStorageMoveServiceInterface.
type MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder struct {
	mock *MockSnippetRepositoryStorageMoveServiceInterface
}

// NewMockSnippetRepositoryStorageMoveServiceInterface creates a new mock instance.
func NewMockSnippetRepositoryStorageMoveServiceInterface(ctrl *gomock.Controller) *MockSnippetRepositoryStorageMoveServiceInterface {
	mock := &MockSnippetRepositoryStorageMoveServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnippetRepositoryStorageMoveServiceInterface) EXPECT() *MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder {
	return m.recorder
}

// GetStorageMove mocks base method.
func (m *MockSnippetRepositoryStorageMoveServiceInterface) GetStorageMove(repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{repositoryStorage}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageMove", varargs...)
	ret0, _ := ret[0].(*gitlab.SnippetRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageMove indicates an expected call of GetStorageMove.
func (mr *MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder) GetStorageMove(repositoryStorage any, options ...any) *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{repositoryStorage}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageMove", reflect.TypeOf((*MockSnippetRepositoryStorageMoveServiceInterface)(nil).GetStorageMove), varargs...)
	return &MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall{Call: call}
}

// MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall wrap *gomock.Call
type MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall) Return(arg0 *gitlab.SnippetRepositoryStorageMove, arg1 *gitlab.Response, arg2 error) *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStorageMoveForSnippet mocks base method.
func (m *MockSnippetRepositoryStorageMoveServiceInterface) GetStorageMoveForSnippet(snippet, repositoryStorage int, options ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{snippet, repositoryStorage}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStorageMoveForSnippet", varargs...)
	ret0, _ := ret[0].(*gitlab.SnippetRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStorageMoveForSnippet indicates an expected call of GetStorageMoveForSnippet.
func (mr *MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder) GetStorageMoveForSnippet(snippet, repositoryStorage any, options ...any) *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{snippet, repositoryStorage}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageMoveForSnippet", reflect.TypeOf((*MockSnippetRepositoryStorageMoveServiceInterface)(nil).GetStorageMoveForSnippet), varargs...)
	return &MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall{Call: call}
}

// MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall wrap *gomock.Call
type MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall) Return(arg0 *gitlab.SnippetRepositoryStorageMove, arg1 *gitlab.Response, arg2 error) *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall) Do(f func(int, int, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall) DoAndReturn(f func(int, int, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceGetStorageMoveForSnippetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetrieveAllStorageMoves mocks base method.
func (m *MockSnippetRepositoryStorageMoveServiceInterface) RetrieveAllStorageMoves(opts gitlab.RetrieveAllSnippetStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllStorageMoves", varargs...)
	ret0, _ := ret[0].([]*gitlab.SnippetRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveAllStorageMoves indicates an expected call of RetrieveAllStorageMoves.
func (mr *MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder) RetrieveAllStorageMoves(opts any, options ...any) *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllStorageMoves", reflect.TypeOf((*MockSnippetRepositoryStorageMoveServiceInterface)(nil).RetrieveAllStorageMoves), varargs...)
	return &MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall{Call: call}
}

// MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall wrap *gomock.Call
type MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall) Return(arg0 []*gitlab.SnippetRepositoryStorageMove, arg1 *gitlab.Response, arg2 error) *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall) Do(f func(gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall) DoAndReturn(f func(gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetrieveAllStorageMovesForSnippet mocks base method.
func (m *MockSnippetRepositoryStorageMoveServiceInterface) RetrieveAllStorageMovesForSnippet(snippet int, opts gitlab.RetrieveAllSnippetStorageMovesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{snippet, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveAllStorageMovesForSnippet", varargs...)
	ret0, _ := ret[0].([]*gitlab.SnippetRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveAllStorageMovesForSnippet indicates an expected call of RetrieveAllStorageMovesForSnippet.
func (mr *MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder) RetrieveAllStorageMovesForSnippet(snippet, opts any, options ...any) *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{snippet, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllStorageMovesForSnippet", reflect.TypeOf((*MockSnippetRepositoryStorageMoveServiceInterface)(nil).RetrieveAllStorageMovesForSnippet), varargs...)
	return &MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall{Call: call}
}

// MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall wrap *gomock.Call
type MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall) Return(arg0 []*gitlab.SnippetRepositoryStorageMove, arg1 *gitlab.Response, arg2 error) *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall) Do(f func(int, gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall) DoAndReturn(f func(int, gitlab.RetrieveAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceRetrieveAllStorageMovesForSnippetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleAllStorageMoves mocks base method.
func (m *MockSnippetRepositoryStorageMoveServiceInterface) ScheduleAllStorageMoves(opts gitlab.ScheduleAllSnippetStorageMovesOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleAllStorageMoves", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleAllStorageMoves indicates an expected call of ScheduleAllStorageMoves.
func (mr *MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder) ScheduleAllStorageMoves(opts any, options ...any) *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleAllStorageMoves", reflect.TypeOf((*MockSnippetRepositoryStorageMoveServiceInterface)(nil).ScheduleAllStorageMoves), varargs...)
	return &MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall{Call: call}
}

// MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall wrap *gomock.Call
type MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall) Return(arg0 *gitlab.Response, arg1 error) *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall) Do(f func(gitlab.ScheduleAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall) DoAndReturn(f func(gitlab.ScheduleAllSnippetStorageMovesOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleAllStorageMovesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleStorageMoveForSnippet mocks base method.
func (m *MockSnippetRepositoryStorageMoveServiceInterface) ScheduleStorageMoveForSnippet(snippet int, opts gitlab.ScheduleStorageMoveForSnippetOptions, options ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{snippet, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleStorageMoveForSnippet", varargs...)
	ret0, _ := ret[0].(*gitlab.SnippetRepositoryStorageMove)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScheduleStorageMoveForSnippet indicates an expected call of ScheduleStorageMoveForSnippet.
func (mr *MockSnippetRepositoryStorageMoveServiceInterfaceMockRecorder) ScheduleStorageMoveForSnippet(snippet, opts any, options ...any) *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{snippet, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleStorageMoveForSnippet", reflect.TypeOf((*MockSnippetRepositoryStorageMoveServiceInterface)(nil).ScheduleStorageMoveForSnippet), varargs...)
	return &MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall{Call: call}
}

// MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall wrap *gomock.Call
type MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall) Return(arg0 *gitlab.SnippetRepositoryStorageMove, arg1 *gitlab.Response, arg2 error) *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall) Do(f func(int, gitlab.ScheduleStorageMoveForSnippetOptions, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall) DoAndReturn(f func(int, gitlab.ScheduleStorageMoveForSnippetOptions, ...gitlab.RequestOptionFunc) (*gitlab.SnippetRepositoryStorageMove, *gitlab.Response, error)) *MockSnippetRepositoryStorageMoveServiceInterfaceScheduleStorageMoveForSnippetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
