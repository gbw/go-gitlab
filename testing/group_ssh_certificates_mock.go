// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupSSHCertificatesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_ssh_certificates_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupSSHCertificatesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupSSHCertificatesServiceInterface is a mock of GroupSSHCertificatesServiceInterface interface.
type MockGroupSSHCertificatesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupSSHCertificatesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupSSHCertificatesServiceInterfaceMockRecorder is the mock recorder for MockGroupSSHCertificatesServiceInterface.
type MockGroupSSHCertificatesServiceInterfaceMockRecorder struct {
	mock *MockGroupSSHCertificatesServiceInterface
}

// NewMockGroupSSHCertificatesServiceInterface creates a new mock instance.
func NewMockGroupSSHCertificatesServiceInterface(ctrl *gomock.Controller) *MockGroupSSHCertificatesServiceInterface {
	mock := &MockGroupSSHCertificatesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupSSHCertificatesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupSSHCertificatesServiceInterface) EXPECT() *MockGroupSSHCertificatesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateGroupSSHCertificate mocks base method.
func (m *MockGroupSSHCertificatesServiceInterface) CreateGroupSSHCertificate(gid any, opt *gitlab.CreateGroupSSHCertificateOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupSSHCertificate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupSSHCertificate", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupSSHCertificate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupSSHCertificate indicates an expected call of CreateGroupSSHCertificate.
func (mr *MockGroupSSHCertificatesServiceInterfaceMockRecorder) CreateGroupSSHCertificate(gid, opt any, options ...any) *MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupSSHCertificate", reflect.TypeOf((*MockGroupSSHCertificatesServiceInterface)(nil).CreateGroupSSHCertificate), varargs...)
	return &MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall{Call: call}
}

// MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall wrap *gomock.Call
type MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall) Return(arg0 *gitlab.GroupSSHCertificate, arg1 *gitlab.Response, arg2 error) *MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall) Do(f func(any, *gitlab.CreateGroupSSHCertificateOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupSSHCertificate, *gitlab.Response, error)) *MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall) DoAndReturn(f func(any, *gitlab.CreateGroupSSHCertificateOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupSSHCertificate, *gitlab.Response, error)) *MockGroupSSHCertificatesServiceInterfaceCreateGroupSSHCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGroupSSHCertificate mocks base method.
func (m *MockGroupSSHCertificatesServiceInterface) DeleteGroupSSHCertificate(gid any, cert int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, cert}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupSSHCertificate", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupSSHCertificate indicates an expected call of DeleteGroupSSHCertificate.
func (mr *MockGroupSSHCertificatesServiceInterfaceMockRecorder) DeleteGroupSSHCertificate(gid, cert any, options ...any) *MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, cert}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupSSHCertificate", reflect.TypeOf((*MockGroupSSHCertificatesServiceInterface)(nil).DeleteGroupSSHCertificate), varargs...)
	return &MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall{Call: call}
}

// MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall wrap *gomock.Call
type MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupSSHCertificatesServiceInterfaceDeleteGroupSSHCertificateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupSSHCertificates mocks base method.
func (m *MockGroupSSHCertificatesServiceInterface) ListGroupSSHCertificates(gid any, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSSHCertificate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupSSHCertificates", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupSSHCertificate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupSSHCertificates indicates an expected call of ListGroupSSHCertificates.
func (mr *MockGroupSSHCertificatesServiceInterfaceMockRecorder) ListGroupSSHCertificates(gid any, options ...any) *MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupSSHCertificates", reflect.TypeOf((*MockGroupSSHCertificatesServiceInterface)(nil).ListGroupSSHCertificates), varargs...)
	return &MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall{Call: call}
}

// MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall wrap *gomock.Call
type MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall) Return(arg0 []*gitlab.GroupSSHCertificate, arg1 *gitlab.Response, arg2 error) *MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall) Do(f func(any, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSSHCertificate, *gitlab.Response, error)) *MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupSSHCertificate, *gitlab.Response, error)) *MockGroupSSHCertificatesServiceInterfaceListGroupSSHCertificatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
