// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: VersionServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=version_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go VersionServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockVersionServiceInterface is a mock of VersionServiceInterface interface.
type MockVersionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockVersionServiceInterfaceMockRecorder is the mock recorder for MockVersionServiceInterface.
type MockVersionServiceInterfaceMockRecorder struct {
	mock *MockVersionServiceInterface
}

// NewMockVersionServiceInterface creates a new mock instance.
func NewMockVersionServiceInterface(ctrl *gomock.Controller) *MockVersionServiceInterface {
	mock := &MockVersionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockVersionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionServiceInterface) EXPECT() *MockVersionServiceInterfaceMockRecorder {
	return m.recorder
}

// GetVersion mocks base method.
func (m *MockVersionServiceInterface) GetVersion(options ...gitlab.RequestOptionFunc) (*gitlab.Version, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*gitlab.Version)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockVersionServiceInterfaceMockRecorder) GetVersion(options ...any) *MockVersionServiceInterfaceGetVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockVersionServiceInterface)(nil).GetVersion), options...)
	return &MockVersionServiceInterfaceGetVersionCall{Call: call}
}

// MockVersionServiceInterfaceGetVersionCall wrap *gomock.Call
type MockVersionServiceInterfaceGetVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVersionServiceInterfaceGetVersionCall) Return(arg0 *gitlab.Version, arg1 *gitlab.Response, arg2 error) *MockVersionServiceInterfaceGetVersionCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVersionServiceInterfaceGetVersionCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.Version, *gitlab.Response, error)) *MockVersionServiceInterfaceGetVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVersionServiceInterfaceGetVersionCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.Version, *gitlab.Response, error)) *MockVersionServiceInterfaceGetVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
