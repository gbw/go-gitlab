// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProjectBadgesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=project_badges_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ProjectBadgesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectBadgesServiceInterface is a mock of ProjectBadgesServiceInterface interface.
type MockProjectBadgesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectBadgesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectBadgesServiceInterfaceMockRecorder is the mock recorder for MockProjectBadgesServiceInterface.
type MockProjectBadgesServiceInterfaceMockRecorder struct {
	mock *MockProjectBadgesServiceInterface
}

// NewMockProjectBadgesServiceInterface creates a new mock instance.
func NewMockProjectBadgesServiceInterface(ctrl *gomock.Controller) *MockProjectBadgesServiceInterface {
	mock := &MockProjectBadgesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectBadgesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectBadgesServiceInterface) EXPECT() *MockProjectBadgesServiceInterfaceMockRecorder {
	return m.recorder
}

// AddProjectBadge mocks base method.
func (m *MockProjectBadgesServiceInterface) AddProjectBadge(pid any, opt *gitlab.AddProjectBadgeOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddProjectBadge indicates an expected call of AddProjectBadge.
func (mr *MockProjectBadgesServiceInterfaceMockRecorder) AddProjectBadge(pid, opt any, options ...any) *MockProjectBadgesServiceInterfaceAddProjectBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProjectBadge", reflect.TypeOf((*MockProjectBadgesServiceInterface)(nil).AddProjectBadge), varargs...)
	return &MockProjectBadgesServiceInterfaceAddProjectBadgeCall{Call: call}
}

// MockProjectBadgesServiceInterfaceAddProjectBadgeCall wrap *gomock.Call
type MockProjectBadgesServiceInterfaceAddProjectBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectBadgesServiceInterfaceAddProjectBadgeCall) Return(arg0 *gitlab.ProjectBadge, arg1 *gitlab.Response, arg2 error) *MockProjectBadgesServiceInterfaceAddProjectBadgeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectBadgesServiceInterfaceAddProjectBadgeCall) Do(f func(any, *gitlab.AddProjectBadgeOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfaceAddProjectBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectBadgesServiceInterfaceAddProjectBadgeCall) DoAndReturn(f func(any, *gitlab.AddProjectBadgeOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfaceAddProjectBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProjectBadge mocks base method.
func (m *MockProjectBadgesServiceInterface) DeleteProjectBadge(pid any, badge int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, badge}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectBadge indicates an expected call of DeleteProjectBadge.
func (mr *MockProjectBadgesServiceInterfaceMockRecorder) DeleteProjectBadge(pid, badge any, options ...any) *MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, badge}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectBadge", reflect.TypeOf((*MockProjectBadgesServiceInterface)(nil).DeleteProjectBadge), varargs...)
	return &MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall{Call: call}
}

// MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall wrap *gomock.Call
type MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall) Return(arg0 *gitlab.Response, arg1 error) *MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProjectBadgesServiceInterfaceDeleteProjectBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditProjectBadge mocks base method.
func (m *MockProjectBadgesServiceInterface) EditProjectBadge(pid any, badge int, opt *gitlab.EditProjectBadgeOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, badge, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditProjectBadge indicates an expected call of EditProjectBadge.
func (mr *MockProjectBadgesServiceInterfaceMockRecorder) EditProjectBadge(pid, badge, opt any, options ...any) *MockProjectBadgesServiceInterfaceEditProjectBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, badge, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditProjectBadge", reflect.TypeOf((*MockProjectBadgesServiceInterface)(nil).EditProjectBadge), varargs...)
	return &MockProjectBadgesServiceInterfaceEditProjectBadgeCall{Call: call}
}

// MockProjectBadgesServiceInterfaceEditProjectBadgeCall wrap *gomock.Call
type MockProjectBadgesServiceInterfaceEditProjectBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectBadgesServiceInterfaceEditProjectBadgeCall) Return(arg0 *gitlab.ProjectBadge, arg1 *gitlab.Response, arg2 error) *MockProjectBadgesServiceInterfaceEditProjectBadgeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectBadgesServiceInterfaceEditProjectBadgeCall) Do(f func(any, int, *gitlab.EditProjectBadgeOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfaceEditProjectBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectBadgesServiceInterfaceEditProjectBadgeCall) DoAndReturn(f func(any, int, *gitlab.EditProjectBadgeOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfaceEditProjectBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectBadge mocks base method.
func (m *MockProjectBadgesServiceInterface) GetProjectBadge(pid any, badge int, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, badge}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectBadge indicates an expected call of GetProjectBadge.
func (mr *MockProjectBadgesServiceInterfaceMockRecorder) GetProjectBadge(pid, badge any, options ...any) *MockProjectBadgesServiceInterfaceGetProjectBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, badge}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectBadge", reflect.TypeOf((*MockProjectBadgesServiceInterface)(nil).GetProjectBadge), varargs...)
	return &MockProjectBadgesServiceInterfaceGetProjectBadgeCall{Call: call}
}

// MockProjectBadgesServiceInterfaceGetProjectBadgeCall wrap *gomock.Call
type MockProjectBadgesServiceInterfaceGetProjectBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectBadgesServiceInterfaceGetProjectBadgeCall) Return(arg0 *gitlab.ProjectBadge, arg1 *gitlab.Response, arg2 error) *MockProjectBadgesServiceInterfaceGetProjectBadgeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectBadgesServiceInterfaceGetProjectBadgeCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfaceGetProjectBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectBadgesServiceInterfaceGetProjectBadgeCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfaceGetProjectBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListProjectBadges mocks base method.
func (m *MockProjectBadgesServiceInterface) ListProjectBadges(pid any, opt *gitlab.ListProjectBadgesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectBadges", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectBadges indicates an expected call of ListProjectBadges.
func (mr *MockProjectBadgesServiceInterfaceMockRecorder) ListProjectBadges(pid, opt any, options ...any) *MockProjectBadgesServiceInterfaceListProjectBadgesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectBadges", reflect.TypeOf((*MockProjectBadgesServiceInterface)(nil).ListProjectBadges), varargs...)
	return &MockProjectBadgesServiceInterfaceListProjectBadgesCall{Call: call}
}

// MockProjectBadgesServiceInterfaceListProjectBadgesCall wrap *gomock.Call
type MockProjectBadgesServiceInterfaceListProjectBadgesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectBadgesServiceInterfaceListProjectBadgesCall) Return(arg0 []*gitlab.ProjectBadge, arg1 *gitlab.Response, arg2 error) *MockProjectBadgesServiceInterfaceListProjectBadgesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectBadgesServiceInterfaceListProjectBadgesCall) Do(f func(any, *gitlab.ListProjectBadgesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfaceListProjectBadgesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectBadgesServiceInterfaceListProjectBadgesCall) DoAndReturn(f func(any, *gitlab.ListProjectBadgesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfaceListProjectBadgesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PreviewProjectBadge mocks base method.
func (m *MockProjectBadgesServiceInterface) PreviewProjectBadge(pid any, opt *gitlab.ProjectBadgePreviewOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreviewProjectBadge", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectBadge)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PreviewProjectBadge indicates an expected call of PreviewProjectBadge.
func (mr *MockProjectBadgesServiceInterfaceMockRecorder) PreviewProjectBadge(pid, opt any, options ...any) *MockProjectBadgesServiceInterfacePreviewProjectBadgeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewProjectBadge", reflect.TypeOf((*MockProjectBadgesServiceInterface)(nil).PreviewProjectBadge), varargs...)
	return &MockProjectBadgesServiceInterfacePreviewProjectBadgeCall{Call: call}
}

// MockProjectBadgesServiceInterfacePreviewProjectBadgeCall wrap *gomock.Call
type MockProjectBadgesServiceInterfacePreviewProjectBadgeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectBadgesServiceInterfacePreviewProjectBadgeCall) Return(arg0 *gitlab.ProjectBadge, arg1 *gitlab.Response, arg2 error) *MockProjectBadgesServiceInterfacePreviewProjectBadgeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectBadgesServiceInterfacePreviewProjectBadgeCall) Do(f func(any, *gitlab.ProjectBadgePreviewOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfacePreviewProjectBadgeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectBadgesServiceInterfacePreviewProjectBadgeCall) DoAndReturn(f func(any, *gitlab.ProjectBadgePreviewOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectBadge, *gitlab.Response, error)) *MockProjectBadgesServiceInterfacePreviewProjectBadgeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
