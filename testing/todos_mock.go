// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: TodosServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=todos_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go TodosServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockTodosServiceInterface is a mock of TodosServiceInterface interface.
type MockTodosServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTodosServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockTodosServiceInterfaceMockRecorder is the mock recorder for MockTodosServiceInterface.
type MockTodosServiceInterfaceMockRecorder struct {
	mock *MockTodosServiceInterface
}

// NewMockTodosServiceInterface creates a new mock instance.
func NewMockTodosServiceInterface(ctrl *gomock.Controller) *MockTodosServiceInterface {
	mock := &MockTodosServiceInterface{ctrl: ctrl}
	mock.recorder = &MockTodosServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodosServiceInterface) EXPECT() *MockTodosServiceInterfaceMockRecorder {
	return m.recorder
}

// ListTodos mocks base method.
func (m *MockTodosServiceInterface) ListTodos(opt *gitlab.ListTodosOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Todo, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTodos", varargs...)
	ret0, _ := ret[0].([]*gitlab.Todo)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockTodosServiceInterfaceMockRecorder) ListTodos(opt any, options ...any) *MockTodosServiceInterfaceListTodosCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockTodosServiceInterface)(nil).ListTodos), varargs...)
	return &MockTodosServiceInterfaceListTodosCall{Call: call}
}

// MockTodosServiceInterfaceListTodosCall wrap *gomock.Call
type MockTodosServiceInterfaceListTodosCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTodosServiceInterfaceListTodosCall) Return(arg0 []*gitlab.Todo, arg1 *gitlab.Response, arg2 error) *MockTodosServiceInterfaceListTodosCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTodosServiceInterfaceListTodosCall) Do(f func(*gitlab.ListTodosOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Todo, *gitlab.Response, error)) *MockTodosServiceInterfaceListTodosCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTodosServiceInterfaceListTodosCall) DoAndReturn(f func(*gitlab.ListTodosOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Todo, *gitlab.Response, error)) *MockTodosServiceInterfaceListTodosCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MarkAllTodosAsDone mocks base method.
func (m *MockTodosServiceInterface) MarkAllTodosAsDone(options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkAllTodosAsDone", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkAllTodosAsDone indicates an expected call of MarkAllTodosAsDone.
func (mr *MockTodosServiceInterfaceMockRecorder) MarkAllTodosAsDone(options ...any) *MockTodosServiceInterfaceMarkAllTodosAsDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAllTodosAsDone", reflect.TypeOf((*MockTodosServiceInterface)(nil).MarkAllTodosAsDone), options...)
	return &MockTodosServiceInterfaceMarkAllTodosAsDoneCall{Call: call}
}

// MockTodosServiceInterfaceMarkAllTodosAsDoneCall wrap *gomock.Call
type MockTodosServiceInterfaceMarkAllTodosAsDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTodosServiceInterfaceMarkAllTodosAsDoneCall) Return(arg0 *gitlab.Response, arg1 error) *MockTodosServiceInterfaceMarkAllTodosAsDoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTodosServiceInterfaceMarkAllTodosAsDoneCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockTodosServiceInterfaceMarkAllTodosAsDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTodosServiceInterfaceMarkAllTodosAsDoneCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockTodosServiceInterfaceMarkAllTodosAsDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MarkTodoAsDone mocks base method.
func (m *MockTodosServiceInterface) MarkTodoAsDone(id int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkTodoAsDone", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkTodoAsDone indicates an expected call of MarkTodoAsDone.
func (mr *MockTodosServiceInterfaceMockRecorder) MarkTodoAsDone(id any, options ...any) *MockTodosServiceInterfaceMarkTodoAsDoneCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkTodoAsDone", reflect.TypeOf((*MockTodosServiceInterface)(nil).MarkTodoAsDone), varargs...)
	return &MockTodosServiceInterfaceMarkTodoAsDoneCall{Call: call}
}

// MockTodosServiceInterfaceMarkTodoAsDoneCall wrap *gomock.Call
type MockTodosServiceInterfaceMarkTodoAsDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTodosServiceInterfaceMarkTodoAsDoneCall) Return(arg0 *gitlab.Response, arg1 error) *MockTodosServiceInterfaceMarkTodoAsDoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTodosServiceInterfaceMarkTodoAsDoneCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockTodosServiceInterfaceMarkTodoAsDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTodosServiceInterfaceMarkTodoAsDoneCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockTodosServiceInterfaceMarkTodoAsDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
