// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: MetadataServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=metadata_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go MetadataServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockMetadataServiceInterface is a mock of MetadataServiceInterface interface.
type MockMetadataServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockMetadataServiceInterfaceMockRecorder is the mock recorder for MockMetadataServiceInterface.
type MockMetadataServiceInterfaceMockRecorder struct {
	mock *MockMetadataServiceInterface
}

// NewMockMetadataServiceInterface creates a new mock instance.
func NewMockMetadataServiceInterface(ctrl *gomock.Controller) *MockMetadataServiceInterface {
	mock := &MockMetadataServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMetadataServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataServiceInterface) EXPECT() *MockMetadataServiceInterfaceMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method.
func (m *MockMetadataServiceInterface) GetMetadata(options ...gitlab.RequestOptionFunc) (*gitlab.Metadata, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetadata", varargs...)
	ret0, _ := ret[0].(*gitlab.Metadata)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockMetadataServiceInterfaceMockRecorder) GetMetadata(options ...any) *MockMetadataServiceInterfaceGetMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockMetadataServiceInterface)(nil).GetMetadata), options...)
	return &MockMetadataServiceInterfaceGetMetadataCall{Call: call}
}

// MockMetadataServiceInterfaceGetMetadataCall wrap *gomock.Call
type MockMetadataServiceInterfaceGetMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetadataServiceInterfaceGetMetadataCall) Return(arg0 *gitlab.Metadata, arg1 *gitlab.Response, arg2 error) *MockMetadataServiceInterfaceGetMetadataCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetadataServiceInterfaceGetMetadataCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.Metadata, *gitlab.Response, error)) *MockMetadataServiceInterfaceGetMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetadataServiceInterfaceGetMetadataCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.Metadata, *gitlab.Response, error)) *MockMetadataServiceInterfaceGetMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
