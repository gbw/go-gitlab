// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupSecuritySettingsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_security_settings_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupSecuritySettingsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupSecuritySettingsServiceInterface is a mock of GroupSecuritySettingsServiceInterface interface.
type MockGroupSecuritySettingsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupSecuritySettingsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupSecuritySettingsServiceInterfaceMockRecorder is the mock recorder for MockGroupSecuritySettingsServiceInterface.
type MockGroupSecuritySettingsServiceInterfaceMockRecorder struct {
	mock *MockGroupSecuritySettingsServiceInterface
}

// NewMockGroupSecuritySettingsServiceInterface creates a new mock instance.
func NewMockGroupSecuritySettingsServiceInterface(ctrl *gomock.Controller) *MockGroupSecuritySettingsServiceInterface {
	mock := &MockGroupSecuritySettingsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupSecuritySettingsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupSecuritySettingsServiceInterface) EXPECT() *MockGroupSecuritySettingsServiceInterfaceMockRecorder {
	return m.recorder
}

// UpdateSecretPushProtectionEnabledSetting mocks base method.
func (m *MockGroupSecuritySettingsServiceInterface) UpdateSecretPushProtectionEnabledSetting(gid any, opt gitlab.UpdateGroupSecuritySettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupSecuritySettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSecretPushProtectionEnabledSetting", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupSecuritySettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSecretPushProtectionEnabledSetting indicates an expected call of UpdateSecretPushProtectionEnabledSetting.
func (mr *MockGroupSecuritySettingsServiceInterfaceMockRecorder) UpdateSecretPushProtectionEnabledSetting(gid, opt any, options ...any) *MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretPushProtectionEnabledSetting", reflect.TypeOf((*MockGroupSecuritySettingsServiceInterface)(nil).UpdateSecretPushProtectionEnabledSetting), varargs...)
	return &MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall{Call: call}
}

// MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall wrap *gomock.Call
type MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall) Return(arg0 *gitlab.GroupSecuritySettings, arg1 *gitlab.Response, arg2 error) *MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall) Do(f func(any, gitlab.UpdateGroupSecuritySettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupSecuritySettings, *gitlab.Response, error)) *MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall) DoAndReturn(f func(any, gitlab.UpdateGroupSecuritySettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupSecuritySettings, *gitlab.Response, error)) *MockGroupSecuritySettingsServiceInterfaceUpdateSecretPushProtectionEnabledSettingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
