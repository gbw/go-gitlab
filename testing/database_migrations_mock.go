// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: DatabaseMigrationsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=database_migrations_mock.go -package=testing gitlab.com/gitlab-org/api/client-go DatabaseMigrationsServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseMigrationsServiceInterface is a mock of DatabaseMigrationsServiceInterface interface.
type MockDatabaseMigrationsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMigrationsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockDatabaseMigrationsServiceInterfaceMockRecorder is the mock recorder for MockDatabaseMigrationsServiceInterface.
type MockDatabaseMigrationsServiceInterfaceMockRecorder struct {
	mock *MockDatabaseMigrationsServiceInterface
}

// NewMockDatabaseMigrationsServiceInterface creates a new mock instance.
func NewMockDatabaseMigrationsServiceInterface(ctrl *gomock.Controller) *MockDatabaseMigrationsServiceInterface {
	mock := &MockDatabaseMigrationsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDatabaseMigrationsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseMigrationsServiceInterface) EXPECT() *MockDatabaseMigrationsServiceInterfaceMockRecorder {
	return m.recorder
}

// MarkMigrationAsSuccessful mocks base method.
func (m *MockDatabaseMigrationsServiceInterface) MarkMigrationAsSuccessful(version int, opt *gitlab.MarkMigrationAsSuccessfulOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{version, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MarkMigrationAsSuccessful", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkMigrationAsSuccessful indicates an expected call of MarkMigrationAsSuccessful.
func (mr *MockDatabaseMigrationsServiceInterfaceMockRecorder) MarkMigrationAsSuccessful(version, opt any, options ...any) *MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{version, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMigrationAsSuccessful", reflect.TypeOf((*MockDatabaseMigrationsServiceInterface)(nil).MarkMigrationAsSuccessful), varargs...)
	return &MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall{Call: call}
}

// MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall wrap *gomock.Call
type MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall) Return(arg0 *gitlab.Response, arg1 error) *MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall) Do(f func(int, *gitlab.MarkMigrationAsSuccessfulOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall) DoAndReturn(f func(int, *gitlab.MarkMigrationAsSuccessfulOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDatabaseMigrationsServiceInterfaceMarkMigrationAsSuccessfulCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
