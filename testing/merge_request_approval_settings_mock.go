// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: MergeRequestApprovalSettingsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=merge_request_approval_settings_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go MergeRequestApprovalSettingsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockMergeRequestApprovalSettingsServiceInterface is a mock of MergeRequestApprovalSettingsServiceInterface interface.
type MockMergeRequestApprovalSettingsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMergeRequestApprovalSettingsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockMergeRequestApprovalSettingsServiceInterfaceMockRecorder is the mock recorder for MockMergeRequestApprovalSettingsServiceInterface.
type MockMergeRequestApprovalSettingsServiceInterfaceMockRecorder struct {
	mock *MockMergeRequestApprovalSettingsServiceInterface
}

// NewMockMergeRequestApprovalSettingsServiceInterface creates a new mock instance.
func NewMockMergeRequestApprovalSettingsServiceInterface(ctrl *gomock.Controller) *MockMergeRequestApprovalSettingsServiceInterface {
	mock := &MockMergeRequestApprovalSettingsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMergeRequestApprovalSettingsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMergeRequestApprovalSettingsServiceInterface) EXPECT() *MockMergeRequestApprovalSettingsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetGroupMergeRequestApprovalSettings mocks base method.
func (m *MockMergeRequestApprovalSettingsServiceInterface) GetGroupMergeRequestApprovalSettings(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupMergeRequestApprovalSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.MergeRequestApprovalSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupMergeRequestApprovalSettings indicates an expected call of GetGroupMergeRequestApprovalSettings.
func (mr *MockMergeRequestApprovalSettingsServiceInterfaceMockRecorder) GetGroupMergeRequestApprovalSettings(gid any, options ...any) *MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMergeRequestApprovalSettings", reflect.TypeOf((*MockMergeRequestApprovalSettingsServiceInterface)(nil).GetGroupMergeRequestApprovalSettings), varargs...)
	return &MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall{Call: call}
}

// MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall wrap *gomock.Call
type MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall) Return(arg0 *gitlab.MergeRequestApprovalSettings, arg1 *gitlab.Response, arg2 error) *MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MockMergeRequestApprovalSettingsServiceInterfaceGetGroupMergeRequestApprovalSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectMergeRequestApprovalSettings mocks base method.
func (m *MockMergeRequestApprovalSettingsServiceInterface) GetProjectMergeRequestApprovalSettings(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectMergeRequestApprovalSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.MergeRequestApprovalSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectMergeRequestApprovalSettings indicates an expected call of GetProjectMergeRequestApprovalSettings.
func (mr *MockMergeRequestApprovalSettingsServiceInterfaceMockRecorder) GetProjectMergeRequestApprovalSettings(pid any, options ...any) *MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectMergeRequestApprovalSettings", reflect.TypeOf((*MockMergeRequestApprovalSettingsServiceInterface)(nil).GetProjectMergeRequestApprovalSettings), varargs...)
	return &MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall{Call: call}
}

// MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall wrap *gomock.Call
type MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall) Return(arg0 *gitlab.MergeRequestApprovalSettings, arg1 *gitlab.Response, arg2 error) *MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MockMergeRequestApprovalSettingsServiceInterfaceGetProjectMergeRequestApprovalSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateGroupMergeRequestApprovalSettings mocks base method.
func (m *MockMergeRequestApprovalSettingsServiceInterface) UpdateGroupMergeRequestApprovalSettings(gid any, opt *gitlab.UpdateMergeRequestApprovalSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupMergeRequestApprovalSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.MergeRequestApprovalSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateGroupMergeRequestApprovalSettings indicates an expected call of UpdateGroupMergeRequestApprovalSettings.
func (mr *MockMergeRequestApprovalSettingsServiceInterfaceMockRecorder) UpdateGroupMergeRequestApprovalSettings(gid, opt any, options ...any) *MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupMergeRequestApprovalSettings", reflect.TypeOf((*MockMergeRequestApprovalSettingsServiceInterface)(nil).UpdateGroupMergeRequestApprovalSettings), varargs...)
	return &MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall{Call: call}
}

// MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall wrap *gomock.Call
type MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall) Return(arg0 *gitlab.MergeRequestApprovalSettings, arg1 *gitlab.Response, arg2 error) *MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall) Do(f func(any, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall) DoAndReturn(f func(any, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MockMergeRequestApprovalSettingsServiceInterfaceUpdateGroupMergeRequestApprovalSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProjectMergeRequestApprovalSettings mocks base method.
func (m *MockMergeRequestApprovalSettingsServiceInterface) UpdateProjectMergeRequestApprovalSettings(pid any, opt *gitlab.UpdateMergeRequestApprovalSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProjectMergeRequestApprovalSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.MergeRequestApprovalSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProjectMergeRequestApprovalSettings indicates an expected call of UpdateProjectMergeRequestApprovalSettings.
func (mr *MockMergeRequestApprovalSettingsServiceInterfaceMockRecorder) UpdateProjectMergeRequestApprovalSettings(pid, opt any, options ...any) *MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectMergeRequestApprovalSettings", reflect.TypeOf((*MockMergeRequestApprovalSettingsServiceInterface)(nil).UpdateProjectMergeRequestApprovalSettings), varargs...)
	return &MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall{Call: call}
}

// MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall wrap *gomock.Call
type MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall) Return(arg0 *gitlab.MergeRequestApprovalSettings, arg1 *gitlab.Response, arg2 error) *MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall) Do(f func(any, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall) DoAndReturn(f func(any, *gitlab.UpdateMergeRequestApprovalSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.MergeRequestApprovalSettings, *gitlab.Response, error)) *MockMergeRequestApprovalSettingsServiceInterfaceUpdateProjectMergeRequestApprovalSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
