// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: LicenseTemplatesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=license_templates_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go LicenseTemplatesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockLicenseTemplatesServiceInterface is a mock of LicenseTemplatesServiceInterface interface.
type MockLicenseTemplatesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseTemplatesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockLicenseTemplatesServiceInterfaceMockRecorder is the mock recorder for MockLicenseTemplatesServiceInterface.
type MockLicenseTemplatesServiceInterfaceMockRecorder struct {
	mock *MockLicenseTemplatesServiceInterface
}

// NewMockLicenseTemplatesServiceInterface creates a new mock instance.
func NewMockLicenseTemplatesServiceInterface(ctrl *gomock.Controller) *MockLicenseTemplatesServiceInterface {
	mock := &MockLicenseTemplatesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockLicenseTemplatesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLicenseTemplatesServiceInterface) EXPECT() *MockLicenseTemplatesServiceInterfaceMockRecorder {
	return m.recorder
}

// GetLicenseTemplate mocks base method.
func (m *MockLicenseTemplatesServiceInterface) GetLicenseTemplate(template string, opt *gitlab.GetLicenseTemplateOptions, options ...gitlab.RequestOptionFunc) (*gitlab.LicenseTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{template, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLicenseTemplate", varargs...)
	ret0, _ := ret[0].(*gitlab.LicenseTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLicenseTemplate indicates an expected call of GetLicenseTemplate.
func (mr *MockLicenseTemplatesServiceInterfaceMockRecorder) GetLicenseTemplate(template, opt any, options ...any) *MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{template, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseTemplate", reflect.TypeOf((*MockLicenseTemplatesServiceInterface)(nil).GetLicenseTemplate), varargs...)
	return &MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall{Call: call}
}

// MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall wrap *gomock.Call
type MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall) Return(arg0 *gitlab.LicenseTemplate, arg1 *gitlab.Response, arg2 error) *MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall) Do(f func(string, *gitlab.GetLicenseTemplateOptions, ...gitlab.RequestOptionFunc) (*gitlab.LicenseTemplate, *gitlab.Response, error)) *MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall) DoAndReturn(f func(string, *gitlab.GetLicenseTemplateOptions, ...gitlab.RequestOptionFunc) (*gitlab.LicenseTemplate, *gitlab.Response, error)) *MockLicenseTemplatesServiceInterfaceGetLicenseTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListLicenseTemplates mocks base method.
func (m *MockLicenseTemplatesServiceInterface) ListLicenseTemplates(opt *gitlab.ListLicenseTemplatesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.LicenseTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListLicenseTemplates", varargs...)
	ret0, _ := ret[0].([]*gitlab.LicenseTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLicenseTemplates indicates an expected call of ListLicenseTemplates.
func (mr *MockLicenseTemplatesServiceInterfaceMockRecorder) ListLicenseTemplates(opt any, options ...any) *MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLicenseTemplates", reflect.TypeOf((*MockLicenseTemplatesServiceInterface)(nil).ListLicenseTemplates), varargs...)
	return &MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall{Call: call}
}

// MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall wrap *gomock.Call
type MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall) Return(arg0 []*gitlab.LicenseTemplate, arg1 *gitlab.Response, arg2 error) *MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall) Do(f func(*gitlab.ListLicenseTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.LicenseTemplate, *gitlab.Response, error)) *MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall) DoAndReturn(f func(*gitlab.ListLicenseTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.LicenseTemplate, *gitlab.Response, error)) *MockLicenseTemplatesServiceInterfaceListLicenseTemplatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
