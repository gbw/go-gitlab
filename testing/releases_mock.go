// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ReleasesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=releases_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ReleasesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockReleasesServiceInterface is a mock of ReleasesServiceInterface interface.
type MockReleasesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReleasesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockReleasesServiceInterfaceMockRecorder is the mock recorder for MockReleasesServiceInterface.
type MockReleasesServiceInterfaceMockRecorder struct {
	mock *MockReleasesServiceInterface
}

// NewMockReleasesServiceInterface creates a new mock instance.
func NewMockReleasesServiceInterface(ctrl *gomock.Controller) *MockReleasesServiceInterface {
	mock := &MockReleasesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockReleasesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReleasesServiceInterface) EXPECT() *MockReleasesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateRelease mocks base method.
func (m *MockReleasesServiceInterface) CreateRelease(pid any, opts *gitlab.CreateReleaseOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRelease", varargs...)
	ret0, _ := ret[0].(*gitlab.Release)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRelease indicates an expected call of CreateRelease.
func (mr *MockReleasesServiceInterfaceMockRecorder) CreateRelease(pid, opts any, options ...any) *MockReleasesServiceInterfaceCreateReleaseCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRelease", reflect.TypeOf((*MockReleasesServiceInterface)(nil).CreateRelease), varargs...)
	return &MockReleasesServiceInterfaceCreateReleaseCall{Call: call}
}

// MockReleasesServiceInterfaceCreateReleaseCall wrap *gomock.Call
type MockReleasesServiceInterfaceCreateReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleasesServiceInterfaceCreateReleaseCall) Return(arg0 *gitlab.Release, arg1 *gitlab.Response, arg2 error) *MockReleasesServiceInterfaceCreateReleaseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleasesServiceInterfaceCreateReleaseCall) Do(f func(any, *gitlab.CreateReleaseOptions, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceCreateReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleasesServiceInterfaceCreateReleaseCall) DoAndReturn(f func(any, *gitlab.CreateReleaseOptions, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceCreateReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRelease mocks base method.
func (m *MockReleasesServiceInterface) DeleteRelease(pid any, tagName string, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRelease", varargs...)
	ret0, _ := ret[0].(*gitlab.Release)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteRelease indicates an expected call of DeleteRelease.
func (mr *MockReleasesServiceInterfaceMockRecorder) DeleteRelease(pid, tagName any, options ...any) *MockReleasesServiceInterfaceDeleteReleaseCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelease", reflect.TypeOf((*MockReleasesServiceInterface)(nil).DeleteRelease), varargs...)
	return &MockReleasesServiceInterfaceDeleteReleaseCall{Call: call}
}

// MockReleasesServiceInterfaceDeleteReleaseCall wrap *gomock.Call
type MockReleasesServiceInterfaceDeleteReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleasesServiceInterfaceDeleteReleaseCall) Return(arg0 *gitlab.Release, arg1 *gitlab.Response, arg2 error) *MockReleasesServiceInterfaceDeleteReleaseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleasesServiceInterfaceDeleteReleaseCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceDeleteReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleasesServiceInterfaceDeleteReleaseCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceDeleteReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLatestRelease mocks base method.
func (m *MockReleasesServiceInterface) GetLatestRelease(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestRelease", varargs...)
	ret0, _ := ret[0].(*gitlab.Release)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestRelease indicates an expected call of GetLatestRelease.
func (mr *MockReleasesServiceInterfaceMockRecorder) GetLatestRelease(pid any, options ...any) *MockReleasesServiceInterfaceGetLatestReleaseCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockReleasesServiceInterface)(nil).GetLatestRelease), varargs...)
	return &MockReleasesServiceInterfaceGetLatestReleaseCall{Call: call}
}

// MockReleasesServiceInterfaceGetLatestReleaseCall wrap *gomock.Call
type MockReleasesServiceInterfaceGetLatestReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleasesServiceInterfaceGetLatestReleaseCall) Return(arg0 *gitlab.Release, arg1 *gitlab.Response, arg2 error) *MockReleasesServiceInterfaceGetLatestReleaseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleasesServiceInterfaceGetLatestReleaseCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceGetLatestReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleasesServiceInterfaceGetLatestReleaseCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceGetLatestReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelease mocks base method.
func (m *MockReleasesServiceInterface) GetRelease(pid any, tagName string, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelease", varargs...)
	ret0, _ := ret[0].(*gitlab.Release)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRelease indicates an expected call of GetRelease.
func (mr *MockReleasesServiceInterfaceMockRecorder) GetRelease(pid, tagName any, options ...any) *MockReleasesServiceInterfaceGetReleaseCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockReleasesServiceInterface)(nil).GetRelease), varargs...)
	return &MockReleasesServiceInterfaceGetReleaseCall{Call: call}
}

// MockReleasesServiceInterfaceGetReleaseCall wrap *gomock.Call
type MockReleasesServiceInterfaceGetReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleasesServiceInterfaceGetReleaseCall) Return(arg0 *gitlab.Release, arg1 *gitlab.Response, arg2 error) *MockReleasesServiceInterfaceGetReleaseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleasesServiceInterfaceGetReleaseCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceGetReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleasesServiceInterfaceGetReleaseCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceGetReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListReleases mocks base method.
func (m *MockReleasesServiceInterface) ListReleases(pid any, opt *gitlab.ListReleasesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReleases", varargs...)
	ret0, _ := ret[0].([]*gitlab.Release)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReleases indicates an expected call of ListReleases.
func (mr *MockReleasesServiceInterfaceMockRecorder) ListReleases(pid, opt any, options ...any) *MockReleasesServiceInterfaceListReleasesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleases", reflect.TypeOf((*MockReleasesServiceInterface)(nil).ListReleases), varargs...)
	return &MockReleasesServiceInterfaceListReleasesCall{Call: call}
}

// MockReleasesServiceInterfaceListReleasesCall wrap *gomock.Call
type MockReleasesServiceInterfaceListReleasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleasesServiceInterfaceListReleasesCall) Return(arg0 []*gitlab.Release, arg1 *gitlab.Response, arg2 error) *MockReleasesServiceInterfaceListReleasesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleasesServiceInterfaceListReleasesCall) Do(f func(any, *gitlab.ListReleasesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceListReleasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleasesServiceInterfaceListReleasesCall) DoAndReturn(f func(any, *gitlab.ListReleasesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceListReleasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateRelease mocks base method.
func (m *MockReleasesServiceInterface) UpdateRelease(pid any, tagName string, opts *gitlab.UpdateReleaseOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRelease", varargs...)
	ret0, _ := ret[0].(*gitlab.Release)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateRelease indicates an expected call of UpdateRelease.
func (mr *MockReleasesServiceInterfaceMockRecorder) UpdateRelease(pid, tagName, opts any, options ...any) *MockReleasesServiceInterfaceUpdateReleaseCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelease", reflect.TypeOf((*MockReleasesServiceInterface)(nil).UpdateRelease), varargs...)
	return &MockReleasesServiceInterfaceUpdateReleaseCall{Call: call}
}

// MockReleasesServiceInterfaceUpdateReleaseCall wrap *gomock.Call
type MockReleasesServiceInterfaceUpdateReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleasesServiceInterfaceUpdateReleaseCall) Return(arg0 *gitlab.Release, arg1 *gitlab.Response, arg2 error) *MockReleasesServiceInterfaceUpdateReleaseCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleasesServiceInterfaceUpdateReleaseCall) Do(f func(any, string, *gitlab.UpdateReleaseOptions, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceUpdateReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleasesServiceInterfaceUpdateReleaseCall) DoAndReturn(f func(any, string, *gitlab.UpdateReleaseOptions, ...gitlab.RequestOptionFunc) (*gitlab.Release, *gitlab.Response, error)) *MockReleasesServiceInterfaceUpdateReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
