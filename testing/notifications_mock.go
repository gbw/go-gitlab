// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: NotificationSettingsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=notifications_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go NotificationSettingsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockNotificationSettingsServiceInterface is a mock of NotificationSettingsServiceInterface interface.
type MockNotificationSettingsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationSettingsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockNotificationSettingsServiceInterfaceMockRecorder is the mock recorder for MockNotificationSettingsServiceInterface.
type MockNotificationSettingsServiceInterfaceMockRecorder struct {
	mock *MockNotificationSettingsServiceInterface
}

// NewMockNotificationSettingsServiceInterface creates a new mock instance.
func NewMockNotificationSettingsServiceInterface(ctrl *gomock.Controller) *MockNotificationSettingsServiceInterface {
	mock := &MockNotificationSettingsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockNotificationSettingsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationSettingsServiceInterface) EXPECT() *MockNotificationSettingsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetGlobalSettings mocks base method.
func (m *MockNotificationSettingsServiceInterface) GetGlobalSettings(options ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlobalSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.NotificationSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGlobalSettings indicates an expected call of GetGlobalSettings.
func (mr *MockNotificationSettingsServiceInterfaceMockRecorder) GetGlobalSettings(options ...any) *MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalSettings", reflect.TypeOf((*MockNotificationSettingsServiceInterface)(nil).GetGlobalSettings), options...)
	return &MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall{Call: call}
}

// MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall wrap *gomock.Call
type MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall) Return(arg0 *gitlab.NotificationSettings, arg1 *gitlab.Response, arg2 error) *MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceGetGlobalSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSettingsForGroup mocks base method.
func (m *MockNotificationSettingsServiceInterface) GetSettingsForGroup(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettingsForGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.NotificationSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSettingsForGroup indicates an expected call of GetSettingsForGroup.
func (mr *MockNotificationSettingsServiceInterfaceMockRecorder) GetSettingsForGroup(gid any, options ...any) *MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsForGroup", reflect.TypeOf((*MockNotificationSettingsServiceInterface)(nil).GetSettingsForGroup), varargs...)
	return &MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall{Call: call}
}

// MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall wrap *gomock.Call
type MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall) Return(arg0 *gitlab.NotificationSettings, arg1 *gitlab.Response, arg2 error) *MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceGetSettingsForGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSettingsForProject mocks base method.
func (m *MockNotificationSettingsServiceInterface) GetSettingsForProject(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSettingsForProject", varargs...)
	ret0, _ := ret[0].(*gitlab.NotificationSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSettingsForProject indicates an expected call of GetSettingsForProject.
func (mr *MockNotificationSettingsServiceInterfaceMockRecorder) GetSettingsForProject(pid any, options ...any) *MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSettingsForProject", reflect.TypeOf((*MockNotificationSettingsServiceInterface)(nil).GetSettingsForProject), varargs...)
	return &MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall{Call: call}
}

// MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall wrap *gomock.Call
type MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall) Return(arg0 *gitlab.NotificationSettings, arg1 *gitlab.Response, arg2 error) *MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceGetSettingsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateGlobalSettings mocks base method.
func (m *MockNotificationSettingsServiceInterface) UpdateGlobalSettings(opt *gitlab.NotificationSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGlobalSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.NotificationSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateGlobalSettings indicates an expected call of UpdateGlobalSettings.
func (mr *MockNotificationSettingsServiceInterfaceMockRecorder) UpdateGlobalSettings(opt any, options ...any) *MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGlobalSettings", reflect.TypeOf((*MockNotificationSettingsServiceInterface)(nil).UpdateGlobalSettings), varargs...)
	return &MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall{Call: call}
}

// MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall wrap *gomock.Call
type MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall) Return(arg0 *gitlab.NotificationSettings, arg1 *gitlab.Response, arg2 error) *MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall) Do(f func(*gitlab.NotificationSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall) DoAndReturn(f func(*gitlab.NotificationSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceUpdateGlobalSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSettingsForGroup mocks base method.
func (m *MockNotificationSettingsServiceInterface) UpdateSettingsForGroup(gid any, opt *gitlab.NotificationSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSettingsForGroup", varargs...)
	ret0, _ := ret[0].(*gitlab.NotificationSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSettingsForGroup indicates an expected call of UpdateSettingsForGroup.
func (mr *MockNotificationSettingsServiceInterfaceMockRecorder) UpdateSettingsForGroup(gid, opt any, options ...any) *MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettingsForGroup", reflect.TypeOf((*MockNotificationSettingsServiceInterface)(nil).UpdateSettingsForGroup), varargs...)
	return &MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall{Call: call}
}

// MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall wrap *gomock.Call
type MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall) Return(arg0 *gitlab.NotificationSettings, arg1 *gitlab.Response, arg2 error) *MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall) Do(f func(any, *gitlab.NotificationSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall) DoAndReturn(f func(any, *gitlab.NotificationSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceUpdateSettingsForGroupCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSettingsForProject mocks base method.
func (m *MockNotificationSettingsServiceInterface) UpdateSettingsForProject(pid any, opt *gitlab.NotificationSettingsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSettingsForProject", varargs...)
	ret0, _ := ret[0].(*gitlab.NotificationSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSettingsForProject indicates an expected call of UpdateSettingsForProject.
func (mr *MockNotificationSettingsServiceInterfaceMockRecorder) UpdateSettingsForProject(pid, opt any, options ...any) *MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSettingsForProject", reflect.TypeOf((*MockNotificationSettingsServiceInterface)(nil).UpdateSettingsForProject), varargs...)
	return &MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall{Call: call}
}

// MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall wrap *gomock.Call
type MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall) Return(arg0 *gitlab.NotificationSettings, arg1 *gitlab.Response, arg2 error) *MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall) Do(f func(any, *gitlab.NotificationSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall) DoAndReturn(f func(any, *gitlab.NotificationSettingsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NotificationSettings, *gitlab.Response, error)) *MockNotificationSettingsServiceInterfaceUpdateSettingsForProjectCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
