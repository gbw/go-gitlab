// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProjectTemplatesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=project_templates_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ProjectTemplatesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectTemplatesServiceInterface is a mock of ProjectTemplatesServiceInterface interface.
type MockProjectTemplatesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectTemplatesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectTemplatesServiceInterfaceMockRecorder is the mock recorder for MockProjectTemplatesServiceInterface.
type MockProjectTemplatesServiceInterfaceMockRecorder struct {
	mock *MockProjectTemplatesServiceInterface
}

// NewMockProjectTemplatesServiceInterface creates a new mock instance.
func NewMockProjectTemplatesServiceInterface(ctrl *gomock.Controller) *MockProjectTemplatesServiceInterface {
	mock := &MockProjectTemplatesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectTemplatesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectTemplatesServiceInterface) EXPECT() *MockProjectTemplatesServiceInterfaceMockRecorder {
	return m.recorder
}

// GetProjectTemplate mocks base method.
func (m *MockProjectTemplatesServiceInterface) GetProjectTemplate(pid any, templateType, templateName string, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, templateType, templateName}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectTemplate", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectTemplate indicates an expected call of GetProjectTemplate.
func (mr *MockProjectTemplatesServiceInterfaceMockRecorder) GetProjectTemplate(pid, templateType, templateName any, options ...any) *MockProjectTemplatesServiceInterfaceGetProjectTemplateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, templateType, templateName}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectTemplate", reflect.TypeOf((*MockProjectTemplatesServiceInterface)(nil).GetProjectTemplate), varargs...)
	return &MockProjectTemplatesServiceInterfaceGetProjectTemplateCall{Call: call}
}

// MockProjectTemplatesServiceInterfaceGetProjectTemplateCall wrap *gomock.Call
type MockProjectTemplatesServiceInterfaceGetProjectTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectTemplatesServiceInterfaceGetProjectTemplateCall) Return(arg0 *gitlab.ProjectTemplate, arg1 *gitlab.Response, arg2 error) *MockProjectTemplatesServiceInterfaceGetProjectTemplateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectTemplatesServiceInterfaceGetProjectTemplateCall) Do(f func(any, string, string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectTemplate, *gitlab.Response, error)) *MockProjectTemplatesServiceInterfaceGetProjectTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectTemplatesServiceInterfaceGetProjectTemplateCall) DoAndReturn(f func(any, string, string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectTemplate, *gitlab.Response, error)) *MockProjectTemplatesServiceInterfaceGetProjectTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListTemplates mocks base method.
func (m *MockProjectTemplatesServiceInterface) ListTemplates(pid any, templateType string, opt *gitlab.ListProjectTemplatesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, templateType, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplates", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTemplates indicates an expected call of ListTemplates.
func (mr *MockProjectTemplatesServiceInterfaceMockRecorder) ListTemplates(pid, templateType, opt any, options ...any) *MockProjectTemplatesServiceInterfaceListTemplatesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, templateType, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockProjectTemplatesServiceInterface)(nil).ListTemplates), varargs...)
	return &MockProjectTemplatesServiceInterfaceListTemplatesCall{Call: call}
}

// MockProjectTemplatesServiceInterfaceListTemplatesCall wrap *gomock.Call
type MockProjectTemplatesServiceInterfaceListTemplatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectTemplatesServiceInterfaceListTemplatesCall) Return(arg0 []*gitlab.ProjectTemplate, arg1 *gitlab.Response, arg2 error) *MockProjectTemplatesServiceInterfaceListTemplatesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectTemplatesServiceInterfaceListTemplatesCall) Do(f func(any, string, *gitlab.ListProjectTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectTemplate, *gitlab.Response, error)) *MockProjectTemplatesServiceInterfaceListTemplatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectTemplatesServiceInterfaceListTemplatesCall) DoAndReturn(f func(any, string, *gitlab.ListProjectTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectTemplate, *gitlab.Response, error)) *MockProjectTemplatesServiceInterfaceListTemplatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
