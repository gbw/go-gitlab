// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: CIYMLTemplatesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=ci_yml_templates_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go CIYMLTemplatesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockCIYMLTemplatesServiceInterface is a mock of CIYMLTemplatesServiceInterface interface.
type MockCIYMLTemplatesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCIYMLTemplatesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockCIYMLTemplatesServiceInterfaceMockRecorder is the mock recorder for MockCIYMLTemplatesServiceInterface.
type MockCIYMLTemplatesServiceInterfaceMockRecorder struct {
	mock *MockCIYMLTemplatesServiceInterface
}

// NewMockCIYMLTemplatesServiceInterface creates a new mock instance.
func NewMockCIYMLTemplatesServiceInterface(ctrl *gomock.Controller) *MockCIYMLTemplatesServiceInterface {
	mock := &MockCIYMLTemplatesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCIYMLTemplatesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIYMLTemplatesServiceInterface) EXPECT() *MockCIYMLTemplatesServiceInterfaceMockRecorder {
	return m.recorder
}

// GetTemplate mocks base method.
func (m *MockCIYMLTemplatesServiceInterface) GetTemplate(key string, options ...gitlab.RequestOptionFunc) (*gitlab.CIYMLTemplate, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTemplate", varargs...)
	ret0, _ := ret[0].(*gitlab.CIYMLTemplate)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockCIYMLTemplatesServiceInterfaceMockRecorder) GetTemplate(key any, options ...any) *MockCIYMLTemplatesServiceInterfaceGetTemplateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockCIYMLTemplatesServiceInterface)(nil).GetTemplate), varargs...)
	return &MockCIYMLTemplatesServiceInterfaceGetTemplateCall{Call: call}
}

// MockCIYMLTemplatesServiceInterfaceGetTemplateCall wrap *gomock.Call
type MockCIYMLTemplatesServiceInterfaceGetTemplateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCIYMLTemplatesServiceInterfaceGetTemplateCall) Return(arg0 *gitlab.CIYMLTemplate, arg1 *gitlab.Response, arg2 error) *MockCIYMLTemplatesServiceInterfaceGetTemplateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCIYMLTemplatesServiceInterfaceGetTemplateCall) Do(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.CIYMLTemplate, *gitlab.Response, error)) *MockCIYMLTemplatesServiceInterfaceGetTemplateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCIYMLTemplatesServiceInterfaceGetTemplateCall) DoAndReturn(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.CIYMLTemplate, *gitlab.Response, error)) *MockCIYMLTemplatesServiceInterfaceGetTemplateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllTemplates mocks base method.
func (m *MockCIYMLTemplatesServiceInterface) ListAllTemplates(opt *gitlab.ListCIYMLTemplatesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.CIYMLTemplateListItem, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllTemplates", varargs...)
	ret0, _ := ret[0].([]*gitlab.CIYMLTemplateListItem)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllTemplates indicates an expected call of ListAllTemplates.
func (mr *MockCIYMLTemplatesServiceInterfaceMockRecorder) ListAllTemplates(opt any, options ...any) *MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllTemplates", reflect.TypeOf((*MockCIYMLTemplatesServiceInterface)(nil).ListAllTemplates), varargs...)
	return &MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall{Call: call}
}

// MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall wrap *gomock.Call
type MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall) Return(arg0 []*gitlab.CIYMLTemplateListItem, arg1 *gitlab.Response, arg2 error) *MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall) Do(f func(*gitlab.ListCIYMLTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.CIYMLTemplateListItem, *gitlab.Response, error)) *MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall) DoAndReturn(f func(*gitlab.ListCIYMLTemplatesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.CIYMLTemplateListItem, *gitlab.Response, error)) *MockCIYMLTemplatesServiceInterfaceListAllTemplatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
