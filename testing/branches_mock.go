// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: BranchesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=branches_mock.go -package=testing gitlab.com/gitlab-org/api/client-go BranchesServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockBranchesServiceInterface is a mock of BranchesServiceInterface interface.
type MockBranchesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBranchesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockBranchesServiceInterfaceMockRecorder is the mock recorder for MockBranchesServiceInterface.
type MockBranchesServiceInterfaceMockRecorder struct {
	mock *MockBranchesServiceInterface
}

// NewMockBranchesServiceInterface creates a new mock instance.
func NewMockBranchesServiceInterface(ctrl *gomock.Controller) *MockBranchesServiceInterface {
	mock := &MockBranchesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBranchesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchesServiceInterface) EXPECT() *MockBranchesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateBranch mocks base method.
func (m *MockBranchesServiceInterface) CreateBranch(pid any, opt *gitlab.CreateBranchOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateBranch", varargs...)
	ret0, _ := ret[0].(*gitlab.Branch)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockBranchesServiceInterfaceMockRecorder) CreateBranch(pid, opt any, options ...any) *MockBranchesServiceInterfaceCreateBranchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockBranchesServiceInterface)(nil).CreateBranch), varargs...)
	return &MockBranchesServiceInterfaceCreateBranchCall{Call: call}
}

// MockBranchesServiceInterfaceCreateBranchCall wrap *gomock.Call
type MockBranchesServiceInterfaceCreateBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBranchesServiceInterfaceCreateBranchCall) Return(arg0 *gitlab.Branch, arg1 *gitlab.Response, arg2 error) *MockBranchesServiceInterfaceCreateBranchCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBranchesServiceInterfaceCreateBranchCall) Do(f func(any, *gitlab.CreateBranchOptions, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)) *MockBranchesServiceInterfaceCreateBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBranchesServiceInterfaceCreateBranchCall) DoAndReturn(f func(any, *gitlab.CreateBranchOptions, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)) *MockBranchesServiceInterfaceCreateBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteBranch mocks base method.
func (m *MockBranchesServiceInterface) DeleteBranch(pid any, branch string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, branch}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteBranch", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockBranchesServiceInterfaceMockRecorder) DeleteBranch(pid, branch any, options ...any) *MockBranchesServiceInterfaceDeleteBranchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, branch}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockBranchesServiceInterface)(nil).DeleteBranch), varargs...)
	return &MockBranchesServiceInterfaceDeleteBranchCall{Call: call}
}

// MockBranchesServiceInterfaceDeleteBranchCall wrap *gomock.Call
type MockBranchesServiceInterfaceDeleteBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBranchesServiceInterfaceDeleteBranchCall) Return(arg0 *gitlab.Response, arg1 error) *MockBranchesServiceInterfaceDeleteBranchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBranchesServiceInterfaceDeleteBranchCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockBranchesServiceInterfaceDeleteBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBranchesServiceInterfaceDeleteBranchCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockBranchesServiceInterfaceDeleteBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteMergedBranches mocks base method.
func (m *MockBranchesServiceInterface) DeleteMergedBranches(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMergedBranches", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMergedBranches indicates an expected call of DeleteMergedBranches.
func (mr *MockBranchesServiceInterfaceMockRecorder) DeleteMergedBranches(pid any, options ...any) *MockBranchesServiceInterfaceDeleteMergedBranchesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMergedBranches", reflect.TypeOf((*MockBranchesServiceInterface)(nil).DeleteMergedBranches), varargs...)
	return &MockBranchesServiceInterfaceDeleteMergedBranchesCall{Call: call}
}

// MockBranchesServiceInterfaceDeleteMergedBranchesCall wrap *gomock.Call
type MockBranchesServiceInterfaceDeleteMergedBranchesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBranchesServiceInterfaceDeleteMergedBranchesCall) Return(arg0 *gitlab.Response, arg1 error) *MockBranchesServiceInterfaceDeleteMergedBranchesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBranchesServiceInterfaceDeleteMergedBranchesCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockBranchesServiceInterfaceDeleteMergedBranchesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBranchesServiceInterfaceDeleteMergedBranchesCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockBranchesServiceInterfaceDeleteMergedBranchesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBranch mocks base method.
func (m *MockBranchesServiceInterface) GetBranch(pid any, branch string, options ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, branch}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBranch", varargs...)
	ret0, _ := ret[0].(*gitlab.Branch)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBranch indicates an expected call of GetBranch.
func (mr *MockBranchesServiceInterfaceMockRecorder) GetBranch(pid, branch any, options ...any) *MockBranchesServiceInterfaceGetBranchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, branch}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranch", reflect.TypeOf((*MockBranchesServiceInterface)(nil).GetBranch), varargs...)
	return &MockBranchesServiceInterfaceGetBranchCall{Call: call}
}

// MockBranchesServiceInterfaceGetBranchCall wrap *gomock.Call
type MockBranchesServiceInterfaceGetBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBranchesServiceInterfaceGetBranchCall) Return(arg0 *gitlab.Branch, arg1 *gitlab.Response, arg2 error) *MockBranchesServiceInterfaceGetBranchCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBranchesServiceInterfaceGetBranchCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)) *MockBranchesServiceInterfaceGetBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBranchesServiceInterfaceGetBranchCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Branch, *gitlab.Response, error)) *MockBranchesServiceInterfaceGetBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListBranches mocks base method.
func (m *MockBranchesServiceInterface) ListBranches(pid any, opts *gitlab.ListBranchesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Branch, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBranches", varargs...)
	ret0, _ := ret[0].([]*gitlab.Branch)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBranches indicates an expected call of ListBranches.
func (mr *MockBranchesServiceInterfaceMockRecorder) ListBranches(pid, opts any, options ...any) *MockBranchesServiceInterfaceListBranchesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBranches", reflect.TypeOf((*MockBranchesServiceInterface)(nil).ListBranches), varargs...)
	return &MockBranchesServiceInterfaceListBranchesCall{Call: call}
}

// MockBranchesServiceInterfaceListBranchesCall wrap *gomock.Call
type MockBranchesServiceInterfaceListBranchesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBranchesServiceInterfaceListBranchesCall) Return(arg0 []*gitlab.Branch, arg1 *gitlab.Response, arg2 error) *MockBranchesServiceInterfaceListBranchesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBranchesServiceInterfaceListBranchesCall) Do(f func(any, *gitlab.ListBranchesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Branch, *gitlab.Response, error)) *MockBranchesServiceInterfaceListBranchesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBranchesServiceInterfaceListBranchesCall) DoAndReturn(f func(any, *gitlab.ListBranchesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Branch, *gitlab.Response, error)) *MockBranchesServiceInterfaceListBranchesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
