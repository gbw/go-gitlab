// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: NamespacesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=namespaces_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go NamespacesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockNamespacesServiceInterface is a mock of NamespacesServiceInterface interface.
type MockNamespacesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNamespacesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockNamespacesServiceInterfaceMockRecorder is the mock recorder for MockNamespacesServiceInterface.
type MockNamespacesServiceInterfaceMockRecorder struct {
	mock *MockNamespacesServiceInterface
}

// NewMockNamespacesServiceInterface creates a new mock instance.
func NewMockNamespacesServiceInterface(ctrl *gomock.Controller) *MockNamespacesServiceInterface {
	mock := &MockNamespacesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockNamespacesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespacesServiceInterface) EXPECT() *MockNamespacesServiceInterfaceMockRecorder {
	return m.recorder
}

// GetNamespace mocks base method.
func (m *MockNamespacesServiceInterface) GetNamespace(id any, options ...gitlab.RequestOptionFunc) (*gitlab.Namespace, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNamespace", varargs...)
	ret0, _ := ret[0].(*gitlab.Namespace)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockNamespacesServiceInterfaceMockRecorder) GetNamespace(id any, options ...any) *MockNamespacesServiceInterfaceGetNamespaceCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockNamespacesServiceInterface)(nil).GetNamespace), varargs...)
	return &MockNamespacesServiceInterfaceGetNamespaceCall{Call: call}
}

// MockNamespacesServiceInterfaceGetNamespaceCall wrap *gomock.Call
type MockNamespacesServiceInterfaceGetNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespacesServiceInterfaceGetNamespaceCall) Return(arg0 *gitlab.Namespace, arg1 *gitlab.Response, arg2 error) *MockNamespacesServiceInterfaceGetNamespaceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespacesServiceInterfaceGetNamespaceCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Namespace, *gitlab.Response, error)) *MockNamespacesServiceInterfaceGetNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespacesServiceInterfaceGetNamespaceCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Namespace, *gitlab.Response, error)) *MockNamespacesServiceInterfaceGetNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListNamespaces mocks base method.
func (m *MockNamespacesServiceInterface) ListNamespaces(opt *gitlab.ListNamespacesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNamespaces", varargs...)
	ret0, _ := ret[0].([]*gitlab.Namespace)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockNamespacesServiceInterfaceMockRecorder) ListNamespaces(opt any, options ...any) *MockNamespacesServiceInterfaceListNamespacesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockNamespacesServiceInterface)(nil).ListNamespaces), varargs...)
	return &MockNamespacesServiceInterfaceListNamespacesCall{Call: call}
}

// MockNamespacesServiceInterfaceListNamespacesCall wrap *gomock.Call
type MockNamespacesServiceInterfaceListNamespacesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespacesServiceInterfaceListNamespacesCall) Return(arg0 []*gitlab.Namespace, arg1 *gitlab.Response, arg2 error) *MockNamespacesServiceInterfaceListNamespacesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespacesServiceInterfaceListNamespacesCall) Do(f func(*gitlab.ListNamespacesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error)) *MockNamespacesServiceInterfaceListNamespacesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespacesServiceInterfaceListNamespacesCall) DoAndReturn(f func(*gitlab.ListNamespacesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error)) *MockNamespacesServiceInterfaceListNamespacesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceExists mocks base method.
func (m *MockNamespacesServiceInterface) NamespaceExists(id any, opt *gitlab.NamespaceExistsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.NamespaceExistance, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{id, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NamespaceExists", varargs...)
	ret0, _ := ret[0].(*gitlab.NamespaceExistance)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NamespaceExists indicates an expected call of NamespaceExists.
func (mr *MockNamespacesServiceInterfaceMockRecorder) NamespaceExists(id, opt any, options ...any) *MockNamespacesServiceInterfaceNamespaceExistsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{id, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceExists", reflect.TypeOf((*MockNamespacesServiceInterface)(nil).NamespaceExists), varargs...)
	return &MockNamespacesServiceInterfaceNamespaceExistsCall{Call: call}
}

// MockNamespacesServiceInterfaceNamespaceExistsCall wrap *gomock.Call
type MockNamespacesServiceInterfaceNamespaceExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespacesServiceInterfaceNamespaceExistsCall) Return(arg0 *gitlab.NamespaceExistance, arg1 *gitlab.Response, arg2 error) *MockNamespacesServiceInterfaceNamespaceExistsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespacesServiceInterfaceNamespaceExistsCall) Do(f func(any, *gitlab.NamespaceExistsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NamespaceExistance, *gitlab.Response, error)) *MockNamespacesServiceInterfaceNamespaceExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespacesServiceInterfaceNamespaceExistsCall) DoAndReturn(f func(any, *gitlab.NamespaceExistsOptions, ...gitlab.RequestOptionFunc) (*gitlab.NamespaceExistance, *gitlab.Response, error)) *MockNamespacesServiceInterfaceNamespaceExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SearchNamespace mocks base method.
func (m *MockNamespacesServiceInterface) SearchNamespace(query string, options ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchNamespace", varargs...)
	ret0, _ := ret[0].([]*gitlab.Namespace)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchNamespace indicates an expected call of SearchNamespace.
func (mr *MockNamespacesServiceInterfaceMockRecorder) SearchNamespace(query any, options ...any) *MockNamespacesServiceInterfaceSearchNamespaceCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchNamespace", reflect.TypeOf((*MockNamespacesServiceInterface)(nil).SearchNamespace), varargs...)
	return &MockNamespacesServiceInterfaceSearchNamespaceCall{Call: call}
}

// MockNamespacesServiceInterfaceSearchNamespaceCall wrap *gomock.Call
type MockNamespacesServiceInterfaceSearchNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNamespacesServiceInterfaceSearchNamespaceCall) Return(arg0 []*gitlab.Namespace, arg1 *gitlab.Response, arg2 error) *MockNamespacesServiceInterfaceSearchNamespaceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNamespacesServiceInterfaceSearchNamespaceCall) Do(f func(string, ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error)) *MockNamespacesServiceInterfaceSearchNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNamespacesServiceInterfaceSearchNamespaceCall) DoAndReturn(f func(string, ...gitlab.RequestOptionFunc) ([]*gitlab.Namespace, *gitlab.Response, error)) *MockNamespacesServiceInterfaceSearchNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
