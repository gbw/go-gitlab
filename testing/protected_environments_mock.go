// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProtectedEnvironmentsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=protected_environments_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ProtectedEnvironmentsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProtectedEnvironmentsServiceInterface is a mock of ProtectedEnvironmentsServiceInterface interface.
type MockProtectedEnvironmentsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProtectedEnvironmentsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProtectedEnvironmentsServiceInterfaceMockRecorder is the mock recorder for MockProtectedEnvironmentsServiceInterface.
type MockProtectedEnvironmentsServiceInterfaceMockRecorder struct {
	mock *MockProtectedEnvironmentsServiceInterface
}

// NewMockProtectedEnvironmentsServiceInterface creates a new mock instance.
func NewMockProtectedEnvironmentsServiceInterface(ctrl *gomock.Controller) *MockProtectedEnvironmentsServiceInterface {
	mock := &MockProtectedEnvironmentsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProtectedEnvironmentsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtectedEnvironmentsServiceInterface) EXPECT() *MockProtectedEnvironmentsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetProtectedEnvironment mocks base method.
func (m *MockProtectedEnvironmentsServiceInterface) GetProtectedEnvironment(pid any, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProtectedEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProtectedEnvironment indicates an expected call of GetProtectedEnvironment.
func (mr *MockProtectedEnvironmentsServiceInterfaceMockRecorder) GetProtectedEnvironment(pid, environment any, options ...any) *MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environment}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtectedEnvironment", reflect.TypeOf((*MockProtectedEnvironmentsServiceInterface)(nil).GetProtectedEnvironment), varargs...)
	return &MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall{Call: call}
}

// MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall wrap *gomock.Call
type MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall) Return(arg0 *gitlab.ProtectedEnvironment, arg1 *gitlab.Response, arg2 error) *MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceGetProtectedEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListProtectedEnvironments mocks base method.
func (m *MockProtectedEnvironmentsServiceInterface) ListProtectedEnvironments(pid any, opt *gitlab.ListProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProtectedEnvironments", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProtectedEnvironments indicates an expected call of ListProtectedEnvironments.
func (mr *MockProtectedEnvironmentsServiceInterfaceMockRecorder) ListProtectedEnvironments(pid, opt any, options ...any) *MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProtectedEnvironments", reflect.TypeOf((*MockProtectedEnvironmentsServiceInterface)(nil).ListProtectedEnvironments), varargs...)
	return &MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall{Call: call}
}

// MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall wrap *gomock.Call
type MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall) Return(arg0 []*gitlab.ProtectedEnvironment, arg1 *gitlab.Response, arg2 error) *MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall) Do(f func(any, *gitlab.ListProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall) DoAndReturn(f func(any, *gitlab.ListProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceListProtectedEnvironmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProtectRepositoryEnvironments mocks base method.
func (m *MockProtectedEnvironmentsServiceInterface) ProtectRepositoryEnvironments(pid any, opt *gitlab.ProtectRepositoryEnvironmentsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProtectRepositoryEnvironments", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProtectRepositoryEnvironments indicates an expected call of ProtectRepositoryEnvironments.
func (mr *MockProtectedEnvironmentsServiceInterfaceMockRecorder) ProtectRepositoryEnvironments(pid, opt any, options ...any) *MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectRepositoryEnvironments", reflect.TypeOf((*MockProtectedEnvironmentsServiceInterface)(nil).ProtectRepositoryEnvironments), varargs...)
	return &MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall{Call: call}
}

// MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall wrap *gomock.Call
type MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall) Return(arg0 *gitlab.ProtectedEnvironment, arg1 *gitlab.Response, arg2 error) *MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall) Do(f func(any, *gitlab.ProtectRepositoryEnvironmentsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall) DoAndReturn(f func(any, *gitlab.ProtectRepositoryEnvironmentsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceProtectRepositoryEnvironmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnprotectEnvironment mocks base method.
func (m *MockProtectedEnvironmentsServiceInterface) UnprotectEnvironment(pid any, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnprotectEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnprotectEnvironment indicates an expected call of UnprotectEnvironment.
func (mr *MockProtectedEnvironmentsServiceInterfaceMockRecorder) UnprotectEnvironment(pid, environment any, options ...any) *MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environment}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprotectEnvironment", reflect.TypeOf((*MockProtectedEnvironmentsServiceInterface)(nil).UnprotectEnvironment), varargs...)
	return &MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall{Call: call}
}

// MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall wrap *gomock.Call
type MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall) Return(arg0 *gitlab.Response, arg1 error) *MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceUnprotectEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateProtectedEnvironments mocks base method.
func (m *MockProtectedEnvironmentsServiceInterface) UpdateProtectedEnvironments(pid any, environment string, opt *gitlab.UpdateProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environment, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateProtectedEnvironments", varargs...)
	ret0, _ := ret[0].(*gitlab.ProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateProtectedEnvironments indicates an expected call of UpdateProtectedEnvironments.
func (mr *MockProtectedEnvironmentsServiceInterfaceMockRecorder) UpdateProtectedEnvironments(pid, environment, opt any, options ...any) *MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environment, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProtectedEnvironments", reflect.TypeOf((*MockProtectedEnvironmentsServiceInterface)(nil).UpdateProtectedEnvironments), varargs...)
	return &MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall{Call: call}
}

// MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall wrap *gomock.Call
type MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall) Return(arg0 *gitlab.ProtectedEnvironment, arg1 *gitlab.Response, arg2 error) *MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall) Do(f func(any, string, *gitlab.UpdateProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall) DoAndReturn(f func(any, string, *gitlab.UpdateProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProtectedEnvironment, *gitlab.Response, error)) *MockProtectedEnvironmentsServiceInterfaceUpdateProtectedEnvironmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
