// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupIterationsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_iterations_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupIterationsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupIterationsServiceInterface is a mock of GroupIterationsServiceInterface interface.
type MockGroupIterationsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupIterationsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupIterationsServiceInterfaceMockRecorder is the mock recorder for MockGroupIterationsServiceInterface.
type MockGroupIterationsServiceInterfaceMockRecorder struct {
	mock *MockGroupIterationsServiceInterface
}

// NewMockGroupIterationsServiceInterface creates a new mock instance.
func NewMockGroupIterationsServiceInterface(ctrl *gomock.Controller) *MockGroupIterationsServiceInterface {
	mock := &MockGroupIterationsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupIterationsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupIterationsServiceInterface) EXPECT() *MockGroupIterationsServiceInterfaceMockRecorder {
	return m.recorder
}

// ListGroupIterations mocks base method.
func (m *MockGroupIterationsServiceInterface) ListGroupIterations(gid any, opt *gitlab.ListGroupIterationsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIteration, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupIterations", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupIteration)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupIterations indicates an expected call of ListGroupIterations.
func (mr *MockGroupIterationsServiceInterfaceMockRecorder) ListGroupIterations(gid, opt any, options ...any) *MockGroupIterationsServiceInterfaceListGroupIterationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupIterations", reflect.TypeOf((*MockGroupIterationsServiceInterface)(nil).ListGroupIterations), varargs...)
	return &MockGroupIterationsServiceInterfaceListGroupIterationsCall{Call: call}
}

// MockGroupIterationsServiceInterfaceListGroupIterationsCall wrap *gomock.Call
type MockGroupIterationsServiceInterfaceListGroupIterationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupIterationsServiceInterfaceListGroupIterationsCall) Return(arg0 []*gitlab.GroupIteration, arg1 *gitlab.Response, arg2 error) *MockGroupIterationsServiceInterfaceListGroupIterationsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupIterationsServiceInterfaceListGroupIterationsCall) Do(f func(any, *gitlab.ListGroupIterationsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIteration, *gitlab.Response, error)) *MockGroupIterationsServiceInterfaceListGroupIterationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupIterationsServiceInterfaceListGroupIterationsCall) DoAndReturn(f func(any, *gitlab.ListGroupIterationsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupIteration, *gitlab.Response, error)) *MockGroupIterationsServiceInterfaceListGroupIterationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
