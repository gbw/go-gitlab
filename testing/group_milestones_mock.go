// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupMilestonesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_milestones_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupMilestonesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupMilestonesServiceInterface is a mock of GroupMilestonesServiceInterface interface.
type MockGroupMilestonesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMilestonesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupMilestonesServiceInterfaceMockRecorder is the mock recorder for MockGroupMilestonesServiceInterface.
type MockGroupMilestonesServiceInterfaceMockRecorder struct {
	mock *MockGroupMilestonesServiceInterface
}

// NewMockGroupMilestonesServiceInterface creates a new mock instance.
func NewMockGroupMilestonesServiceInterface(ctrl *gomock.Controller) *MockGroupMilestonesServiceInterface {
	mock := &MockGroupMilestonesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupMilestonesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupMilestonesServiceInterface) EXPECT() *MockGroupMilestonesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateGroupMilestone mocks base method.
func (m *MockGroupMilestonesServiceInterface) CreateGroupMilestone(gid any, opt *gitlab.CreateGroupMilestoneOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupMilestone", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupMilestone)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupMilestone indicates an expected call of CreateGroupMilestone.
func (mr *MockGroupMilestonesServiceInterfaceMockRecorder) CreateGroupMilestone(gid, opt any, options ...any) *MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupMilestone", reflect.TypeOf((*MockGroupMilestonesServiceInterface)(nil).CreateGroupMilestone), varargs...)
	return &MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall{Call: call}
}

// MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall wrap *gomock.Call
type MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall) Return(arg0 *gitlab.GroupMilestone, arg1 *gitlab.Response, arg2 error) *MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall) Do(f func(any, *gitlab.CreateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall) DoAndReturn(f func(any, *gitlab.CreateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceCreateGroupMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGroupMilestone mocks base method.
func (m *MockGroupMilestonesServiceInterface) DeleteGroupMilestone(pid any, milestone int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, milestone}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupMilestone", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupMilestone indicates an expected call of DeleteGroupMilestone.
func (mr *MockGroupMilestonesServiceInterfaceMockRecorder) DeleteGroupMilestone(pid, milestone any, options ...any) *MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, milestone}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupMilestone", reflect.TypeOf((*MockGroupMilestonesServiceInterface)(nil).DeleteGroupMilestone), varargs...)
	return &MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall{Call: call}
}

// MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall wrap *gomock.Call
type MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceDeleteGroupMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupMilestone mocks base method.
func (m *MockGroupMilestonesServiceInterface) GetGroupMilestone(gid any, milestone int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, milestone}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupMilestone", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupMilestone)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupMilestone indicates an expected call of GetGroupMilestone.
func (mr *MockGroupMilestonesServiceInterfaceMockRecorder) GetGroupMilestone(gid, milestone any, options ...any) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, milestone}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMilestone", reflect.TypeOf((*MockGroupMilestonesServiceInterface)(nil).GetGroupMilestone), varargs...)
	return &MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall{Call: call}
}

// MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall wrap *gomock.Call
type MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall) Return(arg0 *gitlab.GroupMilestone, arg1 *gitlab.Response, arg2 error) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupMilestoneBurndownChartEvents mocks base method.
func (m *MockGroupMilestonesServiceInterface) GetGroupMilestoneBurndownChartEvents(gid any, milestone int, opt *gitlab.GetGroupMilestoneBurndownChartEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BurndownChartEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, milestone, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupMilestoneBurndownChartEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.BurndownChartEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupMilestoneBurndownChartEvents indicates an expected call of GetGroupMilestoneBurndownChartEvents.
func (mr *MockGroupMilestonesServiceInterfaceMockRecorder) GetGroupMilestoneBurndownChartEvents(gid, milestone, opt any, options ...any) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, milestone, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMilestoneBurndownChartEvents", reflect.TypeOf((*MockGroupMilestonesServiceInterface)(nil).GetGroupMilestoneBurndownChartEvents), varargs...)
	return &MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall{Call: call}
}

// MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall wrap *gomock.Call
type MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall) Return(arg0 []*gitlab.BurndownChartEvent, arg1 *gitlab.Response, arg2 error) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall) Do(f func(any, int, *gitlab.GetGroupMilestoneBurndownChartEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BurndownChartEvent, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall) DoAndReturn(f func(any, int, *gitlab.GetGroupMilestoneBurndownChartEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BurndownChartEvent, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneBurndownChartEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupMilestoneIssues mocks base method.
func (m *MockGroupMilestonesServiceInterface) GetGroupMilestoneIssues(gid any, milestone int, opt *gitlab.GetGroupMilestoneIssuesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, milestone, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupMilestoneIssues", varargs...)
	ret0, _ := ret[0].([]*gitlab.Issue)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupMilestoneIssues indicates an expected call of GetGroupMilestoneIssues.
func (mr *MockGroupMilestonesServiceInterfaceMockRecorder) GetGroupMilestoneIssues(gid, milestone, opt any, options ...any) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, milestone, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMilestoneIssues", reflect.TypeOf((*MockGroupMilestonesServiceInterface)(nil).GetGroupMilestoneIssues), varargs...)
	return &MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall{Call: call}
}

// MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall wrap *gomock.Call
type MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall) Return(arg0 []*gitlab.Issue, arg1 *gitlab.Response, arg2 error) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall) Do(f func(any, int, *gitlab.GetGroupMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall) DoAndReturn(f func(any, int, *gitlab.GetGroupMilestoneIssuesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Issue, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneIssuesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupMilestoneMergeRequests mocks base method.
func (m *MockGroupMilestonesServiceInterface) GetGroupMilestoneMergeRequests(gid any, milestone int, opt *gitlab.GetGroupMilestoneMergeRequestsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, milestone, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupMilestoneMergeRequests", varargs...)
	ret0, _ := ret[0].([]*gitlab.BasicMergeRequest)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupMilestoneMergeRequests indicates an expected call of GetGroupMilestoneMergeRequests.
func (mr *MockGroupMilestonesServiceInterfaceMockRecorder) GetGroupMilestoneMergeRequests(gid, milestone, opt any, options ...any) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, milestone, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMilestoneMergeRequests", reflect.TypeOf((*MockGroupMilestonesServiceInterface)(nil).GetGroupMilestoneMergeRequests), varargs...)
	return &MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall{Call: call}
}

// MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall wrap *gomock.Call
type MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall) Return(arg0 []*gitlab.BasicMergeRequest, arg1 *gitlab.Response, arg2 error) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall) Do(f func(any, int, *gitlab.GetGroupMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall) DoAndReturn(f func(any, int, *gitlab.GetGroupMilestoneMergeRequestsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.BasicMergeRequest, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceGetGroupMilestoneMergeRequestsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupMilestones mocks base method.
func (m *MockGroupMilestonesServiceInterface) ListGroupMilestones(gid any, opt *gitlab.ListGroupMilestonesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupMilestone, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupMilestones", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupMilestone)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupMilestones indicates an expected call of ListGroupMilestones.
func (mr *MockGroupMilestonesServiceInterfaceMockRecorder) ListGroupMilestones(gid, opt any, options ...any) *MockGroupMilestonesServiceInterfaceListGroupMilestonesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupMilestones", reflect.TypeOf((*MockGroupMilestonesServiceInterface)(nil).ListGroupMilestones), varargs...)
	return &MockGroupMilestonesServiceInterfaceListGroupMilestonesCall{Call: call}
}

// MockGroupMilestonesServiceInterfaceListGroupMilestonesCall wrap *gomock.Call
type MockGroupMilestonesServiceInterfaceListGroupMilestonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMilestonesServiceInterfaceListGroupMilestonesCall) Return(arg0 []*gitlab.GroupMilestone, arg1 *gitlab.Response, arg2 error) *MockGroupMilestonesServiceInterfaceListGroupMilestonesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMilestonesServiceInterfaceListGroupMilestonesCall) Do(f func(any, *gitlab.ListGroupMilestonesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupMilestone, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceListGroupMilestonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMilestonesServiceInterfaceListGroupMilestonesCall) DoAndReturn(f func(any, *gitlab.ListGroupMilestonesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupMilestone, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceListGroupMilestonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateGroupMilestone mocks base method.
func (m *MockGroupMilestonesServiceInterface) UpdateGroupMilestone(gid any, milestone int, opt *gitlab.UpdateGroupMilestoneOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, milestone, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupMilestone", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupMilestone)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateGroupMilestone indicates an expected call of UpdateGroupMilestone.
func (mr *MockGroupMilestonesServiceInterfaceMockRecorder) UpdateGroupMilestone(gid, milestone, opt any, options ...any) *MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, milestone, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupMilestone", reflect.TypeOf((*MockGroupMilestonesServiceInterface)(nil).UpdateGroupMilestone), varargs...)
	return &MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall{Call: call}
}

// MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall wrap *gomock.Call
type MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall) Return(arg0 *gitlab.GroupMilestone, arg1 *gitlab.Response, arg2 error) *MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall) Do(f func(any, int, *gitlab.UpdateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall) DoAndReturn(f func(any, int, *gitlab.UpdateGroupMilestoneOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupMilestone, *gitlab.Response, error)) *MockGroupMilestonesServiceInterfaceUpdateGroupMilestoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
