// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: InstanceClustersServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=instance_clusters_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go InstanceClustersServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceClustersServiceInterface is a mock of InstanceClustersServiceInterface interface.
type MockInstanceClustersServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceClustersServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockInstanceClustersServiceInterfaceMockRecorder is the mock recorder for MockInstanceClustersServiceInterface.
type MockInstanceClustersServiceInterfaceMockRecorder struct {
	mock *MockInstanceClustersServiceInterface
}

// NewMockInstanceClustersServiceInterface creates a new mock instance.
func NewMockInstanceClustersServiceInterface(ctrl *gomock.Controller) *MockInstanceClustersServiceInterface {
	mock := &MockInstanceClustersServiceInterface{ctrl: ctrl}
	mock.recorder = &MockInstanceClustersServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceClustersServiceInterface) EXPECT() *MockInstanceClustersServiceInterfaceMockRecorder {
	return m.recorder
}

// AddCluster mocks base method.
func (m *MockInstanceClustersServiceInterface) AddCluster(opt *gitlab.AddClusterOptions, options ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.InstanceCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddCluster indicates an expected call of AddCluster.
func (mr *MockInstanceClustersServiceInterfaceMockRecorder) AddCluster(opt any, options ...any) *MockInstanceClustersServiceInterfaceAddClusterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCluster", reflect.TypeOf((*MockInstanceClustersServiceInterface)(nil).AddCluster), varargs...)
	return &MockInstanceClustersServiceInterfaceAddClusterCall{Call: call}
}

// MockInstanceClustersServiceInterfaceAddClusterCall wrap *gomock.Call
type MockInstanceClustersServiceInterfaceAddClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceClustersServiceInterfaceAddClusterCall) Return(arg0 *gitlab.InstanceCluster, arg1 *gitlab.Response, arg2 error) *MockInstanceClustersServiceInterfaceAddClusterCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceClustersServiceInterfaceAddClusterCall) Do(f func(*gitlab.AddClusterOptions, ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error)) *MockInstanceClustersServiceInterfaceAddClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceClustersServiceInterfaceAddClusterCall) DoAndReturn(f func(*gitlab.AddClusterOptions, ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error)) *MockInstanceClustersServiceInterfaceAddClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCluster mocks base method.
func (m *MockInstanceClustersServiceInterface) DeleteCluster(cluster int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{cluster}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockInstanceClustersServiceInterfaceMockRecorder) DeleteCluster(cluster any, options ...any) *MockInstanceClustersServiceInterfaceDeleteClusterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cluster}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockInstanceClustersServiceInterface)(nil).DeleteCluster), varargs...)
	return &MockInstanceClustersServiceInterfaceDeleteClusterCall{Call: call}
}

// MockInstanceClustersServiceInterfaceDeleteClusterCall wrap *gomock.Call
type MockInstanceClustersServiceInterfaceDeleteClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceClustersServiceInterfaceDeleteClusterCall) Return(arg0 *gitlab.Response, arg1 error) *MockInstanceClustersServiceInterfaceDeleteClusterCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceClustersServiceInterfaceDeleteClusterCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockInstanceClustersServiceInterfaceDeleteClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceClustersServiceInterfaceDeleteClusterCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockInstanceClustersServiceInterfaceDeleteClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditCluster mocks base method.
func (m *MockInstanceClustersServiceInterface) EditCluster(cluster int, opt *gitlab.EditClusterOptions, options ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{cluster, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.InstanceCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditCluster indicates an expected call of EditCluster.
func (mr *MockInstanceClustersServiceInterfaceMockRecorder) EditCluster(cluster, opt any, options ...any) *MockInstanceClustersServiceInterfaceEditClusterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cluster, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCluster", reflect.TypeOf((*MockInstanceClustersServiceInterface)(nil).EditCluster), varargs...)
	return &MockInstanceClustersServiceInterfaceEditClusterCall{Call: call}
}

// MockInstanceClustersServiceInterfaceEditClusterCall wrap *gomock.Call
type MockInstanceClustersServiceInterfaceEditClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceClustersServiceInterfaceEditClusterCall) Return(arg0 *gitlab.InstanceCluster, arg1 *gitlab.Response, arg2 error) *MockInstanceClustersServiceInterfaceEditClusterCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceClustersServiceInterfaceEditClusterCall) Do(f func(int, *gitlab.EditClusterOptions, ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error)) *MockInstanceClustersServiceInterfaceEditClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceClustersServiceInterfaceEditClusterCall) DoAndReturn(f func(int, *gitlab.EditClusterOptions, ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error)) *MockInstanceClustersServiceInterfaceEditClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCluster mocks base method.
func (m *MockInstanceClustersServiceInterface) GetCluster(cluster int, options ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{cluster}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*gitlab.InstanceCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInstanceClustersServiceInterfaceMockRecorder) GetCluster(cluster any, options ...any) *MockInstanceClustersServiceInterfaceGetClusterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cluster}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInstanceClustersServiceInterface)(nil).GetCluster), varargs...)
	return &MockInstanceClustersServiceInterfaceGetClusterCall{Call: call}
}

// MockInstanceClustersServiceInterfaceGetClusterCall wrap *gomock.Call
type MockInstanceClustersServiceInterfaceGetClusterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceClustersServiceInterfaceGetClusterCall) Return(arg0 *gitlab.InstanceCluster, arg1 *gitlab.Response, arg2 error) *MockInstanceClustersServiceInterfaceGetClusterCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceClustersServiceInterfaceGetClusterCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error)) *MockInstanceClustersServiceInterfaceGetClusterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceClustersServiceInterfaceGetClusterCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.InstanceCluster, *gitlab.Response, error)) *MockInstanceClustersServiceInterfaceGetClusterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListClusters mocks base method.
func (m *MockInstanceClustersServiceInterface) ListClusters(options ...gitlab.RequestOptionFunc) ([]*gitlab.InstanceCluster, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].([]*gitlab.InstanceCluster)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockInstanceClustersServiceInterfaceMockRecorder) ListClusters(options ...any) *MockInstanceClustersServiceInterfaceListClustersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockInstanceClustersServiceInterface)(nil).ListClusters), options...)
	return &MockInstanceClustersServiceInterfaceListClustersCall{Call: call}
}

// MockInstanceClustersServiceInterfaceListClustersCall wrap *gomock.Call
type MockInstanceClustersServiceInterfaceListClustersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceClustersServiceInterfaceListClustersCall) Return(arg0 []*gitlab.InstanceCluster, arg1 *gitlab.Response, arg2 error) *MockInstanceClustersServiceInterfaceListClustersCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceClustersServiceInterfaceListClustersCall) Do(f func(...gitlab.RequestOptionFunc) ([]*gitlab.InstanceCluster, *gitlab.Response, error)) *MockInstanceClustersServiceInterfaceListClustersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceClustersServiceInterfaceListClustersCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) ([]*gitlab.InstanceCluster, *gitlab.Response, error)) *MockInstanceClustersServiceInterfaceListClustersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
