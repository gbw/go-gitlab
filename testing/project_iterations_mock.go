// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProjectIterationsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=project_iterations_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ProjectIterationsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectIterationsServiceInterface is a mock of ProjectIterationsServiceInterface interface.
type MockProjectIterationsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectIterationsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectIterationsServiceInterfaceMockRecorder is the mock recorder for MockProjectIterationsServiceInterface.
type MockProjectIterationsServiceInterfaceMockRecorder struct {
	mock *MockProjectIterationsServiceInterface
}

// NewMockProjectIterationsServiceInterface creates a new mock instance.
func NewMockProjectIterationsServiceInterface(ctrl *gomock.Controller) *MockProjectIterationsServiceInterface {
	mock := &MockProjectIterationsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectIterationsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectIterationsServiceInterface) EXPECT() *MockProjectIterationsServiceInterfaceMockRecorder {
	return m.recorder
}

// ListProjectIterations mocks base method.
func (m *MockProjectIterationsServiceInterface) ListProjectIterations(pid any, opt *gitlab.ListProjectIterationsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectIteration, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectIterations", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectIteration)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectIterations indicates an expected call of ListProjectIterations.
func (mr *MockProjectIterationsServiceInterfaceMockRecorder) ListProjectIterations(pid, opt any, options ...any) *MockProjectIterationsServiceInterfaceListProjectIterationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectIterations", reflect.TypeOf((*MockProjectIterationsServiceInterface)(nil).ListProjectIterations), varargs...)
	return &MockProjectIterationsServiceInterfaceListProjectIterationsCall{Call: call}
}

// MockProjectIterationsServiceInterfaceListProjectIterationsCall wrap *gomock.Call
type MockProjectIterationsServiceInterfaceListProjectIterationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIterationsServiceInterfaceListProjectIterationsCall) Return(arg0 []*gitlab.ProjectIteration, arg1 *gitlab.Response, arg2 error) *MockProjectIterationsServiceInterfaceListProjectIterationsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIterationsServiceInterfaceListProjectIterationsCall) Do(f func(any, *gitlab.ListProjectIterationsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectIteration, *gitlab.Response, error)) *MockProjectIterationsServiceInterfaceListProjectIterationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIterationsServiceInterfaceListProjectIterationsCall) DoAndReturn(f func(any, *gitlab.ListProjectIterationsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectIteration, *gitlab.Response, error)) *MockProjectIterationsServiceInterfaceListProjectIterationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
