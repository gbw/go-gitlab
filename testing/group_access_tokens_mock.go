// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupAccessTokensServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_access_tokens_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupAccessTokensServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupAccessTokensServiceInterface is a mock of GroupAccessTokensServiceInterface interface.
type MockGroupAccessTokensServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupAccessTokensServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupAccessTokensServiceInterfaceMockRecorder is the mock recorder for MockGroupAccessTokensServiceInterface.
type MockGroupAccessTokensServiceInterfaceMockRecorder struct {
	mock *MockGroupAccessTokensServiceInterface
}

// NewMockGroupAccessTokensServiceInterface creates a new mock instance.
func NewMockGroupAccessTokensServiceInterface(ctrl *gomock.Controller) *MockGroupAccessTokensServiceInterface {
	mock := &MockGroupAccessTokensServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupAccessTokensServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupAccessTokensServiceInterface) EXPECT() *MockGroupAccessTokensServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateGroupAccessToken mocks base method.
func (m *MockGroupAccessTokensServiceInterface) CreateGroupAccessToken(gid any, opt *gitlab.CreateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupAccessToken indicates an expected call of CreateGroupAccessToken.
func (mr *MockGroupAccessTokensServiceInterfaceMockRecorder) CreateGroupAccessToken(gid, opt any, options ...any) *MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupAccessToken", reflect.TypeOf((*MockGroupAccessTokensServiceInterface)(nil).CreateGroupAccessToken), varargs...)
	return &MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall{Call: call}
}

// MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall wrap *gomock.Call
type MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall) Return(arg0 *gitlab.GroupAccessToken, arg1 *gitlab.Response, arg2 error) *MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall) Do(f func(any, *gitlab.CreateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall) DoAndReturn(f func(any, *gitlab.CreateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceCreateGroupAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupAccessToken mocks base method.
func (m *MockGroupAccessTokensServiceInterface) GetGroupAccessToken(gid any, id int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupAccessToken indicates an expected call of GetGroupAccessToken.
func (mr *MockGroupAccessTokensServiceInterfaceMockRecorder) GetGroupAccessToken(gid, id any, options ...any) *MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, id}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupAccessToken", reflect.TypeOf((*MockGroupAccessTokensServiceInterface)(nil).GetGroupAccessToken), varargs...)
	return &MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall{Call: call}
}

// MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall wrap *gomock.Call
type MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall) Return(arg0 *gitlab.GroupAccessToken, arg1 *gitlab.Response, arg2 error) *MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceGetGroupAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupAccessTokens mocks base method.
func (m *MockGroupAccessTokensServiceInterface) ListGroupAccessTokens(gid any, opt *gitlab.ListGroupAccessTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupAccessTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupAccessTokens indicates an expected call of ListGroupAccessTokens.
func (mr *MockGroupAccessTokensServiceInterfaceMockRecorder) ListGroupAccessTokens(gid, opt any, options ...any) *MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupAccessTokens", reflect.TypeOf((*MockGroupAccessTokensServiceInterface)(nil).ListGroupAccessTokens), varargs...)
	return &MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall{Call: call}
}

// MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall wrap *gomock.Call
type MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall) Return(arg0 []*gitlab.GroupAccessToken, arg1 *gitlab.Response, arg2 error) *MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall) Do(f func(any, *gitlab.ListGroupAccessTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall) DoAndReturn(f func(any, *gitlab.ListGroupAccessTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceListGroupAccessTokensCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RevokeGroupAccessToken mocks base method.
func (m *MockGroupAccessTokensServiceInterface) RevokeGroupAccessToken(gid any, id int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, id}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokeGroupAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeGroupAccessToken indicates an expected call of RevokeGroupAccessToken.
func (mr *MockGroupAccessTokensServiceInterfaceMockRecorder) RevokeGroupAccessToken(gid, id any, options ...any) *MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, id}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeGroupAccessToken", reflect.TypeOf((*MockGroupAccessTokensServiceInterface)(nil).RevokeGroupAccessToken), varargs...)
	return &MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall{Call: call}
}

// MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall wrap *gomock.Call
type MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceRevokeGroupAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RotateGroupAccessToken mocks base method.
func (m *MockGroupAccessTokensServiceInterface) RotateGroupAccessToken(gid any, id int, opt *gitlab.RotateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, id, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotateGroupAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RotateGroupAccessToken indicates an expected call of RotateGroupAccessToken.
func (mr *MockGroupAccessTokensServiceInterfaceMockRecorder) RotateGroupAccessToken(gid, id, opt any, options ...any) *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, id, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateGroupAccessToken", reflect.TypeOf((*MockGroupAccessTokensServiceInterface)(nil).RotateGroupAccessToken), varargs...)
	return &MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall{Call: call}
}

// MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall wrap *gomock.Call
type MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall) Return(arg0 *gitlab.GroupAccessToken, arg1 *gitlab.Response, arg2 error) *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall) Do(f func(any, int, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall) DoAndReturn(f func(any, int, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RotateGroupAccessTokenSelf mocks base method.
func (m *MockGroupAccessTokensServiceInterface) RotateGroupAccessTokenSelf(gid any, opt *gitlab.RotateGroupAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotateGroupAccessTokenSelf", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RotateGroupAccessTokenSelf indicates an expected call of RotateGroupAccessTokenSelf.
func (mr *MockGroupAccessTokensServiceInterfaceMockRecorder) RotateGroupAccessTokenSelf(gid, opt any, options ...any) *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateGroupAccessTokenSelf", reflect.TypeOf((*MockGroupAccessTokensServiceInterface)(nil).RotateGroupAccessTokenSelf), varargs...)
	return &MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall{Call: call}
}

// MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall wrap *gomock.Call
type MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall) Return(arg0 *gitlab.GroupAccessToken, arg1 *gitlab.Response, arg2 error) *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall) Do(f func(any, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall) DoAndReturn(f func(any, *gitlab.RotateGroupAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupAccessToken, *gitlab.Response, error)) *MockGroupAccessTokensServiceInterfaceRotateGroupAccessTokenSelfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
