// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: UsageDataServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=usage_data_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go UsageDataServiceInterface
//

package testing

import (
	io "io"
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockUsageDataServiceInterface is a mock of UsageDataServiceInterface interface.
type MockUsageDataServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUsageDataServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockUsageDataServiceInterfaceMockRecorder is the mock recorder for MockUsageDataServiceInterface.
type MockUsageDataServiceInterfaceMockRecorder struct {
	mock *MockUsageDataServiceInterface
}

// NewMockUsageDataServiceInterface creates a new mock instance.
func NewMockUsageDataServiceInterface(ctrl *gomock.Controller) *MockUsageDataServiceInterface {
	mock := &MockUsageDataServiceInterface{ctrl: ctrl}
	mock.recorder = &MockUsageDataServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsageDataServiceInterface) EXPECT() *MockUsageDataServiceInterfaceMockRecorder {
	return m.recorder
}

// GetMetricDefinitionsAsYAML mocks base method.
func (m *MockUsageDataServiceInterface) GetMetricDefinitionsAsYAML(options ...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetricDefinitionsAsYAML", varargs...)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMetricDefinitionsAsYAML indicates an expected call of GetMetricDefinitionsAsYAML.
func (mr *MockUsageDataServiceInterfaceMockRecorder) GetMetricDefinitionsAsYAML(options ...any) *MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDefinitionsAsYAML", reflect.TypeOf((*MockUsageDataServiceInterface)(nil).GetMetricDefinitionsAsYAML), options...)
	return &MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall{Call: call}
}

// MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall wrap *gomock.Call
type MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall) Return(arg0 io.Reader, arg1 *gitlab.Response, arg2 error) *MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall) Do(f func(...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error)) *MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (io.Reader, *gitlab.Response, error)) *MockUsageDataServiceInterfaceGetMetricDefinitionsAsYAMLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetNonSQLMetrics mocks base method.
func (m *MockUsageDataServiceInterface) GetNonSQLMetrics(options ...gitlab.RequestOptionFunc) (*gitlab.ServicePingNonSqlMetrics, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNonSQLMetrics", varargs...)
	ret0, _ := ret[0].(*gitlab.ServicePingNonSqlMetrics)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNonSQLMetrics indicates an expected call of GetNonSQLMetrics.
func (mr *MockUsageDataServiceInterfaceMockRecorder) GetNonSQLMetrics(options ...any) *MockUsageDataServiceInterfaceGetNonSQLMetricsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonSQLMetrics", reflect.TypeOf((*MockUsageDataServiceInterface)(nil).GetNonSQLMetrics), options...)
	return &MockUsageDataServiceInterfaceGetNonSQLMetricsCall{Call: call}
}

// MockUsageDataServiceInterfaceGetNonSQLMetricsCall wrap *gomock.Call
type MockUsageDataServiceInterfaceGetNonSQLMetricsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUsageDataServiceInterfaceGetNonSQLMetricsCall) Return(arg0 *gitlab.ServicePingNonSqlMetrics, arg1 *gitlab.Response, arg2 error) *MockUsageDataServiceInterfaceGetNonSQLMetricsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUsageDataServiceInterfaceGetNonSQLMetricsCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingNonSqlMetrics, *gitlab.Response, error)) *MockUsageDataServiceInterfaceGetNonSQLMetricsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUsageDataServiceInterfaceGetNonSQLMetricsCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingNonSqlMetrics, *gitlab.Response, error)) *MockUsageDataServiceInterfaceGetNonSQLMetricsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetQueries mocks base method.
func (m *MockUsageDataServiceInterface) GetQueries(options ...gitlab.RequestOptionFunc) (*gitlab.ServicePingQueries, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQueries", varargs...)
	ret0, _ := ret[0].(*gitlab.ServicePingQueries)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetQueries indicates an expected call of GetQueries.
func (mr *MockUsageDataServiceInterfaceMockRecorder) GetQueries(options ...any) *MockUsageDataServiceInterfaceGetQueriesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueries", reflect.TypeOf((*MockUsageDataServiceInterface)(nil).GetQueries), options...)
	return &MockUsageDataServiceInterfaceGetQueriesCall{Call: call}
}

// MockUsageDataServiceInterfaceGetQueriesCall wrap *gomock.Call
type MockUsageDataServiceInterfaceGetQueriesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUsageDataServiceInterfaceGetQueriesCall) Return(arg0 *gitlab.ServicePingQueries, arg1 *gitlab.Response, arg2 error) *MockUsageDataServiceInterfaceGetQueriesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUsageDataServiceInterfaceGetQueriesCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingQueries, *gitlab.Response, error)) *MockUsageDataServiceInterfaceGetQueriesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUsageDataServiceInterfaceGetQueriesCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingQueries, *gitlab.Response, error)) *MockUsageDataServiceInterfaceGetQueriesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetServicePing mocks base method.
func (m *MockUsageDataServiceInterface) GetServicePing(options ...gitlab.RequestOptionFunc) (*gitlab.ServicePingData, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetServicePing", varargs...)
	ret0, _ := ret[0].(*gitlab.ServicePingData)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServicePing indicates an expected call of GetServicePing.
func (mr *MockUsageDataServiceInterfaceMockRecorder) GetServicePing(options ...any) *MockUsageDataServiceInterfaceGetServicePingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePing", reflect.TypeOf((*MockUsageDataServiceInterface)(nil).GetServicePing), options...)
	return &MockUsageDataServiceInterfaceGetServicePingCall{Call: call}
}

// MockUsageDataServiceInterfaceGetServicePingCall wrap *gomock.Call
type MockUsageDataServiceInterfaceGetServicePingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUsageDataServiceInterfaceGetServicePingCall) Return(arg0 *gitlab.ServicePingData, arg1 *gitlab.Response, arg2 error) *MockUsageDataServiceInterfaceGetServicePingCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUsageDataServiceInterfaceGetServicePingCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingData, *gitlab.Response, error)) *MockUsageDataServiceInterfaceGetServicePingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUsageDataServiceInterfaceGetServicePingCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.ServicePingData, *gitlab.Response, error)) *MockUsageDataServiceInterfaceGetServicePingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TrackEvent mocks base method.
func (m *MockUsageDataServiceInterface) TrackEvent(opt *gitlab.TrackEventOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackEvent", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackEvent indicates an expected call of TrackEvent.
func (mr *MockUsageDataServiceInterfaceMockRecorder) TrackEvent(opt any, options ...any) *MockUsageDataServiceInterfaceTrackEventCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackEvent", reflect.TypeOf((*MockUsageDataServiceInterface)(nil).TrackEvent), varargs...)
	return &MockUsageDataServiceInterfaceTrackEventCall{Call: call}
}

// MockUsageDataServiceInterfaceTrackEventCall wrap *gomock.Call
type MockUsageDataServiceInterfaceTrackEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUsageDataServiceInterfaceTrackEventCall) Return(arg0 *gitlab.Response, arg1 error) *MockUsageDataServiceInterfaceTrackEventCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUsageDataServiceInterfaceTrackEventCall) Do(f func(*gitlab.TrackEventOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockUsageDataServiceInterfaceTrackEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUsageDataServiceInterfaceTrackEventCall) DoAndReturn(f func(*gitlab.TrackEventOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockUsageDataServiceInterfaceTrackEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TrackEvents mocks base method.
func (m *MockUsageDataServiceInterface) TrackEvents(opt *gitlab.TrackEventsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrackEvents", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackEvents indicates an expected call of TrackEvents.
func (mr *MockUsageDataServiceInterfaceMockRecorder) TrackEvents(opt any, options ...any) *MockUsageDataServiceInterfaceTrackEventsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackEvents", reflect.TypeOf((*MockUsageDataServiceInterface)(nil).TrackEvents), varargs...)
	return &MockUsageDataServiceInterfaceTrackEventsCall{Call: call}
}

// MockUsageDataServiceInterfaceTrackEventsCall wrap *gomock.Call
type MockUsageDataServiceInterfaceTrackEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUsageDataServiceInterfaceTrackEventsCall) Return(arg0 *gitlab.Response, arg1 error) *MockUsageDataServiceInterfaceTrackEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUsageDataServiceInterfaceTrackEventsCall) Do(f func(*gitlab.TrackEventsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockUsageDataServiceInterfaceTrackEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUsageDataServiceInterfaceTrackEventsCall) DoAndReturn(f func(*gitlab.TrackEventsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockUsageDataServiceInterfaceTrackEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
