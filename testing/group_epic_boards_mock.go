// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupEpicBoardsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_epic_boards_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupEpicBoardsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupEpicBoardsServiceInterface is a mock of GroupEpicBoardsServiceInterface interface.
type MockGroupEpicBoardsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupEpicBoardsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupEpicBoardsServiceInterfaceMockRecorder is the mock recorder for MockGroupEpicBoardsServiceInterface.
type MockGroupEpicBoardsServiceInterfaceMockRecorder struct {
	mock *MockGroupEpicBoardsServiceInterface
}

// NewMockGroupEpicBoardsServiceInterface creates a new mock instance.
func NewMockGroupEpicBoardsServiceInterface(ctrl *gomock.Controller) *MockGroupEpicBoardsServiceInterface {
	mock := &MockGroupEpicBoardsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupEpicBoardsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupEpicBoardsServiceInterface) EXPECT() *MockGroupEpicBoardsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetGroupEpicBoard mocks base method.
func (m *MockGroupEpicBoardsServiceInterface) GetGroupEpicBoard(gid any, board int, options ...gitlab.RequestOptionFunc) (*gitlab.GroupEpicBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, board}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupEpicBoard", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupEpicBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupEpicBoard indicates an expected call of GetGroupEpicBoard.
func (mr *MockGroupEpicBoardsServiceInterfaceMockRecorder) GetGroupEpicBoard(gid, board any, options ...any) *MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, board}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupEpicBoard", reflect.TypeOf((*MockGroupEpicBoardsServiceInterface)(nil).GetGroupEpicBoard), varargs...)
	return &MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall{Call: call}
}

// MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall wrap *gomock.Call
type MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall) Return(arg0 *gitlab.GroupEpicBoard, arg1 *gitlab.Response, arg2 error) *MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupEpicBoard, *gitlab.Response, error)) *MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.GroupEpicBoard, *gitlab.Response, error)) *MockGroupEpicBoardsServiceInterfaceGetGroupEpicBoardCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupEpicBoards mocks base method.
func (m *MockGroupEpicBoardsServiceInterface) ListGroupEpicBoards(gid any, opt *gitlab.ListGroupEpicBoardsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupEpicBoard, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupEpicBoards", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupEpicBoard)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupEpicBoards indicates an expected call of ListGroupEpicBoards.
func (mr *MockGroupEpicBoardsServiceInterfaceMockRecorder) ListGroupEpicBoards(gid, opt any, options ...any) *MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupEpicBoards", reflect.TypeOf((*MockGroupEpicBoardsServiceInterface)(nil).ListGroupEpicBoards), varargs...)
	return &MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall{Call: call}
}

// MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall wrap *gomock.Call
type MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall) Return(arg0 []*gitlab.GroupEpicBoard, arg1 *gitlab.Response, arg2 error) *MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall) Do(f func(any, *gitlab.ListGroupEpicBoardsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupEpicBoard, *gitlab.Response, error)) *MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall) DoAndReturn(f func(any, *gitlab.ListGroupEpicBoardsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupEpicBoard, *gitlab.Response, error)) *MockGroupEpicBoardsServiceInterfaceListGroupEpicBoardsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
