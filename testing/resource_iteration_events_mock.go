// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ResourceIterationEventsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=resource_iteration_events_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ResourceIterationEventsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceIterationEventsServiceInterface is a mock of ResourceIterationEventsServiceInterface interface.
type MockResourceIterationEventsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResourceIterationEventsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockResourceIterationEventsServiceInterfaceMockRecorder is the mock recorder for MockResourceIterationEventsServiceInterface.
type MockResourceIterationEventsServiceInterfaceMockRecorder struct {
	mock *MockResourceIterationEventsServiceInterface
}

// NewMockResourceIterationEventsServiceInterface creates a new mock instance.
func NewMockResourceIterationEventsServiceInterface(ctrl *gomock.Controller) *MockResourceIterationEventsServiceInterface {
	mock := &MockResourceIterationEventsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockResourceIterationEventsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceIterationEventsServiceInterface) EXPECT() *MockResourceIterationEventsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetIssueIterationEvent mocks base method.
func (m *MockResourceIterationEventsServiceInterface) GetIssueIterationEvent(pid any, issue, event int, options ...gitlab.RequestOptionFunc) (*gitlab.IterationEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, event}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIssueIterationEvent", varargs...)
	ret0, _ := ret[0].(*gitlab.IterationEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssueIterationEvent indicates an expected call of GetIssueIterationEvent.
func (mr *MockResourceIterationEventsServiceInterfaceMockRecorder) GetIssueIterationEvent(pid, issue, event any, options ...any) *MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, event}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueIterationEvent", reflect.TypeOf((*MockResourceIterationEventsServiceInterface)(nil).GetIssueIterationEvent), varargs...)
	return &MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall{Call: call}
}

// MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall wrap *gomock.Call
type MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall) Return(arg0 *gitlab.IterationEvent, arg1 *gitlab.Response, arg2 error) *MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall) Do(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IterationEvent, *gitlab.Response, error)) *MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall) DoAndReturn(f func(any, int, int, ...gitlab.RequestOptionFunc) (*gitlab.IterationEvent, *gitlab.Response, error)) *MockResourceIterationEventsServiceInterfaceGetIssueIterationEventCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListIssueIterationEvents mocks base method.
func (m *MockResourceIterationEventsServiceInterface) ListIssueIterationEvents(pid any, issue int, opt *gitlab.ListIterationEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.IterationEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssueIterationEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.IterationEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueIterationEvents indicates an expected call of ListIssueIterationEvents.
func (mr *MockResourceIterationEventsServiceInterfaceMockRecorder) ListIssueIterationEvents(pid, issue, opt any, options ...any) *MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueIterationEvents", reflect.TypeOf((*MockResourceIterationEventsServiceInterface)(nil).ListIssueIterationEvents), varargs...)
	return &MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall{Call: call}
}

// MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall wrap *gomock.Call
type MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall) Return(arg0 []*gitlab.IterationEvent, arg1 *gitlab.Response, arg2 error) *MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall) Do(f func(any, int, *gitlab.ListIterationEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.IterationEvent, *gitlab.Response, error)) *MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall) DoAndReturn(f func(any, int, *gitlab.ListIterationEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.IterationEvent, *gitlab.Response, error)) *MockResourceIterationEventsServiceInterfaceListIssueIterationEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
