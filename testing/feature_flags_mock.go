// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: FeaturesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=feature_flags_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go FeaturesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockFeaturesServiceInterface is a mock of FeaturesServiceInterface interface.
type MockFeaturesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFeaturesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockFeaturesServiceInterfaceMockRecorder is the mock recorder for MockFeaturesServiceInterface.
type MockFeaturesServiceInterfaceMockRecorder struct {
	mock *MockFeaturesServiceInterface
}

// NewMockFeaturesServiceInterface creates a new mock instance.
func NewMockFeaturesServiceInterface(ctrl *gomock.Controller) *MockFeaturesServiceInterface {
	mock := &MockFeaturesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockFeaturesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeaturesServiceInterface) EXPECT() *MockFeaturesServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteFeatureFlag mocks base method.
func (m *MockFeaturesServiceInterface) DeleteFeatureFlag(name string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFeatureFlag", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeatureFlag indicates an expected call of DeleteFeatureFlag.
func (mr *MockFeaturesServiceInterfaceMockRecorder) DeleteFeatureFlag(name any, options ...any) *MockFeaturesServiceInterfaceDeleteFeatureFlagCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeatureFlag", reflect.TypeOf((*MockFeaturesServiceInterface)(nil).DeleteFeatureFlag), varargs...)
	return &MockFeaturesServiceInterfaceDeleteFeatureFlagCall{Call: call}
}

// MockFeaturesServiceInterfaceDeleteFeatureFlagCall wrap *gomock.Call
type MockFeaturesServiceInterfaceDeleteFeatureFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFeaturesServiceInterfaceDeleteFeatureFlagCall) Return(arg0 *gitlab.Response, arg1 error) *MockFeaturesServiceInterfaceDeleteFeatureFlagCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFeaturesServiceInterfaceDeleteFeatureFlagCall) Do(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockFeaturesServiceInterfaceDeleteFeatureFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFeaturesServiceInterfaceDeleteFeatureFlagCall) DoAndReturn(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockFeaturesServiceInterfaceDeleteFeatureFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFeatureDefinitions mocks base method.
func (m *MockFeaturesServiceInterface) ListFeatureDefinitions(options ...gitlab.RequestOptionFunc) ([]*gitlab.FeatureDefinition, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFeatureDefinitions", varargs...)
	ret0, _ := ret[0].([]*gitlab.FeatureDefinition)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeatureDefinitions indicates an expected call of ListFeatureDefinitions.
func (mr *MockFeaturesServiceInterfaceMockRecorder) ListFeatureDefinitions(options ...any) *MockFeaturesServiceInterfaceListFeatureDefinitionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatureDefinitions", reflect.TypeOf((*MockFeaturesServiceInterface)(nil).ListFeatureDefinitions), options...)
	return &MockFeaturesServiceInterfaceListFeatureDefinitionsCall{Call: call}
}

// MockFeaturesServiceInterfaceListFeatureDefinitionsCall wrap *gomock.Call
type MockFeaturesServiceInterfaceListFeatureDefinitionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFeaturesServiceInterfaceListFeatureDefinitionsCall) Return(arg0 []*gitlab.FeatureDefinition, arg1 *gitlab.Response, arg2 error) *MockFeaturesServiceInterfaceListFeatureDefinitionsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFeaturesServiceInterfaceListFeatureDefinitionsCall) Do(f func(...gitlab.RequestOptionFunc) ([]*gitlab.FeatureDefinition, *gitlab.Response, error)) *MockFeaturesServiceInterfaceListFeatureDefinitionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFeaturesServiceInterfaceListFeatureDefinitionsCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) ([]*gitlab.FeatureDefinition, *gitlab.Response, error)) *MockFeaturesServiceInterfaceListFeatureDefinitionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListFeatures mocks base method.
func (m *MockFeaturesServiceInterface) ListFeatures(options ...gitlab.RequestOptionFunc) ([]*gitlab.Feature, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFeatures", varargs...)
	ret0, _ := ret[0].([]*gitlab.Feature)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFeatures indicates an expected call of ListFeatures.
func (mr *MockFeaturesServiceInterfaceMockRecorder) ListFeatures(options ...any) *MockFeaturesServiceInterfaceListFeaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatures", reflect.TypeOf((*MockFeaturesServiceInterface)(nil).ListFeatures), options...)
	return &MockFeaturesServiceInterfaceListFeaturesCall{Call: call}
}

// MockFeaturesServiceInterfaceListFeaturesCall wrap *gomock.Call
type MockFeaturesServiceInterfaceListFeaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFeaturesServiceInterfaceListFeaturesCall) Return(arg0 []*gitlab.Feature, arg1 *gitlab.Response, arg2 error) *MockFeaturesServiceInterfaceListFeaturesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFeaturesServiceInterfaceListFeaturesCall) Do(f func(...gitlab.RequestOptionFunc) ([]*gitlab.Feature, *gitlab.Response, error)) *MockFeaturesServiceInterfaceListFeaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFeaturesServiceInterfaceListFeaturesCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) ([]*gitlab.Feature, *gitlab.Response, error)) *MockFeaturesServiceInterfaceListFeaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetFeatureFlag mocks base method.
func (m *MockFeaturesServiceInterface) SetFeatureFlag(name string, opt *gitlab.SetFeatureFlagOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Feature, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{name, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetFeatureFlag", varargs...)
	ret0, _ := ret[0].(*gitlab.Feature)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetFeatureFlag indicates an expected call of SetFeatureFlag.
func (mr *MockFeaturesServiceInterfaceMockRecorder) SetFeatureFlag(name, opt any, options ...any) *MockFeaturesServiceInterfaceSetFeatureFlagCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeatureFlag", reflect.TypeOf((*MockFeaturesServiceInterface)(nil).SetFeatureFlag), varargs...)
	return &MockFeaturesServiceInterfaceSetFeatureFlagCall{Call: call}
}

// MockFeaturesServiceInterfaceSetFeatureFlagCall wrap *gomock.Call
type MockFeaturesServiceInterfaceSetFeatureFlagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFeaturesServiceInterfaceSetFeatureFlagCall) Return(arg0 *gitlab.Feature, arg1 *gitlab.Response, arg2 error) *MockFeaturesServiceInterfaceSetFeatureFlagCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFeaturesServiceInterfaceSetFeatureFlagCall) Do(f func(string, *gitlab.SetFeatureFlagOptions, ...gitlab.RequestOptionFunc) (*gitlab.Feature, *gitlab.Response, error)) *MockFeaturesServiceInterfaceSetFeatureFlagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFeaturesServiceInterfaceSetFeatureFlagCall) DoAndReturn(f func(string, *gitlab.SetFeatureFlagOptions, ...gitlab.RequestOptionFunc) (*gitlab.Feature, *gitlab.Response, error)) *MockFeaturesServiceInterfaceSetFeatureFlagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
