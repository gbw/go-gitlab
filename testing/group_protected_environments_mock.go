// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupProtectedEnvironmentsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_protected_environments_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupProtectedEnvironmentsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupProtectedEnvironmentsServiceInterface is a mock of GroupProtectedEnvironmentsServiceInterface interface.
type MockGroupProtectedEnvironmentsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder is the mock recorder for MockGroupProtectedEnvironmentsServiceInterface.
type MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder struct {
	mock *MockGroupProtectedEnvironmentsServiceInterface
}

// NewMockGroupProtectedEnvironmentsServiceInterface creates a new mock instance.
func NewMockGroupProtectedEnvironmentsServiceInterface(ctrl *gomock.Controller) *MockGroupProtectedEnvironmentsServiceInterface {
	mock := &MockGroupProtectedEnvironmentsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupProtectedEnvironmentsServiceInterface) EXPECT() *MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder {
	return m.recorder
}

// GetGroupProtectedEnvironment mocks base method.
func (m *MockGroupProtectedEnvironmentsServiceInterface) GetGroupProtectedEnvironment(gid any, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupProtectedEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupProtectedEnvironment indicates an expected call of GetGroupProtectedEnvironment.
func (mr *MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder) GetGroupProtectedEnvironment(gid, environment any, options ...any) *MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, environment}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupProtectedEnvironment", reflect.TypeOf((*MockGroupProtectedEnvironmentsServiceInterface)(nil).GetGroupProtectedEnvironment), varargs...)
	return &MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall{Call: call}
}

// MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall wrap *gomock.Call
type MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall) Return(arg0 *gitlab.GroupProtectedEnvironment, arg1 *gitlab.Response, arg2 error) *MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceGetGroupProtectedEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupProtectedEnvironments mocks base method.
func (m *MockGroupProtectedEnvironmentsServiceInterface) ListGroupProtectedEnvironments(gid any, opt *gitlab.ListGroupProtectedEnvironmentsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupProtectedEnvironments", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupProtectedEnvironments indicates an expected call of ListGroupProtectedEnvironments.
func (mr *MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder) ListGroupProtectedEnvironments(gid, opt any, options ...any) *MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupProtectedEnvironments", reflect.TypeOf((*MockGroupProtectedEnvironmentsServiceInterface)(nil).ListGroupProtectedEnvironments), varargs...)
	return &MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall{Call: call}
}

// MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall wrap *gomock.Call
type MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall) Return(arg0 []*gitlab.GroupProtectedEnvironment, arg1 *gitlab.Response, arg2 error) *MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall) Do(f func(any, *gitlab.ListGroupProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall) DoAndReturn(f func(any, *gitlab.ListGroupProtectedEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceListGroupProtectedEnvironmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProtectGroupEnvironment mocks base method.
func (m *MockGroupProtectedEnvironmentsServiceInterface) ProtectGroupEnvironment(gid any, opt *gitlab.ProtectGroupEnvironmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProtectGroupEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProtectGroupEnvironment indicates an expected call of ProtectGroupEnvironment.
func (mr *MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder) ProtectGroupEnvironment(gid, opt any, options ...any) *MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectGroupEnvironment", reflect.TypeOf((*MockGroupProtectedEnvironmentsServiceInterface)(nil).ProtectGroupEnvironment), varargs...)
	return &MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall{Call: call}
}

// MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall wrap *gomock.Call
type MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall) Return(arg0 *gitlab.GroupProtectedEnvironment, arg1 *gitlab.Response, arg2 error) *MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall) Do(f func(any, *gitlab.ProtectGroupEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall) DoAndReturn(f func(any, *gitlab.ProtectGroupEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceProtectGroupEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnprotectGroupEnvironment mocks base method.
func (m *MockGroupProtectedEnvironmentsServiceInterface) UnprotectGroupEnvironment(gid any, environment string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnprotectGroupEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnprotectGroupEnvironment indicates an expected call of UnprotectGroupEnvironment.
func (mr *MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder) UnprotectGroupEnvironment(gid, environment any, options ...any) *MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, environment}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnprotectGroupEnvironment", reflect.TypeOf((*MockGroupProtectedEnvironmentsServiceInterface)(nil).UnprotectGroupEnvironment), varargs...)
	return &MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall{Call: call}
}

// MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall wrap *gomock.Call
type MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceUnprotectGroupEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateGroupProtectedEnvironment mocks base method.
func (m *MockGroupProtectedEnvironmentsServiceInterface) UpdateGroupProtectedEnvironment(gid any, environment string, opt *gitlab.UpdateGroupProtectedEnvironmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, environment, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateGroupProtectedEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupProtectedEnvironment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateGroupProtectedEnvironment indicates an expected call of UpdateGroupProtectedEnvironment.
func (mr *MockGroupProtectedEnvironmentsServiceInterfaceMockRecorder) UpdateGroupProtectedEnvironment(gid, environment, opt any, options ...any) *MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, environment, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupProtectedEnvironment", reflect.TypeOf((*MockGroupProtectedEnvironmentsServiceInterface)(nil).UpdateGroupProtectedEnvironment), varargs...)
	return &MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall{Call: call}
}

// MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall wrap *gomock.Call
type MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall) Return(arg0 *gitlab.GroupProtectedEnvironment, arg1 *gitlab.Response, arg2 error) *MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall) Do(f func(any, string, *gitlab.UpdateGroupProtectedEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall) DoAndReturn(f func(any, string, *gitlab.UpdateGroupProtectedEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupProtectedEnvironment, *gitlab.Response, error)) *MockGroupProtectedEnvironmentsServiceInterfaceUpdateGroupProtectedEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
