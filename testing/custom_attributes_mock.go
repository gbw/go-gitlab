// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: CustomAttributesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=custom_attributes_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go CustomAttributesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockCustomAttributesServiceInterface is a mock of CustomAttributesServiceInterface interface.
type MockCustomAttributesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomAttributesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockCustomAttributesServiceInterfaceMockRecorder is the mock recorder for MockCustomAttributesServiceInterface.
type MockCustomAttributesServiceInterfaceMockRecorder struct {
	mock *MockCustomAttributesServiceInterface
}

// NewMockCustomAttributesServiceInterface creates a new mock instance.
func NewMockCustomAttributesServiceInterface(ctrl *gomock.Controller) *MockCustomAttributesServiceInterface {
	mock := &MockCustomAttributesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCustomAttributesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomAttributesServiceInterface) EXPECT() *MockCustomAttributesServiceInterfaceMockRecorder {
	return m.recorder
}

// DeleteCustomGroupAttribute mocks base method.
func (m *MockCustomAttributesServiceInterface) DeleteCustomGroupAttribute(group int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomGroupAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomGroupAttribute indicates an expected call of DeleteCustomGroupAttribute.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) DeleteCustomGroupAttribute(group, key any, options ...any) *MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group, key}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomGroupAttribute", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).DeleteCustomGroupAttribute), varargs...)
	return &MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall{Call: call}
}

// MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall) Return(arg0 *gitlab.Response, arg1 error) *MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall) Do(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall) DoAndReturn(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockCustomAttributesServiceInterfaceDeleteCustomGroupAttributeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCustomProjectAttribute mocks base method.
func (m *MockCustomAttributesServiceInterface) DeleteCustomProjectAttribute(project int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomProjectAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomProjectAttribute indicates an expected call of DeleteCustomProjectAttribute.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) DeleteCustomProjectAttribute(project, key any, options ...any) *MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project, key}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomProjectAttribute", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).DeleteCustomProjectAttribute), varargs...)
	return &MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall{Call: call}
}

// MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall) Return(arg0 *gitlab.Response, arg1 error) *MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall) Do(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall) DoAndReturn(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockCustomAttributesServiceInterfaceDeleteCustomProjectAttributeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCustomUserAttribute mocks base method.
func (m *MockCustomAttributesServiceInterface) DeleteCustomUserAttribute(user int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCustomUserAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCustomUserAttribute indicates an expected call of DeleteCustomUserAttribute.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) DeleteCustomUserAttribute(user, key any, options ...any) *MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, key}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCustomUserAttribute", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).DeleteCustomUserAttribute), varargs...)
	return &MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall{Call: call}
}

// MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall) Return(arg0 *gitlab.Response, arg1 error) *MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall) Do(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall) DoAndReturn(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockCustomAttributesServiceInterfaceDeleteCustomUserAttributeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCustomGroupAttribute mocks base method.
func (m *MockCustomAttributesServiceInterface) GetCustomGroupAttribute(group int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomGroupAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCustomGroupAttribute indicates an expected call of GetCustomGroupAttribute.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) GetCustomGroupAttribute(group, key any, options ...any) *MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group, key}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomGroupAttribute", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).GetCustomGroupAttribute), varargs...)
	return &MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall{Call: call}
}

// MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall) Return(arg0 *gitlab.CustomAttribute, arg1 *gitlab.Response, arg2 error) *MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall) Do(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall) DoAndReturn(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceGetCustomGroupAttributeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCustomProjectAttribute mocks base method.
func (m *MockCustomAttributesServiceInterface) GetCustomProjectAttribute(project int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomProjectAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCustomProjectAttribute indicates an expected call of GetCustomProjectAttribute.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) GetCustomProjectAttribute(project, key any, options ...any) *MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project, key}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomProjectAttribute", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).GetCustomProjectAttribute), varargs...)
	return &MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall{Call: call}
}

// MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall) Return(arg0 *gitlab.CustomAttribute, arg1 *gitlab.Response, arg2 error) *MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall) Do(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall) DoAndReturn(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceGetCustomProjectAttributeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCustomUserAttribute mocks base method.
func (m *MockCustomAttributesServiceInterface) GetCustomUserAttribute(user int, key string, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCustomUserAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCustomUserAttribute indicates an expected call of GetCustomUserAttribute.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) GetCustomUserAttribute(user, key any, options ...any) *MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, key}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomUserAttribute", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).GetCustomUserAttribute), varargs...)
	return &MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall{Call: call}
}

// MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall) Return(arg0 *gitlab.CustomAttribute, arg1 *gitlab.Response, arg2 error) *MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall) Do(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall) DoAndReturn(f func(int, string, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceGetCustomUserAttributeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCustomGroupAttributes mocks base method.
func (m *MockCustomAttributesServiceInterface) ListCustomGroupAttributes(group int, options ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomGroupAttributes", varargs...)
	ret0, _ := ret[0].([]*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomGroupAttributes indicates an expected call of ListCustomGroupAttributes.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) ListCustomGroupAttributes(group any, options ...any) *MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomGroupAttributes", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).ListCustomGroupAttributes), varargs...)
	return &MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall{Call: call}
}

// MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall) Return(arg0 []*gitlab.CustomAttribute, arg1 *gitlab.Response, arg2 error) *MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall) Do(f func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceListCustomGroupAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCustomProjectAttributes mocks base method.
func (m *MockCustomAttributesServiceInterface) ListCustomProjectAttributes(project int, options ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomProjectAttributes", varargs...)
	ret0, _ := ret[0].([]*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomProjectAttributes indicates an expected call of ListCustomProjectAttributes.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) ListCustomProjectAttributes(project any, options ...any) *MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomProjectAttributes", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).ListCustomProjectAttributes), varargs...)
	return &MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall{Call: call}
}

// MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall) Return(arg0 []*gitlab.CustomAttribute, arg1 *gitlab.Response, arg2 error) *MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall) Do(f func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceListCustomProjectAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCustomUserAttributes mocks base method.
func (m *MockCustomAttributesServiceInterface) ListCustomUserAttributes(user int, options ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCustomUserAttributes", varargs...)
	ret0, _ := ret[0].([]*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCustomUserAttributes indicates an expected call of ListCustomUserAttributes.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) ListCustomUserAttributes(user any, options ...any) *MockCustomAttributesServiceInterfaceListCustomUserAttributesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCustomUserAttributes", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).ListCustomUserAttributes), varargs...)
	return &MockCustomAttributesServiceInterfaceListCustomUserAttributesCall{Call: call}
}

// MockCustomAttributesServiceInterfaceListCustomUserAttributesCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceListCustomUserAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCustomAttributesServiceInterfaceListCustomUserAttributesCall) Return(arg0 []*gitlab.CustomAttribute, arg1 *gitlab.Response, arg2 error) *MockCustomAttributesServiceInterfaceListCustomUserAttributesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCustomAttributesServiceInterfaceListCustomUserAttributesCall) Do(f func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceListCustomUserAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCustomAttributesServiceInterfaceListCustomUserAttributesCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) ([]*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceListCustomUserAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCustomGroupAttribute mocks base method.
func (m *MockCustomAttributesServiceInterface) SetCustomGroupAttribute(group int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{group, c}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCustomGroupAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCustomGroupAttribute indicates an expected call of SetCustomGroupAttribute.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) SetCustomGroupAttribute(group, c any, options ...any) *MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{group, c}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomGroupAttribute", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).SetCustomGroupAttribute), varargs...)
	return &MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall{Call: call}
}

// MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall) Return(arg0 *gitlab.CustomAttribute, arg1 *gitlab.Response, arg2 error) *MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall {
	c_2.Call = c_2.Call.Return(arg0, arg1, arg2)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall) Do(f func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall) DoAndReturn(f func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceSetCustomGroupAttributeCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// SetCustomProjectAttribute mocks base method.
func (m *MockCustomAttributesServiceInterface) SetCustomProjectAttribute(project int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{project, c}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCustomProjectAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCustomProjectAttribute indicates an expected call of SetCustomProjectAttribute.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) SetCustomProjectAttribute(project, c any, options ...any) *MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{project, c}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomProjectAttribute", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).SetCustomProjectAttribute), varargs...)
	return &MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall{Call: call}
}

// MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall) Return(arg0 *gitlab.CustomAttribute, arg1 *gitlab.Response, arg2 error) *MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall {
	c_2.Call = c_2.Call.Return(arg0, arg1, arg2)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall) Do(f func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall) DoAndReturn(f func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceSetCustomProjectAttributeCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}

// SetCustomUserAttribute mocks base method.
func (m *MockCustomAttributesServiceInterface) SetCustomUserAttribute(user int, c gitlab.CustomAttribute, options ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{user, c}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetCustomUserAttribute", varargs...)
	ret0, _ := ret[0].(*gitlab.CustomAttribute)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SetCustomUserAttribute indicates an expected call of SetCustomUserAttribute.
func (mr *MockCustomAttributesServiceInterfaceMockRecorder) SetCustomUserAttribute(user, c any, options ...any) *MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{user, c}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCustomUserAttribute", reflect.TypeOf((*MockCustomAttributesServiceInterface)(nil).SetCustomUserAttribute), varargs...)
	return &MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall{Call: call}
}

// MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall wrap *gomock.Call
type MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c_2 *MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall) Return(arg0 *gitlab.CustomAttribute, arg1 *gitlab.Response, arg2 error) *MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall {
	c_2.Call = c_2.Call.Return(arg0, arg1, arg2)
	return c_2
}

// Do rewrite *gomock.Call.Do
func (c_2 *MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall) Do(f func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall {
	c_2.Call = c_2.Call.Do(f)
	return c_2
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c_2 *MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall) DoAndReturn(f func(int, gitlab.CustomAttribute, ...gitlab.RequestOptionFunc) (*gitlab.CustomAttribute, *gitlab.Response, error)) *MockCustomAttributesServiceInterfaceSetCustomUserAttributeCall {
	c_2.Call = c_2.Call.DoAndReturn(f)
	return c_2
}
