// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GeoNodesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=geo_nodes_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GeoNodesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGeoNodesServiceInterface is a mock of GeoNodesServiceInterface interface.
type MockGeoNodesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGeoNodesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGeoNodesServiceInterfaceMockRecorder is the mock recorder for MockGeoNodesServiceInterface.
type MockGeoNodesServiceInterfaceMockRecorder struct {
	mock *MockGeoNodesServiceInterface
}

// NewMockGeoNodesServiceInterface creates a new mock instance.
func NewMockGeoNodesServiceInterface(ctrl *gomock.Controller) *MockGeoNodesServiceInterface {
	mock := &MockGeoNodesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGeoNodesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeoNodesServiceInterface) EXPECT() *MockGeoNodesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateGeoNode mocks base method.
func (m *MockGeoNodesServiceInterface) CreateGeoNode(arg0 *gitlab.CreateGeoNodesOptions, arg1 ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGeoNode", varargs...)
	ret0, _ := ret[0].(*gitlab.GeoNode)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGeoNode indicates an expected call of CreateGeoNode.
func (mr *MockGeoNodesServiceInterfaceMockRecorder) CreateGeoNode(arg0 any, arg1 ...any) *MockGeoNodesServiceInterfaceCreateGeoNodeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeoNode", reflect.TypeOf((*MockGeoNodesServiceInterface)(nil).CreateGeoNode), varargs...)
	return &MockGeoNodesServiceInterfaceCreateGeoNodeCall{Call: call}
}

// MockGeoNodesServiceInterfaceCreateGeoNodeCall wrap *gomock.Call
type MockGeoNodesServiceInterfaceCreateGeoNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGeoNodesServiceInterfaceCreateGeoNodeCall) Return(arg0 *gitlab.GeoNode, arg1 *gitlab.Response, arg2 error) *MockGeoNodesServiceInterfaceCreateGeoNodeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGeoNodesServiceInterfaceCreateGeoNodeCall) Do(f func(*gitlab.CreateGeoNodesOptions, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceCreateGeoNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGeoNodesServiceInterfaceCreateGeoNodeCall) DoAndReturn(f func(*gitlab.CreateGeoNodesOptions, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceCreateGeoNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGeoNode mocks base method.
func (m *MockGeoNodesServiceInterface) DeleteGeoNode(arg0 int, arg1 ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGeoNode", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGeoNode indicates an expected call of DeleteGeoNode.
func (mr *MockGeoNodesServiceInterfaceMockRecorder) DeleteGeoNode(arg0 any, arg1 ...any) *MockGeoNodesServiceInterfaceDeleteGeoNodeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGeoNode", reflect.TypeOf((*MockGeoNodesServiceInterface)(nil).DeleteGeoNode), varargs...)
	return &MockGeoNodesServiceInterfaceDeleteGeoNodeCall{Call: call}
}

// MockGeoNodesServiceInterfaceDeleteGeoNodeCall wrap *gomock.Call
type MockGeoNodesServiceInterfaceDeleteGeoNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGeoNodesServiceInterfaceDeleteGeoNodeCall) Return(arg0 *gitlab.Response, arg1 error) *MockGeoNodesServiceInterfaceDeleteGeoNodeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGeoNodesServiceInterfaceDeleteGeoNodeCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGeoNodesServiceInterfaceDeleteGeoNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGeoNodesServiceInterfaceDeleteGeoNodeCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGeoNodesServiceInterfaceDeleteGeoNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditGeoNode mocks base method.
func (m *MockGeoNodesServiceInterface) EditGeoNode(arg0 int, arg1 *gitlab.UpdateGeoNodesOptions, arg2 ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditGeoNode", varargs...)
	ret0, _ := ret[0].(*gitlab.GeoNode)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditGeoNode indicates an expected call of EditGeoNode.
func (mr *MockGeoNodesServiceInterfaceMockRecorder) EditGeoNode(arg0, arg1 any, arg2 ...any) *MockGeoNodesServiceInterfaceEditGeoNodeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditGeoNode", reflect.TypeOf((*MockGeoNodesServiceInterface)(nil).EditGeoNode), varargs...)
	return &MockGeoNodesServiceInterfaceEditGeoNodeCall{Call: call}
}

// MockGeoNodesServiceInterfaceEditGeoNodeCall wrap *gomock.Call
type MockGeoNodesServiceInterfaceEditGeoNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGeoNodesServiceInterfaceEditGeoNodeCall) Return(arg0 *gitlab.GeoNode, arg1 *gitlab.Response, arg2 error) *MockGeoNodesServiceInterfaceEditGeoNodeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGeoNodesServiceInterfaceEditGeoNodeCall) Do(f func(int, *gitlab.UpdateGeoNodesOptions, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceEditGeoNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGeoNodesServiceInterfaceEditGeoNodeCall) DoAndReturn(f func(int, *gitlab.UpdateGeoNodesOptions, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceEditGeoNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGeoNode mocks base method.
func (m *MockGeoNodesServiceInterface) GetGeoNode(arg0 int, arg1 ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGeoNode", varargs...)
	ret0, _ := ret[0].(*gitlab.GeoNode)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGeoNode indicates an expected call of GetGeoNode.
func (mr *MockGeoNodesServiceInterfaceMockRecorder) GetGeoNode(arg0 any, arg1 ...any) *MockGeoNodesServiceInterfaceGetGeoNodeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeoNode", reflect.TypeOf((*MockGeoNodesServiceInterface)(nil).GetGeoNode), varargs...)
	return &MockGeoNodesServiceInterfaceGetGeoNodeCall{Call: call}
}

// MockGeoNodesServiceInterfaceGetGeoNodeCall wrap *gomock.Call
type MockGeoNodesServiceInterfaceGetGeoNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGeoNodesServiceInterfaceGetGeoNodeCall) Return(arg0 *gitlab.GeoNode, arg1 *gitlab.Response, arg2 error) *MockGeoNodesServiceInterfaceGetGeoNodeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGeoNodesServiceInterfaceGetGeoNodeCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceGetGeoNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGeoNodesServiceInterfaceGetGeoNodeCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceGetGeoNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGeoNodes mocks base method.
func (m *MockGeoNodesServiceInterface) ListGeoNodes(arg0 *gitlab.ListGeoNodesOptions, arg1 ...gitlab.RequestOptionFunc) ([]*gitlab.GeoNode, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGeoNodes", varargs...)
	ret0, _ := ret[0].([]*gitlab.GeoNode)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGeoNodes indicates an expected call of ListGeoNodes.
func (mr *MockGeoNodesServiceInterfaceMockRecorder) ListGeoNodes(arg0 any, arg1 ...any) *MockGeoNodesServiceInterfaceListGeoNodesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGeoNodes", reflect.TypeOf((*MockGeoNodesServiceInterface)(nil).ListGeoNodes), varargs...)
	return &MockGeoNodesServiceInterfaceListGeoNodesCall{Call: call}
}

// MockGeoNodesServiceInterfaceListGeoNodesCall wrap *gomock.Call
type MockGeoNodesServiceInterfaceListGeoNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGeoNodesServiceInterfaceListGeoNodesCall) Return(arg0 []*gitlab.GeoNode, arg1 *gitlab.Response, arg2 error) *MockGeoNodesServiceInterfaceListGeoNodesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGeoNodesServiceInterfaceListGeoNodesCall) Do(f func(*gitlab.ListGeoNodesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceListGeoNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGeoNodesServiceInterfaceListGeoNodesCall) DoAndReturn(f func(*gitlab.ListGeoNodesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceListGeoNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RepairGeoNode mocks base method.
func (m *MockGeoNodesServiceInterface) RepairGeoNode(arg0 int, arg1 ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RepairGeoNode", varargs...)
	ret0, _ := ret[0].(*gitlab.GeoNode)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RepairGeoNode indicates an expected call of RepairGeoNode.
func (mr *MockGeoNodesServiceInterfaceMockRecorder) RepairGeoNode(arg0 any, arg1 ...any) *MockGeoNodesServiceInterfaceRepairGeoNodeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepairGeoNode", reflect.TypeOf((*MockGeoNodesServiceInterface)(nil).RepairGeoNode), varargs...)
	return &MockGeoNodesServiceInterfaceRepairGeoNodeCall{Call: call}
}

// MockGeoNodesServiceInterfaceRepairGeoNodeCall wrap *gomock.Call
type MockGeoNodesServiceInterfaceRepairGeoNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGeoNodesServiceInterfaceRepairGeoNodeCall) Return(arg0 *gitlab.GeoNode, arg1 *gitlab.Response, arg2 error) *MockGeoNodesServiceInterfaceRepairGeoNodeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGeoNodesServiceInterfaceRepairGeoNodeCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceRepairGeoNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGeoNodesServiceInterfaceRepairGeoNodeCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNode, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceRepairGeoNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetrieveStatusOfAllGeoNodes mocks base method.
func (m *MockGeoNodesServiceInterface) RetrieveStatusOfAllGeoNodes(arg0 ...gitlab.RequestOptionFunc) ([]*gitlab.GeoNodeStatus, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveStatusOfAllGeoNodes", varargs...)
	ret0, _ := ret[0].([]*gitlab.GeoNodeStatus)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveStatusOfAllGeoNodes indicates an expected call of RetrieveStatusOfAllGeoNodes.
func (mr *MockGeoNodesServiceInterfaceMockRecorder) RetrieveStatusOfAllGeoNodes(arg0 ...any) *MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStatusOfAllGeoNodes", reflect.TypeOf((*MockGeoNodesServiceInterface)(nil).RetrieveStatusOfAllGeoNodes), arg0...)
	return &MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall{Call: call}
}

// MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall wrap *gomock.Call
type MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall) Return(arg0 []*gitlab.GeoNodeStatus, arg1 *gitlab.Response, arg2 error) *MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall) Do(f func(...gitlab.RequestOptionFunc) ([]*gitlab.GeoNodeStatus, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) ([]*gitlab.GeoNodeStatus, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceRetrieveStatusOfAllGeoNodesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetrieveStatusOfGeoNode mocks base method.
func (m *MockGeoNodesServiceInterface) RetrieveStatusOfGeoNode(arg0 int, arg1 ...gitlab.RequestOptionFunc) (*gitlab.GeoNodeStatus, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RetrieveStatusOfGeoNode", varargs...)
	ret0, _ := ret[0].(*gitlab.GeoNodeStatus)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetrieveStatusOfGeoNode indicates an expected call of RetrieveStatusOfGeoNode.
func (mr *MockGeoNodesServiceInterfaceMockRecorder) RetrieveStatusOfGeoNode(arg0 any, arg1 ...any) *MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveStatusOfGeoNode", reflect.TypeOf((*MockGeoNodesServiceInterface)(nil).RetrieveStatusOfGeoNode), varargs...)
	return &MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall{Call: call}
}

// MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall wrap *gomock.Call
type MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall) Return(arg0 *gitlab.GeoNodeStatus, arg1 *gitlab.Response, arg2 error) *MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNodeStatus, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.GeoNodeStatus, *gitlab.Response, error)) *MockGeoNodesServiceInterfaceRetrieveStatusOfGeoNodeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
