// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ResourceWeightEventsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=resource_weight_events_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ResourceWeightEventsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceWeightEventsServiceInterface is a mock of ResourceWeightEventsServiceInterface interface.
type MockResourceWeightEventsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResourceWeightEventsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockResourceWeightEventsServiceInterfaceMockRecorder is the mock recorder for MockResourceWeightEventsServiceInterface.
type MockResourceWeightEventsServiceInterfaceMockRecorder struct {
	mock *MockResourceWeightEventsServiceInterface
}

// NewMockResourceWeightEventsServiceInterface creates a new mock instance.
func NewMockResourceWeightEventsServiceInterface(ctrl *gomock.Controller) *MockResourceWeightEventsServiceInterface {
	mock := &MockResourceWeightEventsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockResourceWeightEventsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceWeightEventsServiceInterface) EXPECT() *MockResourceWeightEventsServiceInterfaceMockRecorder {
	return m.recorder
}

// ListIssueWeightEvents mocks base method.
func (m *MockResourceWeightEventsServiceInterface) ListIssueWeightEvents(pid any, issue int, opt *gitlab.ListWeightEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.WeightEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, issue, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListIssueWeightEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.WeightEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListIssueWeightEvents indicates an expected call of ListIssueWeightEvents.
func (mr *MockResourceWeightEventsServiceInterfaceMockRecorder) ListIssueWeightEvents(pid, issue, opt any, options ...any) *MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, issue, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssueWeightEvents", reflect.TypeOf((*MockResourceWeightEventsServiceInterface)(nil).ListIssueWeightEvents), varargs...)
	return &MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall{Call: call}
}

// MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall wrap *gomock.Call
type MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall) Return(arg0 []*gitlab.WeightEvent, arg1 *gitlab.Response, arg2 error) *MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall) Do(f func(any, int, *gitlab.ListWeightEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.WeightEvent, *gitlab.Response, error)) *MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall) DoAndReturn(f func(any, int, *gitlab.ListWeightEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.WeightEvent, *gitlab.Response, error)) *MockResourceWeightEventsServiceInterfaceListIssueWeightEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
