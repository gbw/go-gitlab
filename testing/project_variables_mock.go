// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProjectVariablesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=project_variables_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ProjectVariablesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectVariablesServiceInterface is a mock of ProjectVariablesServiceInterface interface.
type MockProjectVariablesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectVariablesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectVariablesServiceInterfaceMockRecorder is the mock recorder for MockProjectVariablesServiceInterface.
type MockProjectVariablesServiceInterfaceMockRecorder struct {
	mock *MockProjectVariablesServiceInterface
}

// NewMockProjectVariablesServiceInterface creates a new mock instance.
func NewMockProjectVariablesServiceInterface(ctrl *gomock.Controller) *MockProjectVariablesServiceInterface {
	mock := &MockProjectVariablesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectVariablesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectVariablesServiceInterface) EXPECT() *MockProjectVariablesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateVariable mocks base method.
func (m *MockProjectVariablesServiceInterface) CreateVariable(pid any, opt *gitlab.CreateProjectVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVariable indicates an expected call of CreateVariable.
func (mr *MockProjectVariablesServiceInterfaceMockRecorder) CreateVariable(pid, opt any, options ...any) *MockProjectVariablesServiceInterfaceCreateVariableCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVariable", reflect.TypeOf((*MockProjectVariablesServiceInterface)(nil).CreateVariable), varargs...)
	return &MockProjectVariablesServiceInterfaceCreateVariableCall{Call: call}
}

// MockProjectVariablesServiceInterfaceCreateVariableCall wrap *gomock.Call
type MockProjectVariablesServiceInterfaceCreateVariableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectVariablesServiceInterfaceCreateVariableCall) Return(arg0 *gitlab.ProjectVariable, arg1 *gitlab.Response, arg2 error) *MockProjectVariablesServiceInterfaceCreateVariableCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectVariablesServiceInterfaceCreateVariableCall) Do(f func(any, *gitlab.CreateProjectVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error)) *MockProjectVariablesServiceInterfaceCreateVariableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectVariablesServiceInterfaceCreateVariableCall) DoAndReturn(f func(any, *gitlab.CreateProjectVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error)) *MockProjectVariablesServiceInterfaceCreateVariableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetVariable mocks base method.
func (m *MockProjectVariablesServiceInterface) GetVariable(pid any, key string, opt *gitlab.GetProjectVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVariable indicates an expected call of GetVariable.
func (mr *MockProjectVariablesServiceInterfaceMockRecorder) GetVariable(pid, key, opt any, options ...any) *MockProjectVariablesServiceInterfaceGetVariableCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, key, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariable", reflect.TypeOf((*MockProjectVariablesServiceInterface)(nil).GetVariable), varargs...)
	return &MockProjectVariablesServiceInterfaceGetVariableCall{Call: call}
}

// MockProjectVariablesServiceInterfaceGetVariableCall wrap *gomock.Call
type MockProjectVariablesServiceInterfaceGetVariableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectVariablesServiceInterfaceGetVariableCall) Return(arg0 *gitlab.ProjectVariable, arg1 *gitlab.Response, arg2 error) *MockProjectVariablesServiceInterfaceGetVariableCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectVariablesServiceInterfaceGetVariableCall) Do(f func(any, string, *gitlab.GetProjectVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error)) *MockProjectVariablesServiceInterfaceGetVariableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectVariablesServiceInterfaceGetVariableCall) DoAndReturn(f func(any, string, *gitlab.GetProjectVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error)) *MockProjectVariablesServiceInterfaceGetVariableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListVariables mocks base method.
func (m *MockProjectVariablesServiceInterface) ListVariables(pid any, opt *gitlab.ListProjectVariablesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVariables", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVariables indicates an expected call of ListVariables.
func (mr *MockProjectVariablesServiceInterfaceMockRecorder) ListVariables(pid, opt any, options ...any) *MockProjectVariablesServiceInterfaceListVariablesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVariables", reflect.TypeOf((*MockProjectVariablesServiceInterface)(nil).ListVariables), varargs...)
	return &MockProjectVariablesServiceInterfaceListVariablesCall{Call: call}
}

// MockProjectVariablesServiceInterfaceListVariablesCall wrap *gomock.Call
type MockProjectVariablesServiceInterfaceListVariablesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectVariablesServiceInterfaceListVariablesCall) Return(arg0 []*gitlab.ProjectVariable, arg1 *gitlab.Response, arg2 error) *MockProjectVariablesServiceInterfaceListVariablesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectVariablesServiceInterfaceListVariablesCall) Do(f func(any, *gitlab.ListProjectVariablesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectVariable, *gitlab.Response, error)) *MockProjectVariablesServiceInterfaceListVariablesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectVariablesServiceInterfaceListVariablesCall) DoAndReturn(f func(any, *gitlab.ListProjectVariablesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectVariable, *gitlab.Response, error)) *MockProjectVariablesServiceInterfaceListVariablesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveVariable mocks base method.
func (m *MockProjectVariablesServiceInterface) RemoveVariable(pid any, key string, opt *gitlab.RemoveProjectVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveVariable indicates an expected call of RemoveVariable.
func (mr *MockProjectVariablesServiceInterfaceMockRecorder) RemoveVariable(pid, key, opt any, options ...any) *MockProjectVariablesServiceInterfaceRemoveVariableCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, key, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVariable", reflect.TypeOf((*MockProjectVariablesServiceInterface)(nil).RemoveVariable), varargs...)
	return &MockProjectVariablesServiceInterfaceRemoveVariableCall{Call: call}
}

// MockProjectVariablesServiceInterfaceRemoveVariableCall wrap *gomock.Call
type MockProjectVariablesServiceInterfaceRemoveVariableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectVariablesServiceInterfaceRemoveVariableCall) Return(arg0 *gitlab.Response, arg1 error) *MockProjectVariablesServiceInterfaceRemoveVariableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectVariablesServiceInterfaceRemoveVariableCall) Do(f func(any, string, *gitlab.RemoveProjectVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProjectVariablesServiceInterfaceRemoveVariableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectVariablesServiceInterfaceRemoveVariableCall) DoAndReturn(f func(any, string, *gitlab.RemoveProjectVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProjectVariablesServiceInterfaceRemoveVariableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateVariable mocks base method.
func (m *MockProjectVariablesServiceInterface) UpdateVariable(pid any, key string, opt *gitlab.UpdateProjectVariableOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, key, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateVariable", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateVariable indicates an expected call of UpdateVariable.
func (mr *MockProjectVariablesServiceInterfaceMockRecorder) UpdateVariable(pid, key, opt any, options ...any) *MockProjectVariablesServiceInterfaceUpdateVariableCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, key, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVariable", reflect.TypeOf((*MockProjectVariablesServiceInterface)(nil).UpdateVariable), varargs...)
	return &MockProjectVariablesServiceInterfaceUpdateVariableCall{Call: call}
}

// MockProjectVariablesServiceInterfaceUpdateVariableCall wrap *gomock.Call
type MockProjectVariablesServiceInterfaceUpdateVariableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectVariablesServiceInterfaceUpdateVariableCall) Return(arg0 *gitlab.ProjectVariable, arg1 *gitlab.Response, arg2 error) *MockProjectVariablesServiceInterfaceUpdateVariableCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectVariablesServiceInterfaceUpdateVariableCall) Do(f func(any, string, *gitlab.UpdateProjectVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error)) *MockProjectVariablesServiceInterfaceUpdateVariableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectVariablesServiceInterfaceUpdateVariableCall) DoAndReturn(f func(any, string, *gitlab.UpdateProjectVariableOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectVariable, *gitlab.Response, error)) *MockProjectVariablesServiceInterfaceUpdateVariableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
