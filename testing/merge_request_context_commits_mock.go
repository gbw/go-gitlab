// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: MergeRequestContextCommitsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=merge_request_context_commits_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go MergeRequestContextCommitsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockMergeRequestContextCommitsServiceInterface is a mock of MergeRequestContextCommitsServiceInterface interface.
type MockMergeRequestContextCommitsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMergeRequestContextCommitsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockMergeRequestContextCommitsServiceInterfaceMockRecorder is the mock recorder for MockMergeRequestContextCommitsServiceInterface.
type MockMergeRequestContextCommitsServiceInterfaceMockRecorder struct {
	mock *MockMergeRequestContextCommitsServiceInterface
}

// NewMockMergeRequestContextCommitsServiceInterface creates a new mock instance.
func NewMockMergeRequestContextCommitsServiceInterface(ctrl *gomock.Controller) *MockMergeRequestContextCommitsServiceInterface {
	mock := &MockMergeRequestContextCommitsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMergeRequestContextCommitsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMergeRequestContextCommitsServiceInterface) EXPECT() *MockMergeRequestContextCommitsServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateMergeRequestContextCommits mocks base method.
func (m *MockMergeRequestContextCommitsServiceInterface) CreateMergeRequestContextCommits(pid any, mergeRequest int64, opt *gitlab.CreateMergeRequestContextCommitsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMergeRequestContextCommits", varargs...)
	ret0, _ := ret[0].([]*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateMergeRequestContextCommits indicates an expected call of CreateMergeRequestContextCommits.
func (mr *MockMergeRequestContextCommitsServiceInterfaceMockRecorder) CreateMergeRequestContextCommits(pid, mergeRequest, opt any, options ...any) *MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequestContextCommits", reflect.TypeOf((*MockMergeRequestContextCommitsServiceInterface)(nil).CreateMergeRequestContextCommits), varargs...)
	return &MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall{Call: call}
}

// MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall wrap *gomock.Call
type MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall) Return(arg0 []*gitlab.Commit, arg1 *gitlab.Response, arg2 error) *MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall) Do(f func(any, int64, *gitlab.CreateMergeRequestContextCommitsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error)) *MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall) DoAndReturn(f func(any, int64, *gitlab.CreateMergeRequestContextCommitsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error)) *MockMergeRequestContextCommitsServiceInterfaceCreateMergeRequestContextCommitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteMergeRequestContextCommits mocks base method.
func (m *MockMergeRequestContextCommitsServiceInterface) DeleteMergeRequestContextCommits(pid any, mergeRequest int64, opt *gitlab.DeleteMergeRequestContextCommitsOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMergeRequestContextCommits", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMergeRequestContextCommits indicates an expected call of DeleteMergeRequestContextCommits.
func (mr *MockMergeRequestContextCommitsServiceInterfaceMockRecorder) DeleteMergeRequestContextCommits(pid, mergeRequest, opt any, options ...any) *MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMergeRequestContextCommits", reflect.TypeOf((*MockMergeRequestContextCommitsServiceInterface)(nil).DeleteMergeRequestContextCommits), varargs...)
	return &MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall{Call: call}
}

// MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall wrap *gomock.Call
type MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall) Return(arg0 *gitlab.Response, arg1 error) *MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall) Do(f func(any, int64, *gitlab.DeleteMergeRequestContextCommitsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall) DoAndReturn(f func(any, int64, *gitlab.DeleteMergeRequestContextCommitsOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockMergeRequestContextCommitsServiceInterfaceDeleteMergeRequestContextCommitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMergeRequestContextCommits mocks base method.
func (m *MockMergeRequestContextCommitsServiceInterface) ListMergeRequestContextCommits(pid any, mergeRequest int64, options ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, mergeRequest}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMergeRequestContextCommits", varargs...)
	ret0, _ := ret[0].([]*gitlab.Commit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMergeRequestContextCommits indicates an expected call of ListMergeRequestContextCommits.
func (mr *MockMergeRequestContextCommitsServiceInterfaceMockRecorder) ListMergeRequestContextCommits(pid, mergeRequest any, options ...any) *MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, mergeRequest}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMergeRequestContextCommits", reflect.TypeOf((*MockMergeRequestContextCommitsServiceInterface)(nil).ListMergeRequestContextCommits), varargs...)
	return &MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall{Call: call}
}

// MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall wrap *gomock.Call
type MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall) Return(arg0 []*gitlab.Commit, arg1 *gitlab.Response, arg2 error) *MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall) Do(f func(any, int64, ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error)) *MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall) DoAndReturn(f func(any, int64, ...gitlab.RequestOptionFunc) ([]*gitlab.Commit, *gitlab.Response, error)) *MockMergeRequestContextCommitsServiceInterfaceListMergeRequestContextCommitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
