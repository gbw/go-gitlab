// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ModelRegistryServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=model_registry_mock.go -package=testing gitlab.com/gitlab-org/api/client-go ModelRegistryServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	bytes "bytes"
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockModelRegistryServiceInterface is a mock of ModelRegistryServiceInterface interface.
type MockModelRegistryServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockModelRegistryServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockModelRegistryServiceInterfaceMockRecorder is the mock recorder for MockModelRegistryServiceInterface.
type MockModelRegistryServiceInterfaceMockRecorder struct {
	mock *MockModelRegistryServiceInterface
}

// NewMockModelRegistryServiceInterface creates a new mock instance.
func NewMockModelRegistryServiceInterface(ctrl *gomock.Controller) *MockModelRegistryServiceInterface {
	mock := &MockModelRegistryServiceInterface{ctrl: ctrl}
	mock.recorder = &MockModelRegistryServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelRegistryServiceInterface) EXPECT() *MockModelRegistryServiceInterfaceMockRecorder {
	return m.recorder
}

// DownloadMachineLearningModelPackage mocks base method.
func (m *MockModelRegistryServiceInterface) DownloadMachineLearningModelPackage(pid, modelVersionID any, path, filename string, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, modelVersionID, path, filename}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadMachineLearningModelPackage", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DownloadMachineLearningModelPackage indicates an expected call of DownloadMachineLearningModelPackage.
func (mr *MockModelRegistryServiceInterfaceMockRecorder) DownloadMachineLearningModelPackage(pid, modelVersionID, path, filename any, options ...any) *MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, modelVersionID, path, filename}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadMachineLearningModelPackage", reflect.TypeOf((*MockModelRegistryServiceInterface)(nil).DownloadMachineLearningModelPackage), varargs...)
	return &MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall{Call: call}
}

// MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall wrap *gomock.Call
type MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall) Return(arg0 *bytes.Reader, arg1 *gitlab.Response, arg2 error) *MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall) Do(f func(any, any, string, string, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall) DoAndReturn(f func(any, any, string, string, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *MockModelRegistryServiceInterfaceDownloadMachineLearningModelPackageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
