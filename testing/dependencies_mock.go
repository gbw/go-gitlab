// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: DependenciesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=dependencies_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go DependenciesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDependenciesServiceInterface is a mock of DependenciesServiceInterface interface.
type MockDependenciesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDependenciesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockDependenciesServiceInterfaceMockRecorder is the mock recorder for MockDependenciesServiceInterface.
type MockDependenciesServiceInterfaceMockRecorder struct {
	mock *MockDependenciesServiceInterface
}

// NewMockDependenciesServiceInterface creates a new mock instance.
func NewMockDependenciesServiceInterface(ctrl *gomock.Controller) *MockDependenciesServiceInterface {
	mock := &MockDependenciesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDependenciesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependenciesServiceInterface) EXPECT() *MockDependenciesServiceInterfaceMockRecorder {
	return m.recorder
}

// ListProjectDependencies mocks base method.
func (m *MockDependenciesServiceInterface) ListProjectDependencies(pid any, opt *gitlab.ListProjectDependenciesOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Dependency, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectDependencies", varargs...)
	ret0, _ := ret[0].([]*gitlab.Dependency)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectDependencies indicates an expected call of ListProjectDependencies.
func (mr *MockDependenciesServiceInterfaceMockRecorder) ListProjectDependencies(pid, opt any, options ...any) *MockDependenciesServiceInterfaceListProjectDependenciesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectDependencies", reflect.TypeOf((*MockDependenciesServiceInterface)(nil).ListProjectDependencies), varargs...)
	return &MockDependenciesServiceInterfaceListProjectDependenciesCall{Call: call}
}

// MockDependenciesServiceInterfaceListProjectDependenciesCall wrap *gomock.Call
type MockDependenciesServiceInterfaceListProjectDependenciesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDependenciesServiceInterfaceListProjectDependenciesCall) Return(arg0 []*gitlab.Dependency, arg1 *gitlab.Response, arg2 error) *MockDependenciesServiceInterfaceListProjectDependenciesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDependenciesServiceInterfaceListProjectDependenciesCall) Do(f func(any, *gitlab.ListProjectDependenciesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Dependency, *gitlab.Response, error)) *MockDependenciesServiceInterfaceListProjectDependenciesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDependenciesServiceInterfaceListProjectDependenciesCall) DoAndReturn(f func(any, *gitlab.ListProjectDependenciesOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Dependency, *gitlab.Response, error)) *MockDependenciesServiceInterfaceListProjectDependenciesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
