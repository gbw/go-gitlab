// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: KeysServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=keys_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go KeysServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockKeysServiceInterface is a mock of KeysServiceInterface interface.
type MockKeysServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKeysServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockKeysServiceInterfaceMockRecorder is the mock recorder for MockKeysServiceInterface.
type MockKeysServiceInterfaceMockRecorder struct {
	mock *MockKeysServiceInterface
}

// NewMockKeysServiceInterface creates a new mock instance.
func NewMockKeysServiceInterface(ctrl *gomock.Controller) *MockKeysServiceInterface {
	mock := &MockKeysServiceInterface{ctrl: ctrl}
	mock.recorder = &MockKeysServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeysServiceInterface) EXPECT() *MockKeysServiceInterfaceMockRecorder {
	return m.recorder
}

// GetKeyByFingerprint mocks base method.
func (m *MockKeysServiceInterface) GetKeyByFingerprint(opt *gitlab.GetKeyByFingerprintOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Key, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyByFingerprint", varargs...)
	ret0, _ := ret[0].(*gitlab.Key)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKeyByFingerprint indicates an expected call of GetKeyByFingerprint.
func (mr *MockKeysServiceInterfaceMockRecorder) GetKeyByFingerprint(opt any, options ...any) *MockKeysServiceInterfaceGetKeyByFingerprintCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyByFingerprint", reflect.TypeOf((*MockKeysServiceInterface)(nil).GetKeyByFingerprint), varargs...)
	return &MockKeysServiceInterfaceGetKeyByFingerprintCall{Call: call}
}

// MockKeysServiceInterfaceGetKeyByFingerprintCall wrap *gomock.Call
type MockKeysServiceInterfaceGetKeyByFingerprintCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKeysServiceInterfaceGetKeyByFingerprintCall) Return(arg0 *gitlab.Key, arg1 *gitlab.Response, arg2 error) *MockKeysServiceInterfaceGetKeyByFingerprintCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKeysServiceInterfaceGetKeyByFingerprintCall) Do(f func(*gitlab.GetKeyByFingerprintOptions, ...gitlab.RequestOptionFunc) (*gitlab.Key, *gitlab.Response, error)) *MockKeysServiceInterfaceGetKeyByFingerprintCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKeysServiceInterfaceGetKeyByFingerprintCall) DoAndReturn(f func(*gitlab.GetKeyByFingerprintOptions, ...gitlab.RequestOptionFunc) (*gitlab.Key, *gitlab.Response, error)) *MockKeysServiceInterfaceGetKeyByFingerprintCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetKeyWithUser mocks base method.
func (m *MockKeysServiceInterface) GetKeyWithUser(key int, options ...gitlab.RequestOptionFunc) (*gitlab.Key, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetKeyWithUser", varargs...)
	ret0, _ := ret[0].(*gitlab.Key)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKeyWithUser indicates an expected call of GetKeyWithUser.
func (mr *MockKeysServiceInterfaceMockRecorder) GetKeyWithUser(key any, options ...any) *MockKeysServiceInterfaceGetKeyWithUserCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{key}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyWithUser", reflect.TypeOf((*MockKeysServiceInterface)(nil).GetKeyWithUser), varargs...)
	return &MockKeysServiceInterfaceGetKeyWithUserCall{Call: call}
}

// MockKeysServiceInterfaceGetKeyWithUserCall wrap *gomock.Call
type MockKeysServiceInterfaceGetKeyWithUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockKeysServiceInterfaceGetKeyWithUserCall) Return(arg0 *gitlab.Key, arg1 *gitlab.Response, arg2 error) *MockKeysServiceInterfaceGetKeyWithUserCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockKeysServiceInterfaceGetKeyWithUserCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Key, *gitlab.Response, error)) *MockKeysServiceInterfaceGetKeyWithUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockKeysServiceInterfaceGetKeyWithUserCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Key, *gitlab.Response, error)) *MockKeysServiceInterfaceGetKeyWithUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
