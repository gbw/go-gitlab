// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: EnvironmentsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=environments_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go EnvironmentsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockEnvironmentsServiceInterface is a mock of EnvironmentsServiceInterface interface.
type MockEnvironmentsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockEnvironmentsServiceInterfaceMockRecorder is the mock recorder for MockEnvironmentsServiceInterface.
type MockEnvironmentsServiceInterfaceMockRecorder struct {
	mock *MockEnvironmentsServiceInterface
}

// NewMockEnvironmentsServiceInterface creates a new mock instance.
func NewMockEnvironmentsServiceInterface(ctrl *gomock.Controller) *MockEnvironmentsServiceInterface {
	mock := &MockEnvironmentsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEnvironmentsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentsServiceInterface) EXPECT() *MockEnvironmentsServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateEnvironment mocks base method.
func (m *MockEnvironmentsServiceInterface) CreateEnvironment(pid any, opt *gitlab.CreateEnvironmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.Environment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEnvironment indicates an expected call of CreateEnvironment.
func (mr *MockEnvironmentsServiceInterfaceMockRecorder) CreateEnvironment(pid, opt any, options ...any) *MockEnvironmentsServiceInterfaceCreateEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnvironment", reflect.TypeOf((*MockEnvironmentsServiceInterface)(nil).CreateEnvironment), varargs...)
	return &MockEnvironmentsServiceInterfaceCreateEnvironmentCall{Call: call}
}

// MockEnvironmentsServiceInterfaceCreateEnvironmentCall wrap *gomock.Call
type MockEnvironmentsServiceInterfaceCreateEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentsServiceInterfaceCreateEnvironmentCall) Return(arg0 *gitlab.Environment, arg1 *gitlab.Response, arg2 error) *MockEnvironmentsServiceInterfaceCreateEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentsServiceInterfaceCreateEnvironmentCall) Do(f func(any, *gitlab.CreateEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceCreateEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentsServiceInterfaceCreateEnvironmentCall) DoAndReturn(f func(any, *gitlab.CreateEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceCreateEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteEnvironment mocks base method.
func (m *MockEnvironmentsServiceInterface) DeleteEnvironment(pid any, environment int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEnvironment indicates an expected call of DeleteEnvironment.
func (mr *MockEnvironmentsServiceInterfaceMockRecorder) DeleteEnvironment(pid, environment any, options ...any) *MockEnvironmentsServiceInterfaceDeleteEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environment}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvironment", reflect.TypeOf((*MockEnvironmentsServiceInterface)(nil).DeleteEnvironment), varargs...)
	return &MockEnvironmentsServiceInterfaceDeleteEnvironmentCall{Call: call}
}

// MockEnvironmentsServiceInterfaceDeleteEnvironmentCall wrap *gomock.Call
type MockEnvironmentsServiceInterfaceDeleteEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentsServiceInterfaceDeleteEnvironmentCall) Return(arg0 *gitlab.Response, arg1 error) *MockEnvironmentsServiceInterfaceDeleteEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentsServiceInterfaceDeleteEnvironmentCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockEnvironmentsServiceInterfaceDeleteEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentsServiceInterfaceDeleteEnvironmentCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockEnvironmentsServiceInterfaceDeleteEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditEnvironment mocks base method.
func (m *MockEnvironmentsServiceInterface) EditEnvironment(pid any, environment int, opt *gitlab.EditEnvironmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environment, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.Environment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditEnvironment indicates an expected call of EditEnvironment.
func (mr *MockEnvironmentsServiceInterfaceMockRecorder) EditEnvironment(pid, environment, opt any, options ...any) *MockEnvironmentsServiceInterfaceEditEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environment, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditEnvironment", reflect.TypeOf((*MockEnvironmentsServiceInterface)(nil).EditEnvironment), varargs...)
	return &MockEnvironmentsServiceInterfaceEditEnvironmentCall{Call: call}
}

// MockEnvironmentsServiceInterfaceEditEnvironmentCall wrap *gomock.Call
type MockEnvironmentsServiceInterfaceEditEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentsServiceInterfaceEditEnvironmentCall) Return(arg0 *gitlab.Environment, arg1 *gitlab.Response, arg2 error) *MockEnvironmentsServiceInterfaceEditEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentsServiceInterfaceEditEnvironmentCall) Do(f func(any, int, *gitlab.EditEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceEditEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentsServiceInterfaceEditEnvironmentCall) DoAndReturn(f func(any, int, *gitlab.EditEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceEditEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetEnvironment mocks base method.
func (m *MockEnvironmentsServiceInterface) GetEnvironment(pid any, environment int, options ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environment}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.Environment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetEnvironment indicates an expected call of GetEnvironment.
func (mr *MockEnvironmentsServiceInterfaceMockRecorder) GetEnvironment(pid, environment any, options ...any) *MockEnvironmentsServiceInterfaceGetEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environment}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockEnvironmentsServiceInterface)(nil).GetEnvironment), varargs...)
	return &MockEnvironmentsServiceInterfaceGetEnvironmentCall{Call: call}
}

// MockEnvironmentsServiceInterfaceGetEnvironmentCall wrap *gomock.Call
type MockEnvironmentsServiceInterfaceGetEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentsServiceInterfaceGetEnvironmentCall) Return(arg0 *gitlab.Environment, arg1 *gitlab.Response, arg2 error) *MockEnvironmentsServiceInterfaceGetEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentsServiceInterfaceGetEnvironmentCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceGetEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentsServiceInterfaceGetEnvironmentCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceGetEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListEnvironments mocks base method.
func (m *MockEnvironmentsServiceInterface) ListEnvironments(pid any, opts *gitlab.ListEnvironmentsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.Environment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opts}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEnvironments", varargs...)
	ret0, _ := ret[0].([]*gitlab.Environment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEnvironments indicates an expected call of ListEnvironments.
func (mr *MockEnvironmentsServiceInterfaceMockRecorder) ListEnvironments(pid, opts any, options ...any) *MockEnvironmentsServiceInterfaceListEnvironmentsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opts}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnvironments", reflect.TypeOf((*MockEnvironmentsServiceInterface)(nil).ListEnvironments), varargs...)
	return &MockEnvironmentsServiceInterfaceListEnvironmentsCall{Call: call}
}

// MockEnvironmentsServiceInterfaceListEnvironmentsCall wrap *gomock.Call
type MockEnvironmentsServiceInterfaceListEnvironmentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentsServiceInterfaceListEnvironmentsCall) Return(arg0 []*gitlab.Environment, arg1 *gitlab.Response, arg2 error) *MockEnvironmentsServiceInterfaceListEnvironmentsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentsServiceInterfaceListEnvironmentsCall) Do(f func(any, *gitlab.ListEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceListEnvironmentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentsServiceInterfaceListEnvironmentsCall) DoAndReturn(f func(any, *gitlab.ListEnvironmentsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceListEnvironmentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StopEnvironment mocks base method.
func (m *MockEnvironmentsServiceInterface) StopEnvironment(pid any, environmentID int, opt *gitlab.StopEnvironmentOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, environmentID, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopEnvironment", varargs...)
	ret0, _ := ret[0].(*gitlab.Environment)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StopEnvironment indicates an expected call of StopEnvironment.
func (mr *MockEnvironmentsServiceInterfaceMockRecorder) StopEnvironment(pid, environmentID, opt any, options ...any) *MockEnvironmentsServiceInterfaceStopEnvironmentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, environmentID, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEnvironment", reflect.TypeOf((*MockEnvironmentsServiceInterface)(nil).StopEnvironment), varargs...)
	return &MockEnvironmentsServiceInterfaceStopEnvironmentCall{Call: call}
}

// MockEnvironmentsServiceInterfaceStopEnvironmentCall wrap *gomock.Call
type MockEnvironmentsServiceInterfaceStopEnvironmentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEnvironmentsServiceInterfaceStopEnvironmentCall) Return(arg0 *gitlab.Environment, arg1 *gitlab.Response, arg2 error) *MockEnvironmentsServiceInterfaceStopEnvironmentCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEnvironmentsServiceInterfaceStopEnvironmentCall) Do(f func(any, int, *gitlab.StopEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceStopEnvironmentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEnvironmentsServiceInterfaceStopEnvironmentCall) DoAndReturn(f func(any, int, *gitlab.StopEnvironmentOptions, ...gitlab.RequestOptionFunc) (*gitlab.Environment, *gitlab.Response, error)) *MockEnvironmentsServiceInterfaceStopEnvironmentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
