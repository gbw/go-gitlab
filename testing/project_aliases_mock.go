// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProjectAliasesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=project_aliases_mock.go -package=testing gitlab.com/gitlab-org/api/client-go ProjectAliasesServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectAliasesServiceInterface is a mock of ProjectAliasesServiceInterface interface.
type MockProjectAliasesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectAliasesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectAliasesServiceInterfaceMockRecorder is the mock recorder for MockProjectAliasesServiceInterface.
type MockProjectAliasesServiceInterfaceMockRecorder struct {
	mock *MockProjectAliasesServiceInterface
}

// NewMockProjectAliasesServiceInterface creates a new mock instance.
func NewMockProjectAliasesServiceInterface(ctrl *gomock.Controller) *MockProjectAliasesServiceInterface {
	mock := &MockProjectAliasesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectAliasesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectAliasesServiceInterface) EXPECT() *MockProjectAliasesServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateProjectAlias mocks base method.
func (m *MockProjectAliasesServiceInterface) CreateProjectAlias(opt *gitlab.CreateProjectAliasOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectAlias, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectAlias", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectAlias)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectAlias indicates an expected call of CreateProjectAlias.
func (mr *MockProjectAliasesServiceInterfaceMockRecorder) CreateProjectAlias(opt any, options ...any) *MockProjectAliasesServiceInterfaceCreateProjectAliasCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectAlias", reflect.TypeOf((*MockProjectAliasesServiceInterface)(nil).CreateProjectAlias), varargs...)
	return &MockProjectAliasesServiceInterfaceCreateProjectAliasCall{Call: call}
}

// MockProjectAliasesServiceInterfaceCreateProjectAliasCall wrap *gomock.Call
type MockProjectAliasesServiceInterfaceCreateProjectAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectAliasesServiceInterfaceCreateProjectAliasCall) Return(arg0 *gitlab.ProjectAlias, arg1 *gitlab.Response, arg2 error) *MockProjectAliasesServiceInterfaceCreateProjectAliasCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectAliasesServiceInterfaceCreateProjectAliasCall) Do(f func(*gitlab.CreateProjectAliasOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectAlias, *gitlab.Response, error)) *MockProjectAliasesServiceInterfaceCreateProjectAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectAliasesServiceInterfaceCreateProjectAliasCall) DoAndReturn(f func(*gitlab.CreateProjectAliasOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectAlias, *gitlab.Response, error)) *MockProjectAliasesServiceInterfaceCreateProjectAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProjectAlias mocks base method.
func (m *MockProjectAliasesServiceInterface) DeleteProjectAlias(name string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectAlias", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectAlias indicates an expected call of DeleteProjectAlias.
func (mr *MockProjectAliasesServiceInterfaceMockRecorder) DeleteProjectAlias(name any, options ...any) *MockProjectAliasesServiceInterfaceDeleteProjectAliasCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectAlias", reflect.TypeOf((*MockProjectAliasesServiceInterface)(nil).DeleteProjectAlias), varargs...)
	return &MockProjectAliasesServiceInterfaceDeleteProjectAliasCall{Call: call}
}

// MockProjectAliasesServiceInterfaceDeleteProjectAliasCall wrap *gomock.Call
type MockProjectAliasesServiceInterfaceDeleteProjectAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectAliasesServiceInterfaceDeleteProjectAliasCall) Return(arg0 *gitlab.Response, arg1 error) *MockProjectAliasesServiceInterfaceDeleteProjectAliasCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectAliasesServiceInterfaceDeleteProjectAliasCall) Do(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProjectAliasesServiceInterfaceDeleteProjectAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectAliasesServiceInterfaceDeleteProjectAliasCall) DoAndReturn(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockProjectAliasesServiceInterfaceDeleteProjectAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectAlias mocks base method.
func (m *MockProjectAliasesServiceInterface) GetProjectAlias(name string, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectAlias, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectAlias", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectAlias)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectAlias indicates an expected call of GetProjectAlias.
func (mr *MockProjectAliasesServiceInterfaceMockRecorder) GetProjectAlias(name any, options ...any) *MockProjectAliasesServiceInterfaceGetProjectAliasCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectAlias", reflect.TypeOf((*MockProjectAliasesServiceInterface)(nil).GetProjectAlias), varargs...)
	return &MockProjectAliasesServiceInterfaceGetProjectAliasCall{Call: call}
}

// MockProjectAliasesServiceInterfaceGetProjectAliasCall wrap *gomock.Call
type MockProjectAliasesServiceInterfaceGetProjectAliasCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectAliasesServiceInterfaceGetProjectAliasCall) Return(arg0 *gitlab.ProjectAlias, arg1 *gitlab.Response, arg2 error) *MockProjectAliasesServiceInterfaceGetProjectAliasCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectAliasesServiceInterfaceGetProjectAliasCall) Do(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectAlias, *gitlab.Response, error)) *MockProjectAliasesServiceInterfaceGetProjectAliasCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectAliasesServiceInterfaceGetProjectAliasCall) DoAndReturn(f func(string, ...gitlab.RequestOptionFunc) (*gitlab.ProjectAlias, *gitlab.Response, error)) *MockProjectAliasesServiceInterfaceGetProjectAliasCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListProjectAliases mocks base method.
func (m *MockProjectAliasesServiceInterface) ListProjectAliases(options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectAlias, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectAliases", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectAlias)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectAliases indicates an expected call of ListProjectAliases.
func (mr *MockProjectAliasesServiceInterfaceMockRecorder) ListProjectAliases(options ...any) *MockProjectAliasesServiceInterfaceListProjectAliasesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectAliases", reflect.TypeOf((*MockProjectAliasesServiceInterface)(nil).ListProjectAliases), options...)
	return &MockProjectAliasesServiceInterfaceListProjectAliasesCall{Call: call}
}

// MockProjectAliasesServiceInterfaceListProjectAliasesCall wrap *gomock.Call
type MockProjectAliasesServiceInterfaceListProjectAliasesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectAliasesServiceInterfaceListProjectAliasesCall) Return(arg0 []*gitlab.ProjectAlias, arg1 *gitlab.Response, arg2 error) *MockProjectAliasesServiceInterfaceListProjectAliasesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectAliasesServiceInterfaceListProjectAliasesCall) Do(f func(...gitlab.RequestOptionFunc) ([]*gitlab.ProjectAlias, *gitlab.Response, error)) *MockProjectAliasesServiceInterfaceListProjectAliasesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectAliasesServiceInterfaceListProjectAliasesCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) ([]*gitlab.ProjectAlias, *gitlab.Response, error)) *MockProjectAliasesServiceInterfaceListProjectAliasesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
