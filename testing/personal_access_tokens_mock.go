// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: PersonalAccessTokensServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=personal_access_tokens_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go PersonalAccessTokensServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockPersonalAccessTokensServiceInterface is a mock of PersonalAccessTokensServiceInterface interface.
type MockPersonalAccessTokensServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPersonalAccessTokensServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockPersonalAccessTokensServiceInterfaceMockRecorder is the mock recorder for MockPersonalAccessTokensServiceInterface.
type MockPersonalAccessTokensServiceInterfaceMockRecorder struct {
	mock *MockPersonalAccessTokensServiceInterface
}

// NewMockPersonalAccessTokensServiceInterface creates a new mock instance.
func NewMockPersonalAccessTokensServiceInterface(ctrl *gomock.Controller) *MockPersonalAccessTokensServiceInterface {
	mock := &MockPersonalAccessTokensServiceInterface{ctrl: ctrl}
	mock.recorder = &MockPersonalAccessTokensServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonalAccessTokensServiceInterface) EXPECT() *MockPersonalAccessTokensServiceInterfaceMockRecorder {
	return m.recorder
}

// GetSinglePersonalAccessToken mocks base method.
func (m *MockPersonalAccessTokensServiceInterface) GetSinglePersonalAccessToken(options ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSinglePersonalAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSinglePersonalAccessToken indicates an expected call of GetSinglePersonalAccessToken.
func (mr *MockPersonalAccessTokensServiceInterfaceMockRecorder) GetSinglePersonalAccessToken(options ...any) *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSinglePersonalAccessToken", reflect.TypeOf((*MockPersonalAccessTokensServiceInterface)(nil).GetSinglePersonalAccessToken), options...)
	return &MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall{Call: call}
}

// MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall wrap *gomock.Call
type MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall) Return(arg0 *gitlab.PersonalAccessToken, arg1 *gitlab.Response, arg2 error) *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSinglePersonalAccessTokenByID mocks base method.
func (m *MockPersonalAccessTokensServiceInterface) GetSinglePersonalAccessTokenByID(token int, options ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{token}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSinglePersonalAccessTokenByID", varargs...)
	ret0, _ := ret[0].(*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSinglePersonalAccessTokenByID indicates an expected call of GetSinglePersonalAccessTokenByID.
func (mr *MockPersonalAccessTokensServiceInterfaceMockRecorder) GetSinglePersonalAccessTokenByID(token any, options ...any) *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{token}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSinglePersonalAccessTokenByID", reflect.TypeOf((*MockPersonalAccessTokensServiceInterface)(nil).GetSinglePersonalAccessTokenByID), varargs...)
	return &MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall{Call: call}
}

// MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall wrap *gomock.Call
type MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall) Return(arg0 *gitlab.PersonalAccessToken, arg1 *gitlab.Response, arg2 error) *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceGetSinglePersonalAccessTokenByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPersonalAccessTokens mocks base method.
func (m *MockPersonalAccessTokensServiceInterface) ListPersonalAccessTokens(opt *gitlab.ListPersonalAccessTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPersonalAccessTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPersonalAccessTokens indicates an expected call of ListPersonalAccessTokens.
func (mr *MockPersonalAccessTokensServiceInterfaceMockRecorder) ListPersonalAccessTokens(opt any, options ...any) *MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPersonalAccessTokens", reflect.TypeOf((*MockPersonalAccessTokensServiceInterface)(nil).ListPersonalAccessTokens), varargs...)
	return &MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall{Call: call}
}

// MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall wrap *gomock.Call
type MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall) Return(arg0 []*gitlab.PersonalAccessToken, arg1 *gitlab.Response, arg2 error) *MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall) Do(f func(*gitlab.ListPersonalAccessTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall) DoAndReturn(f func(*gitlab.ListPersonalAccessTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceListPersonalAccessTokensCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RevokePersonalAccessToken mocks base method.
func (m *MockPersonalAccessTokensServiceInterface) RevokePersonalAccessToken(token int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{token}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokePersonalAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokePersonalAccessToken indicates an expected call of RevokePersonalAccessToken.
func (mr *MockPersonalAccessTokensServiceInterfaceMockRecorder) RevokePersonalAccessToken(token any, options ...any) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{token}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePersonalAccessToken", reflect.TypeOf((*MockPersonalAccessTokensServiceInterface)(nil).RevokePersonalAccessToken), varargs...)
	return &MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall{Call: call}
}

// MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall wrap *gomock.Call
type MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall) Return(arg0 *gitlab.Response, arg1 error) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RevokePersonalAccessTokenByID mocks base method.
func (m *MockPersonalAccessTokensServiceInterface) RevokePersonalAccessTokenByID(token int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{token}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokePersonalAccessTokenByID", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokePersonalAccessTokenByID indicates an expected call of RevokePersonalAccessTokenByID.
func (mr *MockPersonalAccessTokensServiceInterfaceMockRecorder) RevokePersonalAccessTokenByID(token any, options ...any) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{token}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePersonalAccessTokenByID", reflect.TypeOf((*MockPersonalAccessTokensServiceInterface)(nil).RevokePersonalAccessTokenByID), varargs...)
	return &MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall{Call: call}
}

// MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall wrap *gomock.Call
type MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall) Return(arg0 *gitlab.Response, arg1 error) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall) Do(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall) DoAndReturn(f func(int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RevokePersonalAccessTokenSelf mocks base method.
func (m *MockPersonalAccessTokensServiceInterface) RevokePersonalAccessTokenSelf(options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RevokePersonalAccessTokenSelf", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokePersonalAccessTokenSelf indicates an expected call of RevokePersonalAccessTokenSelf.
func (mr *MockPersonalAccessTokensServiceInterfaceMockRecorder) RevokePersonalAccessTokenSelf(options ...any) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePersonalAccessTokenSelf", reflect.TypeOf((*MockPersonalAccessTokensServiceInterface)(nil).RevokePersonalAccessTokenSelf), options...)
	return &MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall{Call: call}
}

// MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall wrap *gomock.Call
type MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall) Return(arg0 *gitlab.Response, arg1 error) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall) Do(f func(...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRevokePersonalAccessTokenSelfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RotatePersonalAccessToken mocks base method.
func (m *MockPersonalAccessTokensServiceInterface) RotatePersonalAccessToken(token int, opt *gitlab.RotatePersonalAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{token, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotatePersonalAccessToken", varargs...)
	ret0, _ := ret[0].(*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RotatePersonalAccessToken indicates an expected call of RotatePersonalAccessToken.
func (mr *MockPersonalAccessTokensServiceInterfaceMockRecorder) RotatePersonalAccessToken(token, opt any, options ...any) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{token, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotatePersonalAccessToken", reflect.TypeOf((*MockPersonalAccessTokensServiceInterface)(nil).RotatePersonalAccessToken), varargs...)
	return &MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall{Call: call}
}

// MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall wrap *gomock.Call
type MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall) Return(arg0 *gitlab.PersonalAccessToken, arg1 *gitlab.Response, arg2 error) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall) Do(f func(int, *gitlab.RotatePersonalAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall) DoAndReturn(f func(int, *gitlab.RotatePersonalAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RotatePersonalAccessTokenByID mocks base method.
func (m *MockPersonalAccessTokensServiceInterface) RotatePersonalAccessTokenByID(token int, opt *gitlab.RotatePersonalAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{token, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotatePersonalAccessTokenByID", varargs...)
	ret0, _ := ret[0].(*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RotatePersonalAccessTokenByID indicates an expected call of RotatePersonalAccessTokenByID.
func (mr *MockPersonalAccessTokensServiceInterfaceMockRecorder) RotatePersonalAccessTokenByID(token, opt any, options ...any) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{token, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotatePersonalAccessTokenByID", reflect.TypeOf((*MockPersonalAccessTokensServiceInterface)(nil).RotatePersonalAccessTokenByID), varargs...)
	return &MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall{Call: call}
}

// MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall wrap *gomock.Call
type MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall) Return(arg0 *gitlab.PersonalAccessToken, arg1 *gitlab.Response, arg2 error) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall) Do(f func(int, *gitlab.RotatePersonalAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall) DoAndReturn(f func(int, *gitlab.RotatePersonalAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RotatePersonalAccessTokenSelf mocks base method.
func (m *MockPersonalAccessTokensServiceInterface) RotatePersonalAccessTokenSelf(opt *gitlab.RotatePersonalAccessTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotatePersonalAccessTokenSelf", varargs...)
	ret0, _ := ret[0].(*gitlab.PersonalAccessToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RotatePersonalAccessTokenSelf indicates an expected call of RotatePersonalAccessTokenSelf.
func (mr *MockPersonalAccessTokensServiceInterfaceMockRecorder) RotatePersonalAccessTokenSelf(opt any, options ...any) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotatePersonalAccessTokenSelf", reflect.TypeOf((*MockPersonalAccessTokensServiceInterface)(nil).RotatePersonalAccessTokenSelf), varargs...)
	return &MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall{Call: call}
}

// MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall wrap *gomock.Call
type MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall) Return(arg0 *gitlab.PersonalAccessToken, arg1 *gitlab.Response, arg2 error) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall) Do(f func(*gitlab.RotatePersonalAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall) DoAndReturn(f func(*gitlab.RotatePersonalAccessTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.PersonalAccessToken, *gitlab.Response, error)) *MockPersonalAccessTokensServiceInterfaceRotatePersonalAccessTokenSelfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
