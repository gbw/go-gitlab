// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupRelationsExportServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_relations_export_mock.go -package=testing gitlab.com/gitlab-org/api/client-go GroupRelationsExportServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	bytes "bytes"
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupRelationsExportServiceInterface is a mock of GroupRelationsExportServiceInterface interface.
type MockGroupRelationsExportServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRelationsExportServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupRelationsExportServiceInterfaceMockRecorder is the mock recorder for MockGroupRelationsExportServiceInterface.
type MockGroupRelationsExportServiceInterfaceMockRecorder struct {
	mock *MockGroupRelationsExportServiceInterface
}

// NewMockGroupRelationsExportServiceInterface creates a new mock instance.
func NewMockGroupRelationsExportServiceInterface(ctrl *gomock.Controller) *MockGroupRelationsExportServiceInterface {
	mock := &MockGroupRelationsExportServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupRelationsExportServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRelationsExportServiceInterface) EXPECT() *MockGroupRelationsExportServiceInterfaceMockRecorder {
	return m.recorder
}

// ExportDownload mocks base method.
func (m *MockGroupRelationsExportServiceInterface) ExportDownload(gid any, opt *gitlab.GroupRelationsDownloadOptions, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportDownload", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExportDownload indicates an expected call of ExportDownload.
func (mr *MockGroupRelationsExportServiceInterfaceMockRecorder) ExportDownload(gid, opt any, options ...any) *MockGroupRelationsExportServiceInterfaceExportDownloadCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportDownload", reflect.TypeOf((*MockGroupRelationsExportServiceInterface)(nil).ExportDownload), varargs...)
	return &MockGroupRelationsExportServiceInterfaceExportDownloadCall{Call: call}
}

// MockGroupRelationsExportServiceInterfaceExportDownloadCall wrap *gomock.Call
type MockGroupRelationsExportServiceInterfaceExportDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupRelationsExportServiceInterfaceExportDownloadCall) Return(arg0 *bytes.Reader, arg1 *gitlab.Response, arg2 error) *MockGroupRelationsExportServiceInterfaceExportDownloadCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupRelationsExportServiceInterfaceExportDownloadCall) Do(f func(any, *gitlab.GroupRelationsDownloadOptions, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *MockGroupRelationsExportServiceInterfaceExportDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupRelationsExportServiceInterfaceExportDownloadCall) DoAndReturn(f func(any, *gitlab.GroupRelationsDownloadOptions, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *MockGroupRelationsExportServiceInterfaceExportDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListExportStatus mocks base method.
func (m *MockGroupRelationsExportServiceInterface) ListExportStatus(gid any, opt *gitlab.ListGroupRelationsStatusOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRelationStatus, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListExportStatus", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupRelationStatus)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExportStatus indicates an expected call of ListExportStatus.
func (mr *MockGroupRelationsExportServiceInterfaceMockRecorder) ListExportStatus(gid, opt any, options ...any) *MockGroupRelationsExportServiceInterfaceListExportStatusCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportStatus", reflect.TypeOf((*MockGroupRelationsExportServiceInterface)(nil).ListExportStatus), varargs...)
	return &MockGroupRelationsExportServiceInterfaceListExportStatusCall{Call: call}
}

// MockGroupRelationsExportServiceInterfaceListExportStatusCall wrap *gomock.Call
type MockGroupRelationsExportServiceInterfaceListExportStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupRelationsExportServiceInterfaceListExportStatusCall) Return(arg0 []*gitlab.GroupRelationStatus, arg1 *gitlab.Response, arg2 error) *MockGroupRelationsExportServiceInterfaceListExportStatusCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupRelationsExportServiceInterfaceListExportStatusCall) Do(f func(any, *gitlab.ListGroupRelationsStatusOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRelationStatus, *gitlab.Response, error)) *MockGroupRelationsExportServiceInterfaceListExportStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupRelationsExportServiceInterfaceListExportStatusCall) DoAndReturn(f func(any, *gitlab.ListGroupRelationsStatusOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupRelationStatus, *gitlab.Response, error)) *MockGroupRelationsExportServiceInterfaceListExportStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleExport mocks base method.
func (m *MockGroupRelationsExportServiceInterface) ScheduleExport(gid any, opt *gitlab.GroupRelationsScheduleExportOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleExport", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleExport indicates an expected call of ScheduleExport.
func (mr *MockGroupRelationsExportServiceInterfaceMockRecorder) ScheduleExport(gid, opt any, options ...any) *MockGroupRelationsExportServiceInterfaceScheduleExportCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleExport", reflect.TypeOf((*MockGroupRelationsExportServiceInterface)(nil).ScheduleExport), varargs...)
	return &MockGroupRelationsExportServiceInterfaceScheduleExportCall{Call: call}
}

// MockGroupRelationsExportServiceInterfaceScheduleExportCall wrap *gomock.Call
type MockGroupRelationsExportServiceInterfaceScheduleExportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupRelationsExportServiceInterfaceScheduleExportCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupRelationsExportServiceInterfaceScheduleExportCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupRelationsExportServiceInterfaceScheduleExportCall) Do(f func(any, *gitlab.GroupRelationsScheduleExportOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupRelationsExportServiceInterfaceScheduleExportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupRelationsExportServiceInterfaceScheduleExportCall) DoAndReturn(f func(any, *gitlab.GroupRelationsScheduleExportOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupRelationsExportServiceInterfaceScheduleExportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
