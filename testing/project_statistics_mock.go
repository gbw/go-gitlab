// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ProjectStatisticsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=project_statistics_mock.go -package=testing gitlab.com/gitlab-org/api/client-go ProjectStatisticsServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockProjectStatisticsServiceInterface is a mock of ProjectStatisticsServiceInterface interface.
type MockProjectStatisticsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectStatisticsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockProjectStatisticsServiceInterfaceMockRecorder is the mock recorder for MockProjectStatisticsServiceInterface.
type MockProjectStatisticsServiceInterfaceMockRecorder struct {
	mock *MockProjectStatisticsServiceInterface
}

// NewMockProjectStatisticsServiceInterface creates a new mock instance.
func NewMockProjectStatisticsServiceInterface(ctrl *gomock.Controller) *MockProjectStatisticsServiceInterface {
	mock := &MockProjectStatisticsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockProjectStatisticsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectStatisticsServiceInterface) EXPECT() *MockProjectStatisticsServiceInterfaceMockRecorder {
	return m.recorder
}

// Last30DaysStatistics mocks base method.
func (m *MockProjectStatisticsServiceInterface) Last30DaysStatistics(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectStatistics, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Last30DaysStatistics", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectStatistics)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Last30DaysStatistics indicates an expected call of Last30DaysStatistics.
func (mr *MockProjectStatisticsServiceInterfaceMockRecorder) Last30DaysStatistics(pid any, options ...any) *MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last30DaysStatistics", reflect.TypeOf((*MockProjectStatisticsServiceInterface)(nil).Last30DaysStatistics), varargs...)
	return &MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall{Call: call}
}

// MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall wrap *gomock.Call
type MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall) Return(arg0 *gitlab.ProjectStatistics, arg1 *gitlab.Response, arg2 error) *MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.ProjectStatistics, *gitlab.Response, error)) *MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.ProjectStatistics, *gitlab.Response, error)) *MockProjectStatisticsServiceInterfaceLast30DaysStatisticsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
