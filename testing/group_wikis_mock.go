// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupWikisServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_wikis_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupWikisServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupWikisServiceInterface is a mock of GroupWikisServiceInterface interface.
type MockGroupWikisServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupWikisServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupWikisServiceInterfaceMockRecorder is the mock recorder for MockGroupWikisServiceInterface.
type MockGroupWikisServiceInterfaceMockRecorder struct {
	mock *MockGroupWikisServiceInterface
}

// NewMockGroupWikisServiceInterface creates a new mock instance.
func NewMockGroupWikisServiceInterface(ctrl *gomock.Controller) *MockGroupWikisServiceInterface {
	mock := &MockGroupWikisServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupWikisServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupWikisServiceInterface) EXPECT() *MockGroupWikisServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateGroupWikiPage mocks base method.
func (m *MockGroupWikisServiceInterface) CreateGroupWikiPage(gid any, opt *gitlab.CreateGroupWikiPageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupWikiPage", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupWiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupWikiPage indicates an expected call of CreateGroupWikiPage.
func (mr *MockGroupWikisServiceInterfaceMockRecorder) CreateGroupWikiPage(gid, opt any, options ...any) *MockGroupWikisServiceInterfaceCreateGroupWikiPageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupWikiPage", reflect.TypeOf((*MockGroupWikisServiceInterface)(nil).CreateGroupWikiPage), varargs...)
	return &MockGroupWikisServiceInterfaceCreateGroupWikiPageCall{Call: call}
}

// MockGroupWikisServiceInterfaceCreateGroupWikiPageCall wrap *gomock.Call
type MockGroupWikisServiceInterfaceCreateGroupWikiPageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupWikisServiceInterfaceCreateGroupWikiPageCall) Return(arg0 *gitlab.GroupWiki, arg1 *gitlab.Response, arg2 error) *MockGroupWikisServiceInterfaceCreateGroupWikiPageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupWikisServiceInterfaceCreateGroupWikiPageCall) Do(f func(any, *gitlab.CreateGroupWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error)) *MockGroupWikisServiceInterfaceCreateGroupWikiPageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupWikisServiceInterfaceCreateGroupWikiPageCall) DoAndReturn(f func(any, *gitlab.CreateGroupWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error)) *MockGroupWikisServiceInterfaceCreateGroupWikiPageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGroupWikiPage mocks base method.
func (m *MockGroupWikisServiceInterface) DeleteGroupWikiPage(gid any, slug string, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, slug}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupWikiPage", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupWikiPage indicates an expected call of DeleteGroupWikiPage.
func (mr *MockGroupWikisServiceInterfaceMockRecorder) DeleteGroupWikiPage(gid, slug any, options ...any) *MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, slug}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupWikiPage", reflect.TypeOf((*MockGroupWikisServiceInterface)(nil).DeleteGroupWikiPage), varargs...)
	return &MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall{Call: call}
}

// MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall wrap *gomock.Call
type MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall) Do(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall) DoAndReturn(f func(any, string, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupWikisServiceInterfaceDeleteGroupWikiPageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EditGroupWikiPage mocks base method.
func (m *MockGroupWikisServiceInterface) EditGroupWikiPage(gid any, slug string, opt *gitlab.EditGroupWikiPageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, slug, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EditGroupWikiPage", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupWiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EditGroupWikiPage indicates an expected call of EditGroupWikiPage.
func (mr *MockGroupWikisServiceInterfaceMockRecorder) EditGroupWikiPage(gid, slug, opt any, options ...any) *MockGroupWikisServiceInterfaceEditGroupWikiPageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, slug, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditGroupWikiPage", reflect.TypeOf((*MockGroupWikisServiceInterface)(nil).EditGroupWikiPage), varargs...)
	return &MockGroupWikisServiceInterfaceEditGroupWikiPageCall{Call: call}
}

// MockGroupWikisServiceInterfaceEditGroupWikiPageCall wrap *gomock.Call
type MockGroupWikisServiceInterfaceEditGroupWikiPageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupWikisServiceInterfaceEditGroupWikiPageCall) Return(arg0 *gitlab.GroupWiki, arg1 *gitlab.Response, arg2 error) *MockGroupWikisServiceInterfaceEditGroupWikiPageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupWikisServiceInterfaceEditGroupWikiPageCall) Do(f func(any, string, *gitlab.EditGroupWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error)) *MockGroupWikisServiceInterfaceEditGroupWikiPageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupWikisServiceInterfaceEditGroupWikiPageCall) DoAndReturn(f func(any, string, *gitlab.EditGroupWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error)) *MockGroupWikisServiceInterfaceEditGroupWikiPageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupWikiPage mocks base method.
func (m *MockGroupWikisServiceInterface) GetGroupWikiPage(gid any, slug string, opt *gitlab.GetGroupWikiPageOptions, options ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, slug, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupWikiPage", varargs...)
	ret0, _ := ret[0].(*gitlab.GroupWiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupWikiPage indicates an expected call of GetGroupWikiPage.
func (mr *MockGroupWikisServiceInterfaceMockRecorder) GetGroupWikiPage(gid, slug, opt any, options ...any) *MockGroupWikisServiceInterfaceGetGroupWikiPageCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, slug, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupWikiPage", reflect.TypeOf((*MockGroupWikisServiceInterface)(nil).GetGroupWikiPage), varargs...)
	return &MockGroupWikisServiceInterfaceGetGroupWikiPageCall{Call: call}
}

// MockGroupWikisServiceInterfaceGetGroupWikiPageCall wrap *gomock.Call
type MockGroupWikisServiceInterfaceGetGroupWikiPageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupWikisServiceInterfaceGetGroupWikiPageCall) Return(arg0 *gitlab.GroupWiki, arg1 *gitlab.Response, arg2 error) *MockGroupWikisServiceInterfaceGetGroupWikiPageCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupWikisServiceInterfaceGetGroupWikiPageCall) Do(f func(any, string, *gitlab.GetGroupWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error)) *MockGroupWikisServiceInterfaceGetGroupWikiPageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupWikisServiceInterfaceGetGroupWikiPageCall) DoAndReturn(f func(any, string, *gitlab.GetGroupWikiPageOptions, ...gitlab.RequestOptionFunc) (*gitlab.GroupWiki, *gitlab.Response, error)) *MockGroupWikisServiceInterfaceGetGroupWikiPageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupWikis mocks base method.
func (m *MockGroupWikisServiceInterface) ListGroupWikis(gid any, opt *gitlab.ListGroupWikisOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.GroupWiki, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupWikis", varargs...)
	ret0, _ := ret[0].([]*gitlab.GroupWiki)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupWikis indicates an expected call of ListGroupWikis.
func (mr *MockGroupWikisServiceInterfaceMockRecorder) ListGroupWikis(gid, opt any, options ...any) *MockGroupWikisServiceInterfaceListGroupWikisCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupWikis", reflect.TypeOf((*MockGroupWikisServiceInterface)(nil).ListGroupWikis), varargs...)
	return &MockGroupWikisServiceInterfaceListGroupWikisCall{Call: call}
}

// MockGroupWikisServiceInterfaceListGroupWikisCall wrap *gomock.Call
type MockGroupWikisServiceInterfaceListGroupWikisCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupWikisServiceInterfaceListGroupWikisCall) Return(arg0 []*gitlab.GroupWiki, arg1 *gitlab.Response, arg2 error) *MockGroupWikisServiceInterfaceListGroupWikisCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupWikisServiceInterfaceListGroupWikisCall) Do(f func(any, *gitlab.ListGroupWikisOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupWiki, *gitlab.Response, error)) *MockGroupWikisServiceInterfaceListGroupWikisCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupWikisServiceInterfaceListGroupWikisCall) DoAndReturn(f func(any, *gitlab.ListGroupWikisOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.GroupWiki, *gitlab.Response, error)) *MockGroupWikisServiceInterfaceListGroupWikisCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
