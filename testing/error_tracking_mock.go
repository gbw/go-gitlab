// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ErrorTrackingServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=error_tracking_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ErrorTrackingServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockErrorTrackingServiceInterface is a mock of ErrorTrackingServiceInterface interface.
type MockErrorTrackingServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockErrorTrackingServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockErrorTrackingServiceInterfaceMockRecorder is the mock recorder for MockErrorTrackingServiceInterface.
type MockErrorTrackingServiceInterfaceMockRecorder struct {
	mock *MockErrorTrackingServiceInterface
}

// NewMockErrorTrackingServiceInterface creates a new mock instance.
func NewMockErrorTrackingServiceInterface(ctrl *gomock.Controller) *MockErrorTrackingServiceInterface {
	mock := &MockErrorTrackingServiceInterface{ctrl: ctrl}
	mock.recorder = &MockErrorTrackingServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorTrackingServiceInterface) EXPECT() *MockErrorTrackingServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateClientKey mocks base method.
func (m *MockErrorTrackingServiceInterface) CreateClientKey(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingClientKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateClientKey", varargs...)
	ret0, _ := ret[0].(*gitlab.ErrorTrackingClientKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateClientKey indicates an expected call of CreateClientKey.
func (mr *MockErrorTrackingServiceInterfaceMockRecorder) CreateClientKey(pid any, options ...any) *MockErrorTrackingServiceInterfaceCreateClientKeyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientKey", reflect.TypeOf((*MockErrorTrackingServiceInterface)(nil).CreateClientKey), varargs...)
	return &MockErrorTrackingServiceInterfaceCreateClientKeyCall{Call: call}
}

// MockErrorTrackingServiceInterfaceCreateClientKeyCall wrap *gomock.Call
type MockErrorTrackingServiceInterfaceCreateClientKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockErrorTrackingServiceInterfaceCreateClientKeyCall) Return(arg0 *gitlab.ErrorTrackingClientKey, arg1 *gitlab.Response, arg2 error) *MockErrorTrackingServiceInterfaceCreateClientKeyCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockErrorTrackingServiceInterfaceCreateClientKeyCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingClientKey, *gitlab.Response, error)) *MockErrorTrackingServiceInterfaceCreateClientKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockErrorTrackingServiceInterfaceCreateClientKeyCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingClientKey, *gitlab.Response, error)) *MockErrorTrackingServiceInterfaceCreateClientKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteClientKey mocks base method.
func (m *MockErrorTrackingServiceInterface) DeleteClientKey(pid any, keyID int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, keyID}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteClientKey", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClientKey indicates an expected call of DeleteClientKey.
func (mr *MockErrorTrackingServiceInterfaceMockRecorder) DeleteClientKey(pid, keyID any, options ...any) *MockErrorTrackingServiceInterfaceDeleteClientKeyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, keyID}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientKey", reflect.TypeOf((*MockErrorTrackingServiceInterface)(nil).DeleteClientKey), varargs...)
	return &MockErrorTrackingServiceInterfaceDeleteClientKeyCall{Call: call}
}

// MockErrorTrackingServiceInterfaceDeleteClientKeyCall wrap *gomock.Call
type MockErrorTrackingServiceInterfaceDeleteClientKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockErrorTrackingServiceInterfaceDeleteClientKeyCall) Return(arg0 *gitlab.Response, arg1 error) *MockErrorTrackingServiceInterfaceDeleteClientKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockErrorTrackingServiceInterfaceDeleteClientKeyCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockErrorTrackingServiceInterfaceDeleteClientKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockErrorTrackingServiceInterfaceDeleteClientKeyCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockErrorTrackingServiceInterfaceDeleteClientKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableDisableErrorTracking mocks base method.
func (m *MockErrorTrackingServiceInterface) EnableDisableErrorTracking(pid any, opt *gitlab.EnableDisableErrorTrackingOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableDisableErrorTracking", varargs...)
	ret0, _ := ret[0].(*gitlab.ErrorTrackingSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EnableDisableErrorTracking indicates an expected call of EnableDisableErrorTracking.
func (mr *MockErrorTrackingServiceInterfaceMockRecorder) EnableDisableErrorTracking(pid, opt any, options ...any) *MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableDisableErrorTracking", reflect.TypeOf((*MockErrorTrackingServiceInterface)(nil).EnableDisableErrorTracking), varargs...)
	return &MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall{Call: call}
}

// MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall wrap *gomock.Call
type MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall) Return(arg0 *gitlab.ErrorTrackingSettings, arg1 *gitlab.Response, arg2 error) *MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall) Do(f func(any, *gitlab.EnableDisableErrorTrackingOptions, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error)) *MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall) DoAndReturn(f func(any, *gitlab.EnableDisableErrorTrackingOptions, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error)) *MockErrorTrackingServiceInterfaceEnableDisableErrorTrackingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetErrorTrackingSettings mocks base method.
func (m *MockErrorTrackingServiceInterface) GetErrorTrackingSettings(pid any, options ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetErrorTrackingSettings", varargs...)
	ret0, _ := ret[0].(*gitlab.ErrorTrackingSettings)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetErrorTrackingSettings indicates an expected call of GetErrorTrackingSettings.
func (mr *MockErrorTrackingServiceInterfaceMockRecorder) GetErrorTrackingSettings(pid any, options ...any) *MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrorTrackingSettings", reflect.TypeOf((*MockErrorTrackingServiceInterface)(nil).GetErrorTrackingSettings), varargs...)
	return &MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall{Call: call}
}

// MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall wrap *gomock.Call
type MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall) Return(arg0 *gitlab.ErrorTrackingSettings, arg1 *gitlab.Response, arg2 error) *MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error)) *MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.ErrorTrackingSettings, *gitlab.Response, error)) *MockErrorTrackingServiceInterfaceGetErrorTrackingSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListClientKeys mocks base method.
func (m *MockErrorTrackingServiceInterface) ListClientKeys(pid any, opt *gitlab.ListClientKeysOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ErrorTrackingClientKey, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClientKeys", varargs...)
	ret0, _ := ret[0].([]*gitlab.ErrorTrackingClientKey)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListClientKeys indicates an expected call of ListClientKeys.
func (mr *MockErrorTrackingServiceInterfaceMockRecorder) ListClientKeys(pid, opt any, options ...any) *MockErrorTrackingServiceInterfaceListClientKeysCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientKeys", reflect.TypeOf((*MockErrorTrackingServiceInterface)(nil).ListClientKeys), varargs...)
	return &MockErrorTrackingServiceInterfaceListClientKeysCall{Call: call}
}

// MockErrorTrackingServiceInterfaceListClientKeysCall wrap *gomock.Call
type MockErrorTrackingServiceInterfaceListClientKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockErrorTrackingServiceInterfaceListClientKeysCall) Return(arg0 []*gitlab.ErrorTrackingClientKey, arg1 *gitlab.Response, arg2 error) *MockErrorTrackingServiceInterfaceListClientKeysCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockErrorTrackingServiceInterfaceListClientKeysCall) Do(f func(any, *gitlab.ListClientKeysOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ErrorTrackingClientKey, *gitlab.Response, error)) *MockErrorTrackingServiceInterfaceListClientKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockErrorTrackingServiceInterfaceListClientKeysCall) DoAndReturn(f func(any, *gitlab.ListClientKeysOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ErrorTrackingClientKey, *gitlab.Response, error)) *MockErrorTrackingServiceInterfaceListClientKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
