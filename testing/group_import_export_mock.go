// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: GroupImportExportServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=group_import_export_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go GroupImportExportServiceInterface
//

package testing

import (
	bytes "bytes"
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockGroupImportExportServiceInterface is a mock of GroupImportExportServiceInterface interface.
type MockGroupImportExportServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupImportExportServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockGroupImportExportServiceInterfaceMockRecorder is the mock recorder for MockGroupImportExportServiceInterface.
type MockGroupImportExportServiceInterfaceMockRecorder struct {
	mock *MockGroupImportExportServiceInterface
}

// NewMockGroupImportExportServiceInterface creates a new mock instance.
func NewMockGroupImportExportServiceInterface(ctrl *gomock.Controller) *MockGroupImportExportServiceInterface {
	mock := &MockGroupImportExportServiceInterface{ctrl: ctrl}
	mock.recorder = &MockGroupImportExportServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupImportExportServiceInterface) EXPECT() *MockGroupImportExportServiceInterfaceMockRecorder {
	return m.recorder
}

// ExportDownload mocks base method.
func (m *MockGroupImportExportServiceInterface) ExportDownload(gid any, options ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExportDownload", varargs...)
	ret0, _ := ret[0].(*bytes.Reader)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExportDownload indicates an expected call of ExportDownload.
func (mr *MockGroupImportExportServiceInterfaceMockRecorder) ExportDownload(gid any, options ...any) *MockGroupImportExportServiceInterfaceExportDownloadCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportDownload", reflect.TypeOf((*MockGroupImportExportServiceInterface)(nil).ExportDownload), varargs...)
	return &MockGroupImportExportServiceInterfaceExportDownloadCall{Call: call}
}

// MockGroupImportExportServiceInterfaceExportDownloadCall wrap *gomock.Call
type MockGroupImportExportServiceInterfaceExportDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupImportExportServiceInterfaceExportDownloadCall) Return(arg0 *bytes.Reader, arg1 *gitlab.Response, arg2 error) *MockGroupImportExportServiceInterfaceExportDownloadCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupImportExportServiceInterfaceExportDownloadCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *MockGroupImportExportServiceInterfaceExportDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupImportExportServiceInterfaceExportDownloadCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*bytes.Reader, *gitlab.Response, error)) *MockGroupImportExportServiceInterfaceExportDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportFile mocks base method.
func (m *MockGroupImportExportServiceInterface) ImportFile(opt *gitlab.GroupImportFileOptions, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportFile", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportFile indicates an expected call of ImportFile.
func (mr *MockGroupImportExportServiceInterfaceMockRecorder) ImportFile(opt any, options ...any) *MockGroupImportExportServiceInterfaceImportFileCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportFile", reflect.TypeOf((*MockGroupImportExportServiceInterface)(nil).ImportFile), varargs...)
	return &MockGroupImportExportServiceInterfaceImportFileCall{Call: call}
}

// MockGroupImportExportServiceInterfaceImportFileCall wrap *gomock.Call
type MockGroupImportExportServiceInterfaceImportFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupImportExportServiceInterfaceImportFileCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupImportExportServiceInterfaceImportFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupImportExportServiceInterfaceImportFileCall) Do(f func(*gitlab.GroupImportFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupImportExportServiceInterfaceImportFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupImportExportServiceInterfaceImportFileCall) DoAndReturn(f func(*gitlab.GroupImportFileOptions, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupImportExportServiceInterfaceImportFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ScheduleExport mocks base method.
func (m *MockGroupImportExportServiceInterface) ScheduleExport(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleExport", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleExport indicates an expected call of ScheduleExport.
func (mr *MockGroupImportExportServiceInterfaceMockRecorder) ScheduleExport(gid any, options ...any) *MockGroupImportExportServiceInterfaceScheduleExportCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleExport", reflect.TypeOf((*MockGroupImportExportServiceInterface)(nil).ScheduleExport), varargs...)
	return &MockGroupImportExportServiceInterfaceScheduleExportCall{Call: call}
}

// MockGroupImportExportServiceInterfaceScheduleExportCall wrap *gomock.Call
type MockGroupImportExportServiceInterfaceScheduleExportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupImportExportServiceInterfaceScheduleExportCall) Return(arg0 *gitlab.Response, arg1 error) *MockGroupImportExportServiceInterfaceScheduleExportCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupImportExportServiceInterfaceScheduleExportCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupImportExportServiceInterfaceScheduleExportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupImportExportServiceInterfaceScheduleExportCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockGroupImportExportServiceInterfaceScheduleExportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
