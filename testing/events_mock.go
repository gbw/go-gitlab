// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: EventsServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=events_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go EventsServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockEventsServiceInterface is a mock of EventsServiceInterface interface.
type MockEventsServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEventsServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockEventsServiceInterfaceMockRecorder is the mock recorder for MockEventsServiceInterface.
type MockEventsServiceInterfaceMockRecorder struct {
	mock *MockEventsServiceInterface
}

// NewMockEventsServiceInterface creates a new mock instance.
func NewMockEventsServiceInterface(ctrl *gomock.Controller) *MockEventsServiceInterface {
	mock := &MockEventsServiceInterface{ctrl: ctrl}
	mock.recorder = &MockEventsServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsServiceInterface) EXPECT() *MockEventsServiceInterfaceMockRecorder {
	return m.recorder
}

// ListCurrentUserContributionEvents mocks base method.
func (m *MockEventsServiceInterface) ListCurrentUserContributionEvents(opt *gitlab.ListContributionEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ContributionEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCurrentUserContributionEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.ContributionEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCurrentUserContributionEvents indicates an expected call of ListCurrentUserContributionEvents.
func (mr *MockEventsServiceInterfaceMockRecorder) ListCurrentUserContributionEvents(opt any, options ...any) *MockEventsServiceInterfaceListCurrentUserContributionEventsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCurrentUserContributionEvents", reflect.TypeOf((*MockEventsServiceInterface)(nil).ListCurrentUserContributionEvents), varargs...)
	return &MockEventsServiceInterfaceListCurrentUserContributionEventsCall{Call: call}
}

// MockEventsServiceInterfaceListCurrentUserContributionEventsCall wrap *gomock.Call
type MockEventsServiceInterfaceListCurrentUserContributionEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventsServiceInterfaceListCurrentUserContributionEventsCall) Return(arg0 []*gitlab.ContributionEvent, arg1 *gitlab.Response, arg2 error) *MockEventsServiceInterfaceListCurrentUserContributionEventsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventsServiceInterfaceListCurrentUserContributionEventsCall) Do(f func(*gitlab.ListContributionEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ContributionEvent, *gitlab.Response, error)) *MockEventsServiceInterfaceListCurrentUserContributionEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventsServiceInterfaceListCurrentUserContributionEventsCall) DoAndReturn(f func(*gitlab.ListContributionEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ContributionEvent, *gitlab.Response, error)) *MockEventsServiceInterfaceListCurrentUserContributionEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListProjectVisibleEvents mocks base method.
func (m *MockEventsServiceInterface) ListProjectVisibleEvents(pid any, opt *gitlab.ListProjectVisibleEventsOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectEvent, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectVisibleEvents", varargs...)
	ret0, _ := ret[0].([]*gitlab.ProjectEvent)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectVisibleEvents indicates an expected call of ListProjectVisibleEvents.
func (mr *MockEventsServiceInterfaceMockRecorder) ListProjectVisibleEvents(pid, opt any, options ...any) *MockEventsServiceInterfaceListProjectVisibleEventsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectVisibleEvents", reflect.TypeOf((*MockEventsServiceInterface)(nil).ListProjectVisibleEvents), varargs...)
	return &MockEventsServiceInterfaceListProjectVisibleEventsCall{Call: call}
}

// MockEventsServiceInterfaceListProjectVisibleEventsCall wrap *gomock.Call
type MockEventsServiceInterfaceListProjectVisibleEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEventsServiceInterfaceListProjectVisibleEventsCall) Return(arg0 []*gitlab.ProjectEvent, arg1 *gitlab.Response, arg2 error) *MockEventsServiceInterfaceListProjectVisibleEventsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEventsServiceInterfaceListProjectVisibleEventsCall) Do(f func(any, *gitlab.ListProjectVisibleEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectEvent, *gitlab.Response, error)) *MockEventsServiceInterfaceListProjectVisibleEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEventsServiceInterfaceListProjectVisibleEventsCall) DoAndReturn(f func(any, *gitlab.ListProjectVisibleEventsOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ProjectEvent, *gitlab.Response, error)) *MockEventsServiceInterfaceListProjectVisibleEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
