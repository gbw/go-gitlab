// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ValidateServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=validate_mock.go -package=testing gitlab.com/gitlab-org/api/client-go ValidateServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockValidateServiceInterface is a mock of ValidateServiceInterface interface.
type MockValidateServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockValidateServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockValidateServiceInterfaceMockRecorder is the mock recorder for MockValidateServiceInterface.
type MockValidateServiceInterfaceMockRecorder struct {
	mock *MockValidateServiceInterface
}

// NewMockValidateServiceInterface creates a new mock instance.
func NewMockValidateServiceInterface(ctrl *gomock.Controller) *MockValidateServiceInterface {
	mock := &MockValidateServiceInterface{ctrl: ctrl}
	mock.recorder = &MockValidateServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidateServiceInterface) EXPECT() *MockValidateServiceInterfaceMockRecorder {
	return m.recorder
}

// ProjectLint mocks base method.
func (m *MockValidateServiceInterface) ProjectLint(pid any, opt *gitlab.ProjectLintOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectLintResult, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectLint", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectLintResult)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProjectLint indicates an expected call of ProjectLint.
func (mr *MockValidateServiceInterfaceMockRecorder) ProjectLint(pid, opt any, options ...any) *MockValidateServiceInterfaceProjectLintCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectLint", reflect.TypeOf((*MockValidateServiceInterface)(nil).ProjectLint), varargs...)
	return &MockValidateServiceInterfaceProjectLintCall{Call: call}
}

// MockValidateServiceInterfaceProjectLintCall wrap *gomock.Call
type MockValidateServiceInterfaceProjectLintCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValidateServiceInterfaceProjectLintCall) Return(arg0 *gitlab.ProjectLintResult, arg1 *gitlab.Response, arg2 error) *MockValidateServiceInterfaceProjectLintCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValidateServiceInterfaceProjectLintCall) Do(f func(any, *gitlab.ProjectLintOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectLintResult, *gitlab.Response, error)) *MockValidateServiceInterfaceProjectLintCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValidateServiceInterfaceProjectLintCall) DoAndReturn(f func(any, *gitlab.ProjectLintOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectLintResult, *gitlab.Response, error)) *MockValidateServiceInterfaceProjectLintCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProjectNamespaceLint mocks base method.
func (m *MockValidateServiceInterface) ProjectNamespaceLint(pid any, opt *gitlab.ProjectNamespaceLintOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ProjectLintResult, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProjectNamespaceLint", varargs...)
	ret0, _ := ret[0].(*gitlab.ProjectLintResult)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProjectNamespaceLint indicates an expected call of ProjectNamespaceLint.
func (mr *MockValidateServiceInterfaceMockRecorder) ProjectNamespaceLint(pid, opt any, options ...any) *MockValidateServiceInterfaceProjectNamespaceLintCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectNamespaceLint", reflect.TypeOf((*MockValidateServiceInterface)(nil).ProjectNamespaceLint), varargs...)
	return &MockValidateServiceInterfaceProjectNamespaceLintCall{Call: call}
}

// MockValidateServiceInterfaceProjectNamespaceLintCall wrap *gomock.Call
type MockValidateServiceInterfaceProjectNamespaceLintCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockValidateServiceInterfaceProjectNamespaceLintCall) Return(arg0 *gitlab.ProjectLintResult, arg1 *gitlab.Response, arg2 error) *MockValidateServiceInterfaceProjectNamespaceLintCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockValidateServiceInterfaceProjectNamespaceLintCall) Do(f func(any, *gitlab.ProjectNamespaceLintOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectLintResult, *gitlab.Response, error)) *MockValidateServiceInterfaceProjectNamespaceLintCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockValidateServiceInterfaceProjectNamespaceLintCall) DoAndReturn(f func(any, *gitlab.ProjectNamespaceLintOptions, ...gitlab.RequestOptionFunc) (*gitlab.ProjectLintResult, *gitlab.Response, error)) *MockValidateServiceInterfaceProjectNamespaceLintCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
