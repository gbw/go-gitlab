// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: ReleaseLinksServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=releaselinks_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go ReleaseLinksServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockReleaseLinksServiceInterface is a mock of ReleaseLinksServiceInterface interface.
type MockReleaseLinksServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockReleaseLinksServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockReleaseLinksServiceInterfaceMockRecorder is the mock recorder for MockReleaseLinksServiceInterface.
type MockReleaseLinksServiceInterfaceMockRecorder struct {
	mock *MockReleaseLinksServiceInterface
}

// NewMockReleaseLinksServiceInterface creates a new mock instance.
func NewMockReleaseLinksServiceInterface(ctrl *gomock.Controller) *MockReleaseLinksServiceInterface {
	mock := &MockReleaseLinksServiceInterface{ctrl: ctrl}
	mock.recorder = &MockReleaseLinksServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReleaseLinksServiceInterface) EXPECT() *MockReleaseLinksServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateReleaseLink mocks base method.
func (m *MockReleaseLinksServiceInterface) CreateReleaseLink(pid any, tagName string, opt *gitlab.CreateReleaseLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateReleaseLink", varargs...)
	ret0, _ := ret[0].(*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateReleaseLink indicates an expected call of CreateReleaseLink.
func (mr *MockReleaseLinksServiceInterfaceMockRecorder) CreateReleaseLink(pid, tagName, opt any, options ...any) *MockReleaseLinksServiceInterfaceCreateReleaseLinkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReleaseLink", reflect.TypeOf((*MockReleaseLinksServiceInterface)(nil).CreateReleaseLink), varargs...)
	return &MockReleaseLinksServiceInterfaceCreateReleaseLinkCall{Call: call}
}

// MockReleaseLinksServiceInterfaceCreateReleaseLinkCall wrap *gomock.Call
type MockReleaseLinksServiceInterfaceCreateReleaseLinkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleaseLinksServiceInterfaceCreateReleaseLinkCall) Return(arg0 *gitlab.ReleaseLink, arg1 *gitlab.Response, arg2 error) *MockReleaseLinksServiceInterfaceCreateReleaseLinkCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleaseLinksServiceInterfaceCreateReleaseLinkCall) Do(f func(any, string, *gitlab.CreateReleaseLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceCreateReleaseLinkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleaseLinksServiceInterfaceCreateReleaseLinkCall) DoAndReturn(f func(any, string, *gitlab.CreateReleaseLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceCreateReleaseLinkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteReleaseLink mocks base method.
func (m *MockReleaseLinksServiceInterface) DeleteReleaseLink(pid any, tagName string, link int, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, link}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteReleaseLink", varargs...)
	ret0, _ := ret[0].(*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteReleaseLink indicates an expected call of DeleteReleaseLink.
func (mr *MockReleaseLinksServiceInterfaceMockRecorder) DeleteReleaseLink(pid, tagName, link any, options ...any) *MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, link}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReleaseLink", reflect.TypeOf((*MockReleaseLinksServiceInterface)(nil).DeleteReleaseLink), varargs...)
	return &MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall{Call: call}
}

// MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall wrap *gomock.Call
type MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall) Return(arg0 *gitlab.ReleaseLink, arg1 *gitlab.Response, arg2 error) *MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall) Do(f func(any, string, int, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall) DoAndReturn(f func(any, string, int, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceDeleteReleaseLinkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetReleaseLink mocks base method.
func (m *MockReleaseLinksServiceInterface) GetReleaseLink(pid any, tagName string, link int, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, link}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReleaseLink", varargs...)
	ret0, _ := ret[0].(*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReleaseLink indicates an expected call of GetReleaseLink.
func (mr *MockReleaseLinksServiceInterfaceMockRecorder) GetReleaseLink(pid, tagName, link any, options ...any) *MockReleaseLinksServiceInterfaceGetReleaseLinkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, link}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseLink", reflect.TypeOf((*MockReleaseLinksServiceInterface)(nil).GetReleaseLink), varargs...)
	return &MockReleaseLinksServiceInterfaceGetReleaseLinkCall{Call: call}
}

// MockReleaseLinksServiceInterfaceGetReleaseLinkCall wrap *gomock.Call
type MockReleaseLinksServiceInterfaceGetReleaseLinkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleaseLinksServiceInterfaceGetReleaseLinkCall) Return(arg0 *gitlab.ReleaseLink, arg1 *gitlab.Response, arg2 error) *MockReleaseLinksServiceInterfaceGetReleaseLinkCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleaseLinksServiceInterfaceGetReleaseLinkCall) Do(f func(any, string, int, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceGetReleaseLinkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleaseLinksServiceInterfaceGetReleaseLinkCall) DoAndReturn(f func(any, string, int, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceGetReleaseLinkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListReleaseLinks mocks base method.
func (m *MockReleaseLinksServiceInterface) ListReleaseLinks(pid any, tagName string, opt *gitlab.ListReleaseLinksOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListReleaseLinks", varargs...)
	ret0, _ := ret[0].([]*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListReleaseLinks indicates an expected call of ListReleaseLinks.
func (mr *MockReleaseLinksServiceInterfaceMockRecorder) ListReleaseLinks(pid, tagName, opt any, options ...any) *MockReleaseLinksServiceInterfaceListReleaseLinksCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseLinks", reflect.TypeOf((*MockReleaseLinksServiceInterface)(nil).ListReleaseLinks), varargs...)
	return &MockReleaseLinksServiceInterfaceListReleaseLinksCall{Call: call}
}

// MockReleaseLinksServiceInterfaceListReleaseLinksCall wrap *gomock.Call
type MockReleaseLinksServiceInterfaceListReleaseLinksCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleaseLinksServiceInterfaceListReleaseLinksCall) Return(arg0 []*gitlab.ReleaseLink, arg1 *gitlab.Response, arg2 error) *MockReleaseLinksServiceInterfaceListReleaseLinksCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleaseLinksServiceInterfaceListReleaseLinksCall) Do(f func(any, string, *gitlab.ListReleaseLinksOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceListReleaseLinksCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleaseLinksServiceInterfaceListReleaseLinksCall) DoAndReturn(f func(any, string, *gitlab.ListReleaseLinksOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceListReleaseLinksCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateReleaseLink mocks base method.
func (m *MockReleaseLinksServiceInterface) UpdateReleaseLink(pid any, tagName string, link int, opt *gitlab.UpdateReleaseLinkOptions, options ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, tagName, link, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateReleaseLink", varargs...)
	ret0, _ := ret[0].(*gitlab.ReleaseLink)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateReleaseLink indicates an expected call of UpdateReleaseLink.
func (mr *MockReleaseLinksServiceInterfaceMockRecorder) UpdateReleaseLink(pid, tagName, link, opt any, options ...any) *MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, tagName, link, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReleaseLink", reflect.TypeOf((*MockReleaseLinksServiceInterface)(nil).UpdateReleaseLink), varargs...)
	return &MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall{Call: call}
}

// MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall wrap *gomock.Call
type MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall) Return(arg0 *gitlab.ReleaseLink, arg1 *gitlab.Response, arg2 error) *MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall) Do(f func(any, string, int, *gitlab.UpdateReleaseLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall) DoAndReturn(f func(any, string, int, *gitlab.UpdateReleaseLinkOptions, ...gitlab.RequestOptionFunc) (*gitlab.ReleaseLink, *gitlab.Response, error)) *MockReleaseLinksServiceInterfaceUpdateReleaseLinkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
