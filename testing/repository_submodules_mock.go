// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: RepositorySubmodulesServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=repository_submodules_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go RepositorySubmodulesServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositorySubmodulesServiceInterface is a mock of RepositorySubmodulesServiceInterface interface.
type MockRepositorySubmodulesServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositorySubmodulesServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockRepositorySubmodulesServiceInterfaceMockRecorder is the mock recorder for MockRepositorySubmodulesServiceInterface.
type MockRepositorySubmodulesServiceInterfaceMockRecorder struct {
	mock *MockRepositorySubmodulesServiceInterface
}

// NewMockRepositorySubmodulesServiceInterface creates a new mock instance.
func NewMockRepositorySubmodulesServiceInterface(ctrl *gomock.Controller) *MockRepositorySubmodulesServiceInterface {
	mock := &MockRepositorySubmodulesServiceInterface{ctrl: ctrl}
	mock.recorder = &MockRepositorySubmodulesServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositorySubmodulesServiceInterface) EXPECT() *MockRepositorySubmodulesServiceInterfaceMockRecorder {
	return m.recorder
}

// UpdateSubmodule mocks base method.
func (m *MockRepositorySubmodulesServiceInterface) UpdateSubmodule(pid any, submodule string, opt *gitlab.UpdateSubmoduleOptions, options ...gitlab.RequestOptionFunc) (*gitlab.SubmoduleCommit, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, submodule, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSubmodule", varargs...)
	ret0, _ := ret[0].(*gitlab.SubmoduleCommit)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateSubmodule indicates an expected call of UpdateSubmodule.
func (mr *MockRepositorySubmodulesServiceInterfaceMockRecorder) UpdateSubmodule(pid, submodule, opt any, options ...any) *MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, submodule, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubmodule", reflect.TypeOf((*MockRepositorySubmodulesServiceInterface)(nil).UpdateSubmodule), varargs...)
	return &MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall{Call: call}
}

// MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall wrap *gomock.Call
type MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall) Return(arg0 *gitlab.SubmoduleCommit, arg1 *gitlab.Response, arg2 error) *MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall) Do(f func(any, string, *gitlab.UpdateSubmoduleOptions, ...gitlab.RequestOptionFunc) (*gitlab.SubmoduleCommit, *gitlab.Response, error)) *MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall) DoAndReturn(f func(any, string, *gitlab.UpdateSubmoduleOptions, ...gitlab.RequestOptionFunc) (*gitlab.SubmoduleCommit, *gitlab.Response, error)) *MockRepositorySubmodulesServiceInterfaceUpdateSubmoduleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
