// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: DeployTokensServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=deploy_tokens_mock.go -write_package_comment=false -package=testing gitlab.com/gitlab-org/api/client-go DeployTokensServiceInterface
//

package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDeployTokensServiceInterface is a mock of DeployTokensServiceInterface interface.
type MockDeployTokensServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeployTokensServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockDeployTokensServiceInterfaceMockRecorder is the mock recorder for MockDeployTokensServiceInterface.
type MockDeployTokensServiceInterfaceMockRecorder struct {
	mock *MockDeployTokensServiceInterface
}

// NewMockDeployTokensServiceInterface creates a new mock instance.
func NewMockDeployTokensServiceInterface(ctrl *gomock.Controller) *MockDeployTokensServiceInterface {
	mock := &MockDeployTokensServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDeployTokensServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeployTokensServiceInterface) EXPECT() *MockDeployTokensServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateGroupDeployToken mocks base method.
func (m *MockDeployTokensServiceInterface) CreateGroupDeployToken(gid any, opt *gitlab.CreateGroupDeployTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateGroupDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroupDeployToken indicates an expected call of CreateGroupDeployToken.
func (mr *MockDeployTokensServiceInterfaceMockRecorder) CreateGroupDeployToken(gid, opt any, options ...any) *MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupDeployToken", reflect.TypeOf((*MockDeployTokensServiceInterface)(nil).CreateGroupDeployToken), varargs...)
	return &MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall{Call: call}
}

// MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall wrap *gomock.Call
type MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall) Return(arg0 *gitlab.DeployToken, arg1 *gitlab.Response, arg2 error) *MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall) Do(f func(any, *gitlab.CreateGroupDeployTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall) DoAndReturn(f func(any, *gitlab.CreateGroupDeployTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceCreateGroupDeployTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateProjectDeployToken mocks base method.
func (m *MockDeployTokensServiceInterface) CreateProjectDeployToken(pid any, opt *gitlab.CreateProjectDeployTokenOptions, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateProjectDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateProjectDeployToken indicates an expected call of CreateProjectDeployToken.
func (mr *MockDeployTokensServiceInterfaceMockRecorder) CreateProjectDeployToken(pid, opt any, options ...any) *MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectDeployToken", reflect.TypeOf((*MockDeployTokensServiceInterface)(nil).CreateProjectDeployToken), varargs...)
	return &MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall{Call: call}
}

// MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall wrap *gomock.Call
type MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall) Return(arg0 *gitlab.DeployToken, arg1 *gitlab.Response, arg2 error) *MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall) Do(f func(any, *gitlab.CreateProjectDeployTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall) DoAndReturn(f func(any, *gitlab.CreateProjectDeployTokenOptions, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceCreateProjectDeployTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteGroupDeployToken mocks base method.
func (m *MockDeployTokensServiceInterface) DeleteGroupDeployToken(gid any, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, deployToken}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteGroupDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteGroupDeployToken indicates an expected call of DeleteGroupDeployToken.
func (mr *MockDeployTokensServiceInterfaceMockRecorder) DeleteGroupDeployToken(gid, deployToken any, options ...any) *MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, deployToken}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupDeployToken", reflect.TypeOf((*MockDeployTokensServiceInterface)(nil).DeleteGroupDeployToken), varargs...)
	return &MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall{Call: call}
}

// MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall wrap *gomock.Call
type MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall) Return(arg0 *gitlab.Response, arg1 error) *MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDeployTokensServiceInterfaceDeleteGroupDeployTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteProjectDeployToken mocks base method.
func (m *MockDeployTokensServiceInterface) DeleteProjectDeployToken(pid any, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, deployToken}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteProjectDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProjectDeployToken indicates an expected call of DeleteProjectDeployToken.
func (mr *MockDeployTokensServiceInterfaceMockRecorder) DeleteProjectDeployToken(pid, deployToken any, options ...any) *MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, deployToken}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProjectDeployToken", reflect.TypeOf((*MockDeployTokensServiceInterface)(nil).DeleteProjectDeployToken), varargs...)
	return &MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall{Call: call}
}

// MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall wrap *gomock.Call
type MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall) Return(arg0 *gitlab.Response, arg1 error) *MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDeployTokensServiceInterfaceDeleteProjectDeployTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetGroupDeployToken mocks base method.
func (m *MockDeployTokensServiceInterface) GetGroupDeployToken(gid any, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, deployToken}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGroupDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroupDeployToken indicates an expected call of GetGroupDeployToken.
func (mr *MockDeployTokensServiceInterfaceMockRecorder) GetGroupDeployToken(gid, deployToken any, options ...any) *MockDeployTokensServiceInterfaceGetGroupDeployTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, deployToken}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupDeployToken", reflect.TypeOf((*MockDeployTokensServiceInterface)(nil).GetGroupDeployToken), varargs...)
	return &MockDeployTokensServiceInterfaceGetGroupDeployTokenCall{Call: call}
}

// MockDeployTokensServiceInterfaceGetGroupDeployTokenCall wrap *gomock.Call
type MockDeployTokensServiceInterfaceGetGroupDeployTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployTokensServiceInterfaceGetGroupDeployTokenCall) Return(arg0 *gitlab.DeployToken, arg1 *gitlab.Response, arg2 error) *MockDeployTokensServiceInterfaceGetGroupDeployTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployTokensServiceInterfaceGetGroupDeployTokenCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceGetGroupDeployTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployTokensServiceInterfaceGetGroupDeployTokenCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceGetGroupDeployTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetProjectDeployToken mocks base method.
func (m *MockDeployTokensServiceInterface) GetProjectDeployToken(pid any, deployToken int, options ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, deployToken}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProjectDeployToken", varargs...)
	ret0, _ := ret[0].(*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectDeployToken indicates an expected call of GetProjectDeployToken.
func (mr *MockDeployTokensServiceInterfaceMockRecorder) GetProjectDeployToken(pid, deployToken any, options ...any) *MockDeployTokensServiceInterfaceGetProjectDeployTokenCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, deployToken}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectDeployToken", reflect.TypeOf((*MockDeployTokensServiceInterface)(nil).GetProjectDeployToken), varargs...)
	return &MockDeployTokensServiceInterfaceGetProjectDeployTokenCall{Call: call}
}

// MockDeployTokensServiceInterfaceGetProjectDeployTokenCall wrap *gomock.Call
type MockDeployTokensServiceInterfaceGetProjectDeployTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployTokensServiceInterfaceGetProjectDeployTokenCall) Return(arg0 *gitlab.DeployToken, arg1 *gitlab.Response, arg2 error) *MockDeployTokensServiceInterfaceGetProjectDeployTokenCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployTokensServiceInterfaceGetProjectDeployTokenCall) Do(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceGetProjectDeployTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployTokensServiceInterfaceGetProjectDeployTokenCall) DoAndReturn(f func(any, int, ...gitlab.RequestOptionFunc) (*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceGetProjectDeployTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListAllDeployTokens mocks base method.
func (m *MockDeployTokensServiceInterface) ListAllDeployTokens(options ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAllDeployTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAllDeployTokens indicates an expected call of ListAllDeployTokens.
func (mr *MockDeployTokensServiceInterfaceMockRecorder) ListAllDeployTokens(options ...any) *MockDeployTokensServiceInterfaceListAllDeployTokensCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllDeployTokens", reflect.TypeOf((*MockDeployTokensServiceInterface)(nil).ListAllDeployTokens), options...)
	return &MockDeployTokensServiceInterfaceListAllDeployTokensCall{Call: call}
}

// MockDeployTokensServiceInterfaceListAllDeployTokensCall wrap *gomock.Call
type MockDeployTokensServiceInterfaceListAllDeployTokensCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployTokensServiceInterfaceListAllDeployTokensCall) Return(arg0 []*gitlab.DeployToken, arg1 *gitlab.Response, arg2 error) *MockDeployTokensServiceInterfaceListAllDeployTokensCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployTokensServiceInterfaceListAllDeployTokensCall) Do(f func(...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceListAllDeployTokensCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployTokensServiceInterfaceListAllDeployTokensCall) DoAndReturn(f func(...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceListAllDeployTokensCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListGroupDeployTokens mocks base method.
func (m *MockDeployTokensServiceInterface) ListGroupDeployTokens(gid any, opt *gitlab.ListGroupDeployTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListGroupDeployTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupDeployTokens indicates an expected call of ListGroupDeployTokens.
func (mr *MockDeployTokensServiceInterfaceMockRecorder) ListGroupDeployTokens(gid, opt any, options ...any) *MockDeployTokensServiceInterfaceListGroupDeployTokensCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupDeployTokens", reflect.TypeOf((*MockDeployTokensServiceInterface)(nil).ListGroupDeployTokens), varargs...)
	return &MockDeployTokensServiceInterfaceListGroupDeployTokensCall{Call: call}
}

// MockDeployTokensServiceInterfaceListGroupDeployTokensCall wrap *gomock.Call
type MockDeployTokensServiceInterfaceListGroupDeployTokensCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployTokensServiceInterfaceListGroupDeployTokensCall) Return(arg0 []*gitlab.DeployToken, arg1 *gitlab.Response, arg2 error) *MockDeployTokensServiceInterfaceListGroupDeployTokensCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployTokensServiceInterfaceListGroupDeployTokensCall) Do(f func(any, *gitlab.ListGroupDeployTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceListGroupDeployTokensCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployTokensServiceInterfaceListGroupDeployTokensCall) DoAndReturn(f func(any, *gitlab.ListGroupDeployTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceListGroupDeployTokensCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListProjectDeployTokens mocks base method.
func (m *MockDeployTokensServiceInterface) ListProjectDeployTokens(pid any, opt *gitlab.ListProjectDeployTokensOptions, options ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{pid, opt}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListProjectDeployTokens", varargs...)
	ret0, _ := ret[0].([]*gitlab.DeployToken)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjectDeployTokens indicates an expected call of ListProjectDeployTokens.
func (mr *MockDeployTokensServiceInterfaceMockRecorder) ListProjectDeployTokens(pid, opt any, options ...any) *MockDeployTokensServiceInterfaceListProjectDeployTokensCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{pid, opt}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectDeployTokens", reflect.TypeOf((*MockDeployTokensServiceInterface)(nil).ListProjectDeployTokens), varargs...)
	return &MockDeployTokensServiceInterfaceListProjectDeployTokensCall{Call: call}
}

// MockDeployTokensServiceInterfaceListProjectDeployTokensCall wrap *gomock.Call
type MockDeployTokensServiceInterfaceListProjectDeployTokensCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeployTokensServiceInterfaceListProjectDeployTokensCall) Return(arg0 []*gitlab.DeployToken, arg1 *gitlab.Response, arg2 error) *MockDeployTokensServiceInterfaceListProjectDeployTokensCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeployTokensServiceInterfaceListProjectDeployTokensCall) Do(f func(any, *gitlab.ListProjectDeployTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceListProjectDeployTokensCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeployTokensServiceInterfaceListProjectDeployTokensCall) DoAndReturn(f func(any, *gitlab.ListProjectDeployTokensOptions, ...gitlab.RequestOptionFunc) ([]*gitlab.DeployToken, *gitlab.Response, error)) *MockDeployTokensServiceInterfaceListProjectDeployTokensCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
