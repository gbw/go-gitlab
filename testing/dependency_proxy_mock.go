// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/api/client-go (interfaces: DependencyProxyServiceInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination=dependency_proxy_mock.go -package=testing gitlab.com/gitlab-org/api/client-go DependencyProxyServiceInterface
//

// Package testing is a generated GoMock package.
package testing

import (
	reflect "reflect"

	gitlab "gitlab.com/gitlab-org/api/client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockDependencyProxyServiceInterface is a mock of DependencyProxyServiceInterface interface.
type MockDependencyProxyServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyProxyServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockDependencyProxyServiceInterfaceMockRecorder is the mock recorder for MockDependencyProxyServiceInterface.
type MockDependencyProxyServiceInterfaceMockRecorder struct {
	mock *MockDependencyProxyServiceInterface
}

// NewMockDependencyProxyServiceInterface creates a new mock instance.
func NewMockDependencyProxyServiceInterface(ctrl *gomock.Controller) *MockDependencyProxyServiceInterface {
	mock := &MockDependencyProxyServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDependencyProxyServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDependencyProxyServiceInterface) EXPECT() *MockDependencyProxyServiceInterfaceMockRecorder {
	return m.recorder
}

// PurgeGroupDependencyProxy mocks base method.
func (m *MockDependencyProxyServiceInterface) PurgeGroupDependencyProxy(gid any, options ...gitlab.RequestOptionFunc) (*gitlab.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{gid}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PurgeGroupDependencyProxy", varargs...)
	ret0, _ := ret[0].(*gitlab.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurgeGroupDependencyProxy indicates an expected call of PurgeGroupDependencyProxy.
func (mr *MockDependencyProxyServiceInterfaceMockRecorder) PurgeGroupDependencyProxy(gid any, options ...any) *MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gid}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeGroupDependencyProxy", reflect.TypeOf((*MockDependencyProxyServiceInterface)(nil).PurgeGroupDependencyProxy), varargs...)
	return &MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall{Call: call}
}

// MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall wrap *gomock.Call
type MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall) Return(arg0 *gitlab.Response, arg1 error) *MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall) Do(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall) DoAndReturn(f func(any, ...gitlab.RequestOptionFunc) (*gitlab.Response, error)) *MockDependencyProxyServiceInterfacePurgeGroupDependencyProxyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
